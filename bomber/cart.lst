------- FILE bomber.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_MACRO =	105
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  10000 ????						;			    used for code assembly.
     24  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  10000 ????						;
     26  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  10000 ????						;
     28  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  10000 ????						;			   (standardised macro for vertical synch code)
     30  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     31  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  10000 ????						; 1.0	22/MAR/2003		Initial release
     33  10000 ????
     34  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     35  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     37  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  10000 ????						;   registers and require them to be defined first).
     39  10000 ????
     40  10000 ????						; Available macros...
     41  10000 ????						;   SLEEP n		 - sleep for n cycles
     42  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????						; SLEEP duration
     48  10000 ????						; Original author: Thomas Jentzsch
     49  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  10000 ????						; useful for code where precise timing is required.
     51  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  10000 ????
     55  10000 ????				       MAC	sleep
     56  10000 ????			    .CYCLES    SET	{1}
     57  10000 ????
     58  10000 ????				       IF	.CYCLES < 2
     59  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  10000 ????				       ERR
     61  10000 ????				       ENDIF
     62  10000 ????
     63  10000 ????				       IF	.CYCLES & 1
     64  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     65  10000 ????				       nop	0
     66  10000 ????				       ELSE
     67  10000 ????				       bit	VSYNC
     68  10000 ????				       ENDIF
     69  10000 ????			    .CYCLES    SET	.CYCLES - 3
     70  10000 ????				       ENDIF
     71  10000 ????
     72  10000 ????				       REPEAT	.CYCLES / 2
     73  10000 ????				       nop
     74  10000 ????				       REPEND
     75  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     76  10000 ????
     77  10000 ????						;-------------------------------------------------------------------------------
     78  10000 ????						; VERTICAL_SYNC
     79  10000 ????						; Original author: Manuel Polik
     80  10000 ????						; Inserts the code required for a proper 3 scannline
     81  10000 ????						; vertical sync sequence
     82  10000 ????						;
     83  10000 ????						; Note: Alters the accumulator
     84  10000 ????						;
     85  10000 ????						; IN:
     86  10000 ????						; OUT: A = 1
     87  10000 ????
     88  10000 ????				       MAC	vertical_sync
     89  10000 ????				       LDA	#$02	; A = VSYNC enable
     90  10000 ????				       STA	WSYNC	; Finish current line
     91  10000 ????				       STA	VSYNC	; Start vertical sync
     92  10000 ????				       STA	WSYNC	; 1st line vertical sync
     93  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     94  10000 ????				       LSR		; A = VSYNC disable
     95  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     96  10000 ????				       STA	VSYNC	; Stop vertical sync
     97  10000 ????				       ENDM
     98  10000 ????
     99  10000 ????						;-------------------------------------------------------------------------------
    100  10000 ????						; CLEAN_START
    101  10000 ????						; Original author: Andrew Davie
    102  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  10000 ????						; Use as very first section of code on boot (ie: at reset)
    106  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  10000 ????
    108  10000 ????				       MAC	clean_start
    109  10000 ????				       sei
    110  10000 ????				       cld
    111  10000 ????
    112  10000 ????				       ldx	#0
    113  10000 ????				       txa
    114  10000 ????				       tay
    115  10000 ????			    .CLEAR_STACK dex
    116  10000 ????				       txs
    117  10000 ????				       pha
    118  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  10000 ????
    120  10000 ????				       ENDM
    121  10000 ????
    122  10000 ????						;-------------------------------------------------------
    123  10000 ????						; SET_POINTER
    124  10000 ????						; Original author: Manuel Rotschkar
    125  10000 ????						;
    126  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  10000 ????						;
    128  10000 ????						; Usage: SET_POINTER pointer, address
    129  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  10000 ????						;
    131  10000 ????						; Note: Alters the accumulator, NZ flags
    132  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  10000 ????						; IN 2: absolute address
    134  10000 ????
    135  10000 ????				       MAC	set_pointer
    136  10000 ????			    .POINTER   SET	{1}
    137  10000 ????			    .ADDRESS   SET	{2}
    138  10000 ????
    139  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  10000 ????				       STA	.POINTER	; Store in pointer
    141  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    142  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    143  10000 ????
    144  10000 ????				       ENDM
    145  10000 ????
    146  10000 ????
    147  10000 ????						;-------------------------------------------------------
    148  10000 ????						; SAME PAGE BRANCH CHECK
    149  10000 ????						; Original auther: John Payson
    150  10000 ????						;
    151  10000 ????						; Usage: sbeq, sbne, etc just like a normal beq, bne, etc.
    152  10000 ????						;	  A message will be output if the target of the branch
    153  10000 ????						;	  is not on the same page.
    154  10000 ????						;
    155  10000 ????				       mac	sbcc
    156  10000 ????				       bcc	{1}
    157  10000 ????				       if	(* ^ {1}) & $FF00
    158  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    159  10000 ????				       err
    160  10000 ????				       endif
    161  10000 ????				       endm
    162  10000 ????
    163  10000 ????				       mac	sbcs
    164  10000 ????				       bcs	{1}
    165  10000 ????				       if	(* ^ {1}) & $FF00
    166  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    167  10000 ????				       err
    168  10000 ????				       endif
    169  10000 ????				       endm
    170  10000 ????
    171  10000 ????				       mac	sbeq
    172  10000 ????				       beq	{1}
    173  10000 ????				       if	(* ^ {1}) & $FF00
    174  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    175  10000 ????				       err
    176  10000 ????				       endif
    177  10000 ????				       endm
    178  10000 ????
    179  10000 ????				       mac	sbmi
    180  10000 ????				       bmi	{1}
    181  10000 ????				       if	(* ^ {1}) & $FF00
    182  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    183  10000 ????				       err
    184  10000 ????				       endif
    185  10000 ????				       endm
    186  10000 ????
    187  10000 ????				       mac	sbne
    188  10000 ????				       bne	{1}
    189  10000 ????				       if	(* ^ {1}) & $FF00
    190  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    191  10000 ????				       err
    192  10000 ????				       endif
    193  10000 ????				       endm
    194  10000 ????
    195  10000 ????				       mac	sbpl
    196  10000 ????				       bpl	{1}
    197  10000 ????				       if	(* ^ {1}) & $FF00
    198  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    199  10000 ????				       err
    200  10000 ????				       endif
    201  10000 ????				       endm
    202  10000 ????
    203  10000 ????				       mac	sbvc
    204  10000 ????				       bvc	{1}
    205  10000 ????				       if	(* ^ {1}) & $FF00
    206  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    207  10000 ????				       err
    208  10000 ????				       endif
    209  10000 ????				       endm
    210  10000 ????
    211  10000 ????				       mac	sbvs
    212  10000 ????				       bvs	{1}
    213  10000 ????				       if	(* ^ {1}) & $FF00
    214  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    215  10000 ????				       err
    216  10000 ????				       endif
    217  10000 ????				       endm
    218  10000 ????
    219  10000 ????						;-------------------------------------------------------
    220  10000 ????						; DIFFERENT PAGE BRANCH CHECK
    221  10000 ????						; Original auther: Darrell Spice, Jr.
    222  10000 ????						;
    223  10000 ????						; Usage: dbeq, dbne, etc just like a normal beq, bne, etc.
    224  10000 ????						;	  A message will be output if the target of the branch
    225  10000 ????						;	  is not on a different page.
    226  10000 ????						;
    227  10000 ????				       mac	dbcc
    228  10000 ????				       bcc	{1}
    229  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    230  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    231  10000 ????				       err
    232  10000 ????				       endif
    233  10000 ????				       endm
    234  10000 ????
    235  10000 ????				       mac	dbcs
    236  10000 ????				       bcs	{1}
    237  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    238  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    239  10000 ????				       err
    240  10000 ????				       endif
    241  10000 ????				       endm
    242  10000 ????
    243  10000 ????				       mac	dbeq
    244  10000 ????				       beq	{1}
    245  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    246  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    247  10000 ????				       err
    248  10000 ????				       endif
    249  10000 ????				       endm
    250  10000 ????
    251  10000 ????				       mac	dbmi
    252  10000 ????				       bmi	{1}
    253  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    254  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    255  10000 ????				       err
    256  10000 ????				       endif
    257  10000 ????				       endm
    258  10000 ????
    259  10000 ????				       mac	dbne
    260  10000 ????				       bne	{1}
    261  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    262  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    263  10000 ????				       err
    264  10000 ????				       endif
    265  10000 ????				       endm
    266  10000 ????
    267  10000 ????				       mac	dbpl
    268  10000 ????				       bpl	{1}
    269  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    270  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    271  10000 ????				       err
    272  10000 ????				       endif
    273  10000 ????				       endm
    274  10000 ????
    275  10000 ????				       mac	dbvc
    276  10000 ????				       bvc	{1}
    277  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    278  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    279  10000 ????				       err
    280  10000 ????				       endif
    281  10000 ????				       endm
    282  10000 ????
    283  10000 ????				       mac	dbvs
    284  10000 ????				       bvs	{1}
    285  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    286  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    287  10000 ????				       err
    288  10000 ????				       endif
    289  10000 ????				       endm
    290  10000 ????
    291  10000 ????						; EOF
------- FILE bomber.asm
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????						;-------------------------------------------------------------------------------
     45  10000 ????						; TIA_BASE_ADDRESS
     46  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     47  10000 ????						; Normally 0, the base address should (externally, before including this file)
     48  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     49  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     50  10000 ????						; < $40 as a bankswitch.
     51  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     52  10000 ????			   -TIA_BASE_ADDRESS =	0
     53  10000 ????				       ENDIF
     54  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     55  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     56  10000 ????						; *OR* by declaring the label before including this file, eg:
     57  10000 ????						; TIA_BASE_ADDRESS = $40
     58  10000 ????						;   include "vcs.h"
     59  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     60  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     61  10000 ????						; for the mirrored ROM hardware registers.
     62  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     63  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     64  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     65  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     66  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     67  10000 ????				       ENDIF
     68  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     69  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     70  10000 ????				       ENDIF
     71  10000 ????						;-------------------------------------------------------------------------------
     72 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     73 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     74 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     75 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     76 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     77 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     78 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     79 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     80 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     81 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     82 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     83 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     84 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     85 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     86 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
     87 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
     88 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
     89 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
     90 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
     91 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
     92 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
     93 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
     94 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
     95 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
     96 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
     97 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
     98 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
     99 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    100 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    101 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    102 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    103 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    104 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    105 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    106 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    107 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    108 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    109 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    110 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    111 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    112 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    113 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    114 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    115 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    116 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    117 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    118 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    119 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    120 U002d							;-------------------------------------------------------------------------------
    121 U000e ????				      SEG.U	TIA_REGISTERS_READ
    122 U0000					      ORG	TIA_BASE_READ_ADDRESS
    123 U0000							;											bit 7	 bit 6
    124 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    125 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    126 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    127 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    128 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    129 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    130 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    131 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    132 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    133 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    134 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    135 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    136 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    137 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    138 U000e							;-------------------------------------------------------------------------------
    139 U0298 ????				      SEG.U	RIOT
    140 U0280					      ORG	$280
    141 U0280							; RIOT MEMORY MAP
    142 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    143 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    144 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    145 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    146 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    147 U0284		       00	   INTIM      ds	1	; $284		Timer output
    148 U0285		       00	   TIMINT     ds	1	; $285
    149 U0286							; Unused/undefined registers ($285-$294)
    150 U0286		       00		      ds	1	; $286
    151 U0287		       00		      ds	1	; $287
    152 U0288		       00		      ds	1	; $288
    153 U0289		       00		      ds	1	; $289
    154 U028a		       00		      ds	1	; $28A
    155 U028b		       00		      ds	1	; $28B
    156 U028c		       00		      ds	1	; $28C
    157 U028d		       00		      ds	1	; $28D
    158 U028e		       00		      ds	1	; $28E
    159 U028f		       00		      ds	1	; $28F
    160 U0290		       00		      ds	1	; $290
    161 U0291		       00		      ds	1	; $291
    162 U0292		       00		      ds	1	; $292
    163 U0293		       00		      ds	1	; $293
    164 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    165 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    166 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    167 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    168 U0298							;-------------------------------------------------------------------------------
    169 U0298							; The following required for back-compatibility with code which does not use
    170 U0298							; segments.
    171  0000 ????				      SEG
    172  0000 ????						; EOF
------- FILE bomber.asm
      5  0000 ????
      6 U008e ????				      seg.u	Variables
      7 U0080					      org	$80
      8 U0080
      9 U0080		       00	   JetXPos    byte.b
     10 U0081		       00	   JetYPos    byte.b
     11 U0082		       00	   BomberXPos byte.b
     12 U0083		       00	   BomberYPos byte.b
     13 U0084		       00 00	   BallDudePtr word.w
     14 U0086		       00 00	   AdrienPtr  word.w
     15 U0088		       00 00	   BallDudeColPtr word.w
     16 U008a		       00 00	   AdrienColPtr word.w
     17 U008c		       00	   JetAnimOffset byte.b
     18 U008d		       00	   Random     byte.b
     19 U008e
     20 U008e							; Define constants
     21 U008e		       00 09	   SPRITE_HEIGHT =	9
     22 U008e
     23  10000 ????				       seg	Code
     24  f000					      org	$F000
     25  f000
     26  f000				   Reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     28  f00b
     29  f00b							; Initialise RAM variables and TIA registers
     30  f00b							; Set initial player coordinates
     31  f00b		       a9 50		      lda	#80
     32  f00d		       85 81		      sta	JetYPos
     33  f00f		       a9 00		      lda	#0
     34  f011		       85 80		      sta	JetXPos
     35  f013
     36  f013							; Set initial bomber coordinates
     37  f013							; Basically just some random coordinates as placeholder lol
     38  f013		       a9 53		      lda	#83
     39  f015		       85 83		      sta	BomberYPos
     40  f017		       a9 50		      lda	#80
     41  f019		       85 82		      sta	BomberXPos
     42  f01b		       a9 d4		      lda	#%11010100
     43  f01d		       85 8d		      sta	Random
     44  f01f
     45  f01f							; Initialise sprite and palette pointers
     46  f01f		       a9 b6		      lda	#<BallDude
     47  f021		       85 84		      sta	BallDudePtr
     48  f023		       a9 f1		      lda	#>BallDude
     49  f025		       85 85		      sta	BallDudePtr+1
     50  f027
     51  f027		       a9 c8		      lda	#<Adrien
     52  f029		       85 86		      sta	AdrienPtr
     53  f02b		       a9 f1		      lda	#>Adrien
     54  f02d		       85 87		      sta	AdrienPtr+1
     55  f02f
     56  f02f		       a9 d1		      lda	#<BallDudeCol
     57  f031		       85 88		      sta	BallDudeColPtr
     58  f033		       a9 f1		      lda	#>BallDudeCol
     59  f035		       85 89		      sta	BallDudeColPtr+1
     60  f037
     61  f037		       a9 e3		      lda	#<AdrienCol
     62  f039		       85 8a		      sta	AdrienColPtr
     63  f03b		       a9 f1		      lda	#>AdrienCol
     64  f03d		       85 8b		      sta	AdrienColPtr+1
     65  f03f
     66  f03f							; Begin rendering
     67  f03f				   StartFrame
     68  f03f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     69  f03f							; Pre-vblank calculations
     70  f03f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     71  f03f		       a5 80		      lda	JetXPos
     72  f041		       a0 00		      ldy	#0	; Corresponds to P0
     73  f043		       20 84 f1 	      jsr	SetObjXPos
     74  f046
     75  f046		       a5 82		      lda	BomberXPos
     76  f048		       a0 01		      ldy	#1	; Corresponds to p1
     77  f04a		       20 84 f1 	      jsr	SetObjXPos
     78  f04d
     79  f04d							; Poke registers
     80  f04d		       85 02		      sta	WSYNC
     81  f04f		       85 2a		      sta	HMOVE
     82  f051
     83  f051							; Turn on vblank and vsync
     84  f051		       a2 02		      ldx	#2
     85  f053		       86 01		      stx	VBLANK
     86  f055		       86 00		      stx	VSYNC
     87  f057					      REPEAT	3
     88  f057		       86 02		      stx	WSYNC
     87  f057					      REPEND
     88  f059		       86 02		      stx	WSYNC
     87  f059					      REPEND
     88  f05b		       86 02		      stx	WSYNC
     89  f05d					      REPEND
     90  f05d							; Turn off vsync
     91  f05d		       a2 00		      ldx	#0
     92  f05f		       86 00		      stx	VSYNC
     93  f061
     94  f061							; Render VBLANK
     95  f061					      REPEAT	37
     96  f061		       86 02		      stx	WSYNC
     95  f061					      REPEND
     96  f063		       86 02		      stx	WSYNC
     95  f063					      REPEND
     96  f065		       86 02		      stx	WSYNC
     95  f065					      REPEND
     96  f067		       86 02		      stx	WSYNC
     95  f067					      REPEND
     96  f069		       86 02		      stx	WSYNC
     95  f069					      REPEND
     96  f06b		       86 02		      stx	WSYNC
     95  f06b					      REPEND
     96  f06d		       86 02		      stx	WSYNC
     95  f06d					      REPEND
     96  f06f		       86 02		      stx	WSYNC
     95  f06f					      REPEND
     96  f071		       86 02		      stx	WSYNC
     95  f071					      REPEND
     96  f073		       86 02		      stx	WSYNC
     95  f073					      REPEND
     96  f075		       86 02		      stx	WSYNC
     95  f075					      REPEND
     96  f077		       86 02		      stx	WSYNC
     95  f077					      REPEND
     96  f079		       86 02		      stx	WSYNC
     95  f079					      REPEND
     96  f07b		       86 02		      stx	WSYNC
     95  f07b					      REPEND
     96  f07d		       86 02		      stx	WSYNC
     95  f07d					      REPEND
     96  f07f		       86 02		      stx	WSYNC
     95  f07f					      REPEND
     96  f081		       86 02		      stx	WSYNC
     95  f081					      REPEND
     96  f083		       86 02		      stx	WSYNC
     95  f083					      REPEND
     96  f085		       86 02		      stx	WSYNC
     95  f085					      REPEND
     96  f087		       86 02		      stx	WSYNC
     95  f087					      REPEND
     96  f089		       86 02		      stx	WSYNC
     95  f089					      REPEND
     96  f08b		       86 02		      stx	WSYNC
     95  f08b					      REPEND
     96  f08d		       86 02		      stx	WSYNC
     95  f08d					      REPEND
     96  f08f		       86 02		      stx	WSYNC
     95  f08f					      REPEND
     96  f091		       86 02		      stx	WSYNC
     95  f091					      REPEND
     96  f093		       86 02		      stx	WSYNC
     95  f093					      REPEND
     96  f095		       86 02		      stx	WSYNC
     95  f095					      REPEND
     96  f097		       86 02		      stx	WSYNC
     95  f097					      REPEND
     96  f099		       86 02		      stx	WSYNC
     95  f099					      REPEND
     96  f09b		       86 02		      stx	WSYNC
     95  f09b					      REPEND
     96  f09d		       86 02		      stx	WSYNC
     95  f09d					      REPEND
     96  f09f		       86 02		      stx	WSYNC
     95  f09f					      REPEND
     96  f0a1		       86 02		      stx	WSYNC
     95  f0a1					      REPEND
     96  f0a3		       86 02		      stx	WSYNC
     95  f0a3					      REPEND
     96  f0a5		       86 02		      stx	WSYNC
     95  f0a5					      REPEND
     96  f0a7		       86 02		      stx	WSYNC
     95  f0a7					      REPEND
     96  f0a9		       86 02		      stx	WSYNC
     97  f0ab					      REPEND
     98  f0ab							; Turn off VBLANK
     99  f0ab		       86 01		      stx	VBLANK
    100  f0ad
    101  f0ad							; Render the visible scanlines
    102  f0ad				   VisibleScanlines
    103  f0ad							; Set background colour
    104  f0ad		       a9 84		      lda	#$84	; Blue
    105  f0af		       85 09		      sta	COLUBK
    106  f0b1							; Set playfield colour
    107  f0b1		       a9 c2		      lda	#$C2
    108  f0b3		       85 08		      sta	COLUPF
    109  f0b5
    110  f0b5							; Setup playfield
    111  f0b5		       a9 f0		      lda	#%11110000	; PF0 uses first 4 bits and is reversed
    112  f0b7		       85 0d		      sta	PF0
    113  f0b9		       a9 c0		      lda	#%11000000
    114  f0bb		       85 0e		      sta	PF1
    115  f0bd		       a9 00		      lda	#0
    116  f0bf		       85 0f		      sta	PF2
    117  f0c1
    118  f0c1							; Playfield reflection
    119  f0c1		       a9 01		      lda	#%00000001
    120  f0c3		       85 0a		      sta	CTRLPF
    121  f0c5
    122  f0c5		       a2 60		      ldx	#96
    123  f0c7
    124  f0c7							; Render the 96 visible scanline
    125  f0c7							; Using a 2 line kernel
    126  f0c7				   .GameLineLoop
    127  f0c7				   .InsideBallDude
    128  f0c7		       8a		      txa
    129  f0c8		       38		      sec
    130  f0c9		       e5 81		      sbc	JetYPos
    131  f0cb		       c5 09		      cmp	SPRITE_HEIGHT
    132  f0cd		       90 02		      bcc	.DrawSpriteP0
    133  f0cf		       a9 00		      lda	#0
    134  f0d1
    135  f0d1				   .DrawSpriteP0
    136  f0d1		       18		      clc
    137  f0d2		       65 8c		      adc	JetAnimOffset
    138  f0d4		       a8		      tay
    139  f0d5		       b1 84		      lda	(BallDudePtr),Y	; Y register is only register that can work with pointers
    140  f0d7		       85 02		      sta	WSYNC	; Wait for scanline
    141  f0d9		       85 1b		      sta	GRP0	; Set graphics for P0
    142  f0db		       b1 88		      lda	(BallDudeColPtr),Y
    143  f0dd		       85 06		      sta	COLUP0
    144  f0df
    145  f0df				   .InsideAdrien
    146  f0df		       8a		      txa
    147  f0e0		       38		      sec
    148  f0e1		       e5 83		      sbc	BomberYPos
    149  f0e3		       c5 09		      cmp	SPRITE_HEIGHT
    150  f0e5		       90 02		      bcc	.DrawSpriteP1
    151  f0e7		       a9 00		      lda	#0
    152  f0e9
    153  f0e9				   .DrawSpriteP1
    154  f0e9		       a8		      tay
    155  f0ea
    156  f0ea							; Set Adrien to be thicc because it'll be funny idk
    157  f0ea		       a9 07		      lda	#%00000111
    158  f0ec		       85 05		      sta	NUSIZ1
    159  f0ee		       98		      tya
    160  f0ef
    161  f0ef		       b1 86		      lda	(AdrienPtr),Y	; Y register is only register that can work with pointers
    162  f0f1		       85 02		      sta	WSYNC	; Wait for scanline
    163  f0f3		       85 1c		      sta	GRP1	; Set graphics for P0
    164  f0f5		       b1 8a		      lda	(AdrienColPtr),Y
    165  f0f7		       85 07		      sta	COLUP1
    166  f0f9
    167  f0f9		       ca		      dex
    168  f0fa		       d0 cb		      bne	.GameLineLoop
    169  f0fc
    170  f0fc							; Display vblank
    171  f0fc				   Overscan
    172  f0fc		       a9 02		      lda	#2
    173  f0fe		       85 01		      sta	VBLANK
    174  f100					      REPEAT	30
    175  f100		       85 02		      sta	WSYNC
    174  f100					      REPEND
    175  f102		       85 02		      sta	WSYNC
    174  f102					      REPEND
    175  f104		       85 02		      sta	WSYNC
    174  f104					      REPEND
    175  f106		       85 02		      sta	WSYNC
    174  f106					      REPEND
    175  f108		       85 02		      sta	WSYNC
    174  f108					      REPEND
    175  f10a		       85 02		      sta	WSYNC
    174  f10a					      REPEND
    175  f10c		       85 02		      sta	WSYNC
    174  f10c					      REPEND
    175  f10e		       85 02		      sta	WSYNC
    174  f10e					      REPEND
    175  f110		       85 02		      sta	WSYNC
    174  f110					      REPEND
    175  f112		       85 02		      sta	WSYNC
    174  f112					      REPEND
    175  f114		       85 02		      sta	WSYNC
    174  f114					      REPEND
    175  f116		       85 02		      sta	WSYNC
    174  f116					      REPEND
    175  f118		       85 02		      sta	WSYNC
    174  f118					      REPEND
    175  f11a		       85 02		      sta	WSYNC
    174  f11a					      REPEND
    175  f11c		       85 02		      sta	WSYNC
    174  f11c					      REPEND
    175  f11e		       85 02		      sta	WSYNC
    174  f11e					      REPEND
    175  f120		       85 02		      sta	WSYNC
    174  f120					      REPEND
    175  f122		       85 02		      sta	WSYNC
    174  f122					      REPEND
    175  f124		       85 02		      sta	WSYNC
    174  f124					      REPEND
    175  f126		       85 02		      sta	WSYNC
    174  f126					      REPEND
    175  f128		       85 02		      sta	WSYNC
    174  f128					      REPEND
    175  f12a		       85 02		      sta	WSYNC
    174  f12a					      REPEND
    175  f12c		       85 02		      sta	WSYNC
    174  f12c					      REPEND
    175  f12e		       85 02		      sta	WSYNC
    174  f12e					      REPEND
    175  f130		       85 02		      sta	WSYNC
    174  f130					      REPEND
    175  f132		       85 02		      sta	WSYNC
    174  f132					      REPEND
    175  f134		       85 02		      sta	WSYNC
    174  f134					      REPEND
    175  f136		       85 02		      sta	WSYNC
    174  f136					      REPEND
    175  f138		       85 02		      sta	WSYNC
    174  f138					      REPEND
    175  f13a		       85 02		      sta	WSYNC
    176  f13c					      REPEND
    177  f13c
    178  f13c		       a9 00		      lda	#0
    179  f13e		       85 01		      sta	VBLANK
    180  f140
    181  f140							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    182  f140							; Joystick input
    183  f140							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    184  f140		       a6 80		      ldx	JetXPos
    185  f142				   CheckP0Up
    186  f142		       a9 10		      lda	#%00010000
    187  f144		       2c 80 02 	      bit	SWCHA
    188  f147		       d0 02		      bne	CheckP0Down
    189  f149		       e6 81		      inc	JetYPos
    190  f14b				   CheckP0Down
    191  f14b		       a9 20		      lda	#%00100000
    192  f14d		       2c 80 02 	      bit	SWCHA
    193  f150		       d0 02		      bne	CheckP0Left
    194  f152		       c6 81		      dec	JetYPos
    195  f154				   CheckP0Left
    196  f154		       a9 40		      lda	#%01000000
    197  f156		       2c 80 02 	      bit	SWCHA
    198  f159		       d0 02		      bne	CheckP0Right
    199  f15b		       c6 80		      dec	JetXPos
    200  f15d				   CheckP0Right
    201  f15d		       a9 80		      lda	#%10000000
    202  f15f		       2c 80 02 	      bit	SWCHA
    203  f162		       d0 02		      bne	NoInput
    204  f164		       e6 80		      inc	JetXPos
    205  f166				   NoInput
    206  f166		       a9 00		      lda	#0
    207  f168		       85 8c		      sta	JetAnimOffset
    208  f16a		       e4 80		      cpx	JetXPos
    209  f16c		       f0 04		      beq	NoChange
    210  f16e							; Set the sprite pointer to BallDude Turning
    211  f16e		       a5 09		      lda	SPRITE_HEIGHT
    212  f170		       85 8c		      sta	JetAnimOffset
    213  f172				   NoChange
    214  f172
    215  f172				   UpdateBomberPosition
    216  f172		       18		      clc
    217  f173		       a5 83		      lda	BomberYPos
    218  f175		       c9 00		      cmp	#0
    219  f177		       30 05		      bmi	.ResetBomberPosition
    220  f179
    221  f179		       c6 83		      dec	BomberYPos
    222  f17b		       4c 81 f1 	      jmp	EndPositionUpdate
    223  f17e
    224  f17e				   .ResetBomberPosition
    225  f17e		       20 98 f1 	      jsr	SpawnBomber
    226  f181
    227  f181				   EndPositionUpdate
    228  f181
    229  f181							; Loop forever
    230  f181		       4c 3f f0 	      jmp	StartFrame
    231  f184
    232  f184							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    233  f184							; accumulator contains x-posiiton
    234  f184							; y register contains object (0:player0, 1:player1, 2:missile0, 3:missile1, 4:ball)
    235  f184							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    236  f184				   SetObjXPos subroutine
    237  f184		       85 02		      sta	WSYNC
    238  f186		       38		      sec
    239  f187				   .DivideLoop
    240  f187		       e9 0f		      sbc	#15
    241  f189		       b0 fc		      bcs	.DivideLoop	; loop while carry is set
    242  f18b
    243  f18b		       49 07		      eor	#7	; exclusive OR with accumulator
    244  f18d							; A will be between -8 and 7
    245  f18d					      REPEAT	4
    246  f18d		       0a		      asl		; bitshift a, HMP0 uses only 4 bits
    245  f18d					      REPEND
    246  f18e		       0a		      asl		; bitshift a, HMP0 uses only 4 bits
    245  f18e					      REPEND
    246  f18f		       0a		      asl		; bitshift a, HMP0 uses only 4 bits
    245  f18f					      REPEND
    246  f190		       0a		      asl		; bitshift a, HMP0 uses only 4 bits
    247  f191					      REPEND
    248  f191
    249  f191		       99 20 00 	      sta	HMP0,Y	; set fine position value
    250  f194		       99 10 00 	      sta	RESP0,Y	; set coarse position value
    251  f197		       60		      rts
    252  f198
    253  f198							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    254  f198							; generate random number using LFSR
    255  f198							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    256  f198				   SpawnBomber subroutine
    257  f198							; The LFSR
    258  f198		       a5 8d		      lda	Random
    259  f19a		       0a		      asl
    260  f19b		       45 8d		      eor	Random
    261  f19d		       0a		      asl
    262  f19e		       45 8d		      eor	Random
    263  f1a0		       0a		      asl
    264  f1a1		       0a		      asl
    265  f1a2		       45 8d		      eor	Random
    266  f1a4		       0a		      asl
    267  f1a5		       26 8d		      rol	Random
    268  f1a7
    269  f1a7							; Divide by 4 to match playfield size
    270  f1a7		       4a		      lsr
    271  f1a8		       4a		      lsr
    272  f1a9		       85 82		      sta	BomberXPos
    273  f1ab		       a9 1e		      lda	#30	; Add 30 for playfield bounds
    274  f1ad		       65 82		      adc	BomberXPos
    275  f1af		       85 82		      sta	BomberXPos
    276  f1b1
    277  f1b1		       a9 60		      lda	#96
    278  f1b3		       85 83		      sta	BomberYPos
    279  f1b5
    280  f1b5		       60		      rts
    281  f1b6
    282  f1b6							; Sprites
    283  f1b6				   BallDude
    284  f1b6		       00		      .byte.b	#%00000000
    285  f1b7		       7e		      .byte.b	#%01111110	;$5A
    286  f1b8		       ff		      .byte.b	#%11111111	;$5A
    287  f1b9		       ff		      .byte.b	#%11111111	;$58
    288  f1ba		       ff		      .byte.b	#%11111111	;$56
    289  f1bb		       9f		      .byte.b	#%10011111	;$54
    290  f1bc		       db		      .byte.b	#%11011011	;$54
    291  f1bd		       fb		      .byte.b	#%11111011	;$52
    292  f1be		       76		      .byte.b	#%01110110	;$52
    293  f1bf				   BallDudeTurning
    294  f1bf		       00		      .byte.b	#%00000000
    295  f1c0		       18		      .byte.b	#%00011000	;$5A
    296  f1c1		       3c		      .byte.b	#%00111100	;$58
    297  f1c2		       7e		      .byte.b	#%01111110	;$56
    298  f1c3		       7e		      .byte.b	#%01111110	;$54
    299  f1c4		       4a		      .byte.b	#%01001010	;$54
    300  f1c5		       6a		      .byte.b	#%01101010	;$52
    301  f1c6		       34		      .byte.b	#%00110100	;$52
    302  f1c7		       18		      .byte.b	#%00011000	;$52
    303  f1c8				   Adrien
    304  f1c8		       00		      .byte.b	#%00000000
    305  f1c9		       ff		      .byte.b	#%11111111	;$16
    306  f1ca		       e7		      .byte.b	#%11100111	;$16
    307  f1cb		       e7		      .byte.b	#%11100111	;$18
    308  f1cc		       7e		      .byte.b	#%01111110	;$18
    309  f1cd		       5a		      .byte.b	#%01011010	;$1A
    310  f1ce		       3c		      .byte.b	#%00111100	;$1A
    311  f1cf		       3c		      .byte.b	#%00111100	;$1C
    312  f1d0		       18		      .byte.b	#%00011000	;$1C
    313  f1d1
    314  f1d1				   BallDudeCol
    315  f1d1		       00		      .byte.b	#$00
    316  f1d2		       5a		      .byte.b	#$5A	;
    317  f1d3		       58		      .byte.b	#$58	;
    318  f1d4		       56		      .byte.b	#$56	;
    319  f1d5		       54		      .byte.b	#$54	;
    320  f1d6		       54		      .byte.b	#$54	;
    321  f1d7		       52		      .byte.b	#$52	;
    322  f1d8		       52		      .byte.b	#$52	;
    323  f1d9		       52		      .byte.b	#$52	;
    324  f1da				   BallDudeTurningCol
    325  f1da		       00		      .byte.b	#$00
    326  f1db		       5a		      .byte.b	#$5A	;
    327  f1dc		       58		      .byte.b	#$58	;
    328  f1dd		       56		      .byte.b	#$56	;
    329  f1de		       54		      .byte.b	#$54	;
    330  f1df		       54		      .byte.b	#$54	;
    331  f1e0		       52		      .byte.b	#$52	;
    332  f1e1		       52		      .byte.b	#$52	;
    333  f1e2		       52		      .byte.b	#$52	;
    334  f1e3				   AdrienCol
    335  f1e3		       00		      .byte.b	#$00
    336  f1e4		       16		      .byte.b	#$16	;
    337  f1e5		       16		      .byte.b	#$16	;
    338  f1e6		       18		      .byte.b	#$18	;
    339  f1e7		       18		      .byte.b	#$18	;
    340  f1e8		       1a		      .byte.b	#$1A	;
    341  f1e9		       1a		      .byte.b	#$1A	;
    342  f1ea		       1c		      .byte.b	#$1C	;
    343  f1eb		       1c		      .byte.b	#$1C	;
    344  f1ec
    345  f1ec							; Complete ROM with 4kb
    346  fffc					      org	$FFFC
    347  fffc		       00 f0		      word.w	Reset
    348  fffe		       00 f0		      word.w	Reset
