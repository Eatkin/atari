------- FILE bomber.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_MACRO =	105
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  10000 ????						;			    used for code assembly.
     24  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  10000 ????						;
     26  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  10000 ????						;
     28  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  10000 ????						;			   (standardised macro for vertical synch code)
     30  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     31  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  10000 ????						; 1.0	22/MAR/2003		Initial release
     33  10000 ????
     34  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     35  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     37  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  10000 ????						;   registers and require them to be defined first).
     39  10000 ????
     40  10000 ????						; Available macros...
     41  10000 ????						;   SLEEP n		 - sleep for n cycles
     42  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????						; SLEEP duration
     48  10000 ????						; Original author: Thomas Jentzsch
     49  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  10000 ????						; useful for code where precise timing is required.
     51  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  10000 ????
     55  10000 ????				       MAC	sleep
     56  10000 ????			    .CYCLES    SET	{1}
     57  10000 ????
     58  10000 ????				       IF	.CYCLES < 2
     59  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  10000 ????				       ERR
     61  10000 ????				       ENDIF
     62  10000 ????
     63  10000 ????				       IF	.CYCLES & 1
     64  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     65  10000 ????				       nop	0
     66  10000 ????				       ELSE
     67  10000 ????				       bit	VSYNC
     68  10000 ????				       ENDIF
     69  10000 ????			    .CYCLES    SET	.CYCLES - 3
     70  10000 ????				       ENDIF
     71  10000 ????
     72  10000 ????				       REPEAT	.CYCLES / 2
     73  10000 ????				       nop
     74  10000 ????				       REPEND
     75  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     76  10000 ????
     77  10000 ????						;-------------------------------------------------------------------------------
     78  10000 ????						; VERTICAL_SYNC
     79  10000 ????						; Original author: Manuel Polik
     80  10000 ????						; Inserts the code required for a proper 3 scannline
     81  10000 ????						; vertical sync sequence
     82  10000 ????						;
     83  10000 ????						; Note: Alters the accumulator
     84  10000 ????						;
     85  10000 ????						; IN:
     86  10000 ????						; OUT: A = 1
     87  10000 ????
     88  10000 ????				       MAC	vertical_sync
     89  10000 ????				       LDA	#$02	; A = VSYNC enable
     90  10000 ????				       STA	WSYNC	; Finish current line
     91  10000 ????				       STA	VSYNC	; Start vertical sync
     92  10000 ????				       STA	WSYNC	; 1st line vertical sync
     93  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     94  10000 ????				       LSR		; A = VSYNC disable
     95  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     96  10000 ????				       STA	VSYNC	; Stop vertical sync
     97  10000 ????				       ENDM
     98  10000 ????
     99  10000 ????						;-------------------------------------------------------------------------------
    100  10000 ????						; CLEAN_START
    101  10000 ????						; Original author: Andrew Davie
    102  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  10000 ????						; Use as very first section of code on boot (ie: at reset)
    106  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  10000 ????
    108  10000 ????				       MAC	clean_start
    109  10000 ????				       sei
    110  10000 ????				       cld
    111  10000 ????
    112  10000 ????				       ldx	#0
    113  10000 ????				       txa
    114  10000 ????				       tay
    115  10000 ????			    .CLEAR_STACK dex
    116  10000 ????				       txs
    117  10000 ????				       pha
    118  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  10000 ????
    120  10000 ????				       ENDM
    121  10000 ????
    122  10000 ????						;-------------------------------------------------------
    123  10000 ????						; SET_POINTER
    124  10000 ????						; Original author: Manuel Rotschkar
    125  10000 ????						;
    126  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  10000 ????						;
    128  10000 ????						; Usage: SET_POINTER pointer, address
    129  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  10000 ????						;
    131  10000 ????						; Note: Alters the accumulator, NZ flags
    132  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  10000 ????						; IN 2: absolute address
    134  10000 ????
    135  10000 ????				       MAC	set_pointer
    136  10000 ????			    .POINTER   SET	{1}
    137  10000 ????			    .ADDRESS   SET	{2}
    138  10000 ????
    139  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  10000 ????				       STA	.POINTER	; Store in pointer
    141  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    142  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    143  10000 ????
    144  10000 ????				       ENDM
    145  10000 ????
    146  10000 ????
    147  10000 ????						;-------------------------------------------------------
    148  10000 ????						; SAME PAGE BRANCH CHECK
    149  10000 ????						; Original auther: John Payson
    150  10000 ????						;
    151  10000 ????						; Usage: sbeq, sbne, etc just like a normal beq, bne, etc.
    152  10000 ????						;	  A message will be output if the target of the branch
    153  10000 ????						;	  is not on the same page.
    154  10000 ????						;
    155  10000 ????				       mac	sbcc
    156  10000 ????				       bcc	{1}
    157  10000 ????				       if	(* ^ {1}) & $FF00
    158  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    159  10000 ????				       err
    160  10000 ????				       endif
    161  10000 ????				       endm
    162  10000 ????
    163  10000 ????				       mac	sbcs
    164  10000 ????				       bcs	{1}
    165  10000 ????				       if	(* ^ {1}) & $FF00
    166  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    167  10000 ????				       err
    168  10000 ????				       endif
    169  10000 ????				       endm
    170  10000 ????
    171  10000 ????				       mac	sbeq
    172  10000 ????				       beq	{1}
    173  10000 ????				       if	(* ^ {1}) & $FF00
    174  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    175  10000 ????				       err
    176  10000 ????				       endif
    177  10000 ????				       endm
    178  10000 ????
    179  10000 ????				       mac	sbmi
    180  10000 ????				       bmi	{1}
    181  10000 ????				       if	(* ^ {1}) & $FF00
    182  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    183  10000 ????				       err
    184  10000 ????				       endif
    185  10000 ????				       endm
    186  10000 ????
    187  10000 ????				       mac	sbne
    188  10000 ????				       bne	{1}
    189  10000 ????				       if	(* ^ {1}) & $FF00
    190  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    191  10000 ????				       err
    192  10000 ????				       endif
    193  10000 ????				       endm
    194  10000 ????
    195  10000 ????				       mac	sbpl
    196  10000 ????				       bpl	{1}
    197  10000 ????				       if	(* ^ {1}) & $FF00
    198  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    199  10000 ????				       err
    200  10000 ????				       endif
    201  10000 ????				       endm
    202  10000 ????
    203  10000 ????				       mac	sbvc
    204  10000 ????				       bvc	{1}
    205  10000 ????				       if	(* ^ {1}) & $FF00
    206  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    207  10000 ????				       err
    208  10000 ????				       endif
    209  10000 ????				       endm
    210  10000 ????
    211  10000 ????				       mac	sbvs
    212  10000 ????				       bvs	{1}
    213  10000 ????				       if	(* ^ {1}) & $FF00
    214  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    215  10000 ????				       err
    216  10000 ????				       endif
    217  10000 ????				       endm
    218  10000 ????
    219  10000 ????						;-------------------------------------------------------
    220  10000 ????						; DIFFERENT PAGE BRANCH CHECK
    221  10000 ????						; Original auther: Darrell Spice, Jr.
    222  10000 ????						;
    223  10000 ????						; Usage: dbeq, dbne, etc just like a normal beq, bne, etc.
    224  10000 ????						;	  A message will be output if the target of the branch
    225  10000 ????						;	  is not on a different page.
    226  10000 ????						;
    227  10000 ????				       mac	dbcc
    228  10000 ????				       bcc	{1}
    229  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    230  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    231  10000 ????				       err
    232  10000 ????				       endif
    233  10000 ????				       endm
    234  10000 ????
    235  10000 ????				       mac	dbcs
    236  10000 ????				       bcs	{1}
    237  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    238  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    239  10000 ????				       err
    240  10000 ????				       endif
    241  10000 ????				       endm
    242  10000 ????
    243  10000 ????				       mac	dbeq
    244  10000 ????				       beq	{1}
    245  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    246  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    247  10000 ????				       err
    248  10000 ????				       endif
    249  10000 ????				       endm
    250  10000 ????
    251  10000 ????				       mac	dbmi
    252  10000 ????				       bmi	{1}
    253  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    254  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    255  10000 ????				       err
    256  10000 ????				       endif
    257  10000 ????				       endm
    258  10000 ????
    259  10000 ????				       mac	dbne
    260  10000 ????				       bne	{1}
    261  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    262  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    263  10000 ????				       err
    264  10000 ????				       endif
    265  10000 ????				       endm
    266  10000 ????
    267  10000 ????				       mac	dbpl
    268  10000 ????				       bpl	{1}
    269  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    270  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    271  10000 ????				       err
    272  10000 ????				       endif
    273  10000 ????				       endm
    274  10000 ????
    275  10000 ????				       mac	dbvc
    276  10000 ????				       bvc	{1}
    277  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    278  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    279  10000 ????				       err
    280  10000 ????				       endif
    281  10000 ????				       endm
    282  10000 ????
    283  10000 ????				       mac	dbvs
    284  10000 ????				       bvs	{1}
    285  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    286  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    287  10000 ????				       err
    288  10000 ????				       endif
    289  10000 ????				       endm
    290  10000 ????
    291  10000 ????						; EOF
------- FILE bomber.asm
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????						;-------------------------------------------------------------------------------
     45  10000 ????						; TIA_BASE_ADDRESS
     46  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     47  10000 ????						; Normally 0, the base address should (externally, before including this file)
     48  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     49  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     50  10000 ????						; < $40 as a bankswitch.
     51  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     52  10000 ????			   -TIA_BASE_ADDRESS =	0
     53  10000 ????				       ENDIF
     54  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     55  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     56  10000 ????						; *OR* by declaring the label before including this file, eg:
     57  10000 ????						; TIA_BASE_ADDRESS = $40
     58  10000 ????						;   include "vcs.h"
     59  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     60  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     61  10000 ????						; for the mirrored ROM hardware registers.
     62  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     63  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     64  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     65  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     66  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     67  10000 ????				       ENDIF
     68  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     69  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     70  10000 ????				       ENDIF
     71  10000 ????						;-------------------------------------------------------------------------------
     72 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     73 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     74 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     75 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     76 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     77 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     78 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     79 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     80 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     81 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     82 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     83 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     84 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     85 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     86 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
     87 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
     88 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
     89 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
     90 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
     91 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
     92 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
     93 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
     94 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
     95 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
     96 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
     97 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
     98 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
     99 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    100 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    101 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    102 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    103 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    104 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    105 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    106 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    107 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    108 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    109 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    110 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    111 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    112 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    113 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    114 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    115 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    116 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    117 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    118 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    119 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    120 U002d							;-------------------------------------------------------------------------------
    121 U000e ????				      SEG.U	TIA_REGISTERS_READ
    122 U0000					      ORG	TIA_BASE_READ_ADDRESS
    123 U0000							;											bit 7	 bit 6
    124 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    125 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    126 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    127 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    128 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    129 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    130 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    131 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    132 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    133 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    134 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    135 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    136 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    137 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    138 U000e							;-------------------------------------------------------------------------------
    139 U0298 ????				      SEG.U	RIOT
    140 U0280					      ORG	$280
    141 U0280							; RIOT MEMORY MAP
    142 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    143 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    144 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    145 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    146 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    147 U0284		       00	   INTIM      ds	1	; $284		Timer output
    148 U0285		       00	   TIMINT     ds	1	; $285
    149 U0286							; Unused/undefined registers ($285-$294)
    150 U0286		       00		      ds	1	; $286
    151 U0287		       00		      ds	1	; $287
    152 U0288		       00		      ds	1	; $288
    153 U0289		       00		      ds	1	; $289
    154 U028a		       00		      ds	1	; $28A
    155 U028b		       00		      ds	1	; $28B
    156 U028c		       00		      ds	1	; $28C
    157 U028d		       00		      ds	1	; $28D
    158 U028e		       00		      ds	1	; $28E
    159 U028f		       00		      ds	1	; $28F
    160 U0290		       00		      ds	1	; $290
    161 U0291		       00		      ds	1	; $291
    162 U0292		       00		      ds	1	; $292
    163 U0293		       00		      ds	1	; $293
    164 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    165 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    166 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    167 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    168 U0298							;-------------------------------------------------------------------------------
    169 U0298							; The following required for back-compatibility with code which does not use
    170 U0298							; segments.
    171  0000 ????				      SEG
    172  0000 ????						; EOF
------- FILE bomber.asm
      5  0000 ????
      6 U0097 ????				      seg.u	Variables
      7 U0080					      org	$80
      8 U0080
      9 U0080		       00	   JetXPos    byte.b
     10 U0081		       00	   JetYPos    byte.b
     11 U0082		       00	   BomberXPos byte.b
     12 U0083		       00	   BomberYPos byte.b
     13 U0084		       00	   Score      byte.b
     14 U0085		       00	   Timer      byte.b
     15 U0086		       00	   Temp       byte.b
     16 U0087		       00 00	   OnesDigitOffset word.w
     17 U0089		       00 00	   TensDigitOffset word.w
     18 U008b		       00 00	   BallDudePtr word.w
     19 U008d		       00 00	   AdrienPtr  word.w
     20 U008f		       00 00	   BallDudeColPtr word.w
     21 U0091		       00 00	   AdrienColPtr word.w
     22 U0093		       00	   JetAnimOffset byte.b
     23 U0094		       00	   Random     byte.b
     24 U0095		       00	   ScoreSprite byte.b
     25 U0096		       00	   TimerSprite byte.b
     26 U0097
     27 U0097							; Define constants
     28 U0097		       00 09	   SPRITE_HEIGHT =	9
     29 U0097		       00 05	   DIGIT_HEIGHT =	5
     30 U0097
     31  10000 ????				       seg	Code
     32  f000					      org	$F000
     33  f000
     34  f000				   Reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     36  f00b
     37  f00b							; Initialise RAM variables and TIA registers
     38  f00b							; Set initial player coordinates
     39  f00b		       a9 50		      lda	#80
     40  f00d		       85 81		      sta	JetYPos
     41  f00f		       a9 00		      lda	#0
     42  f011		       85 80		      sta	JetXPos
     43  f013
     44  f013							; Set initial bomber coordinates
     45  f013							; Basically just some random coordinates as placeholder lol
     46  f013		       a9 53		      lda	#83
     47  f015		       85 83		      sta	BomberYPos
     48  f017		       a9 50		      lda	#80
     49  f019		       85 82		      sta	BomberXPos
     50  f01b		       a9 d4		      lda	#%11010100
     51  f01d		       85 94		      sta	Random
     52  f01f		       a9 00		      lda	#0
     53  f021		       85 84		      sta	Score
     54  f023		       85 85		      sta	Timer
     55  f025
     56  f025							; Initialise sprite and palette pointers
     57  f025		       a9 c2		      lda	#<BallDude
     58  f027		       85 8b		      sta	BallDudePtr
     59  f029		       a9 f2		      lda	#>BallDude
     60  f02b		       85 8c		      sta	BallDudePtr+1
     61  f02d
     62  f02d		       a9 d4		      lda	#<Adrien
     63  f02f		       85 8d		      sta	AdrienPtr
     64  f031		       a9 f2		      lda	#>Adrien
     65  f033		       85 8e		      sta	AdrienPtr+1
     66  f035
     67  f035		       a9 dd		      lda	#<BallDudeCol
     68  f037		       85 8f		      sta	BallDudeColPtr
     69  f039		       a9 f2		      lda	#>BallDudeCol
     70  f03b		       85 90		      sta	BallDudeColPtr+1
     71  f03d
     72  f03d		       a9 ef		      lda	#<AdrienCol
     73  f03f		       85 91		      sta	AdrienColPtr
     74  f041		       a9 f2		      lda	#>AdrienCol
     75  f043		       85 92		      sta	AdrienColPtr+1
     76  f045
     77  f045							; Begin rendering
     78  f045				   StartFrame
     79  f045							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     80  f045							; Pre-vblank calculations
     81  f045							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     82  f045							; Turn on vblank and vsync
     83  f045		       a2 02		      ldx	#2
     84  f047		       86 01		      stx	VBLANK
     85  f049		       86 00		      stx	VSYNC
     86  f04b					      REPEAT	3
     87  f04b		       86 02		      stx	WSYNC
     86  f04b					      REPEND
     87  f04d		       86 02		      stx	WSYNC
     86  f04d					      REPEND
     87  f04f		       86 02		      stx	WSYNC
     88  f051					      REPEND
     89  f051							; Turn off vsync
     90  f051		       a2 00		      ldx	#0
     91  f053		       86 00		      stx	VSYNC
     92  f055
     93  f055							; Render VBLANK
     94  f055					      REPEAT	37
     95  f055		       86 02		      stx	WSYNC
     94  f055					      REPEND
     95  f057		       86 02		      stx	WSYNC
     94  f057					      REPEND
     95  f059		       86 02		      stx	WSYNC
     94  f059					      REPEND
     95  f05b		       86 02		      stx	WSYNC
     94  f05b					      REPEND
     95  f05d		       86 02		      stx	WSYNC
     94  f05d					      REPEND
     95  f05f		       86 02		      stx	WSYNC
     94  f05f					      REPEND
     95  f061		       86 02		      stx	WSYNC
     94  f061					      REPEND
     95  f063		       86 02		      stx	WSYNC
     94  f063					      REPEND
     95  f065		       86 02		      stx	WSYNC
     94  f065					      REPEND
     95  f067		       86 02		      stx	WSYNC
     94  f067					      REPEND
     95  f069		       86 02		      stx	WSYNC
     94  f069					      REPEND
     95  f06b		       86 02		      stx	WSYNC
     94  f06b					      REPEND
     95  f06d		       86 02		      stx	WSYNC
     94  f06d					      REPEND
     95  f06f		       86 02		      stx	WSYNC
     94  f06f					      REPEND
     95  f071		       86 02		      stx	WSYNC
     94  f071					      REPEND
     95  f073		       86 02		      stx	WSYNC
     94  f073					      REPEND
     95  f075		       86 02		      stx	WSYNC
     94  f075					      REPEND
     95  f077		       86 02		      stx	WSYNC
     94  f077					      REPEND
     95  f079		       86 02		      stx	WSYNC
     94  f079					      REPEND
     95  f07b		       86 02		      stx	WSYNC
     94  f07b					      REPEND
     95  f07d		       86 02		      stx	WSYNC
     94  f07d					      REPEND
     95  f07f		       86 02		      stx	WSYNC
     94  f07f					      REPEND
     95  f081		       86 02		      stx	WSYNC
     94  f081					      REPEND
     95  f083		       86 02		      stx	WSYNC
     94  f083					      REPEND
     95  f085		       86 02		      stx	WSYNC
     94  f085					      REPEND
     95  f087		       86 02		      stx	WSYNC
     94  f087					      REPEND
     95  f089		       86 02		      stx	WSYNC
     94  f089					      REPEND
     95  f08b		       86 02		      stx	WSYNC
     94  f08b					      REPEND
     95  f08d		       86 02		      stx	WSYNC
     94  f08d					      REPEND
     95  f08f		       86 02		      stx	WSYNC
     94  f08f					      REPEND
     95  f091		       86 02		      stx	WSYNC
     94  f091					      REPEND
     95  f093		       86 02		      stx	WSYNC
     94  f093					      REPEND
     95  f095		       86 02		      stx	WSYNC
     94  f095					      REPEND
     95  f097		       86 02		      stx	WSYNC
     94  f097					      REPEND
     95  f099		       86 02		      stx	WSYNC
     94  f099					      REPEND
     95  f09b		       86 02		      stx	WSYNC
     94  f09b					      REPEND
     95  f09d		       86 02		      stx	WSYNC
     96  f09f					      REPEND
     97  f09f
     98  f09f		       a5 80		      lda	JetXPos
     99  f0a1		       a0 00		      ldy	#0	; Corresponds to P0
    100  f0a3		       20 18 f2 	      jsr	SetObjXPos
    101  f0a6
    102  f0a6		       a5 82		      lda	BomberXPos
    103  f0a8		       a0 01		      ldy	#1	; Corresponds to p1
    104  f0aa		       20 18 f2 	      jsr	SetObjXPos
    105  f0ad
    106  f0ad		       20 4f f2 	      jsr	CalculateDigitOffset	; Calculate scoreboard digit lookup table offset
    107  f0b0
    108  f0b0							; Poke registers
    109  f0b0		       85 02		      sta	WSYNC
    110  f0b2		       85 2a		      sta	HMOVE
    111  f0b4
    112  f0b4		       a2 00		      ldx	#0
    113  f0b6							; Turn off VBLANK
    114  f0b6		       86 01		      stx	VBLANK
    115  f0b8
    116  f0b8							; Render scoreboard
    117  f0b8							; Clear playfield registers so nothing is drawn
    118  f0b8		       a9 00		      lda	#0
    119  f0ba		       85 0d		      sta	PF0
    120  f0bc		       85 0e		      sta	PF1
    121  f0be		       85 0f		      sta	PF2
    122  f0c0		       85 1b		      sta	GRP0
    123  f0c2		       85 1c		      sta	GRP1
    124  f0c4		       85 0a		      sta	CTRLPF
    125  f0c6		       85 09		      sta	COLUBK
    126  f0c8
    127  f0c8							; Draw the scoreboard
    128  f0c8		       a2 05		      ldx	#DIGIT_HEIGHT
    129  f0ca				   .ScoreDigitLoop
    130  f0ca		       a4 89		      ldy	TensDigitOffset
    131  f0cc		       b9 72 f2 	      lda	Digits,Y
    132  f0cf		       29 f0		      and	#$F0	; Mask the graphics for the ones digits
    133  f0d1		       85 95		      sta	ScoreSprite
    134  f0d3
    135  f0d3		       a4 87		      ldy	OnesDigitOffset
    136  f0d5		       b9 72 f2 	      lda	Digits,Y
    137  f0d8		       29 0f		      and	#$0F	; Mask the graphics for the tens digits
    138  f0da		       05 95		      ora	ScoreSprite
    139  f0dc		       85 95		      sta	ScoreSprite
    140  f0de
    141  f0de		       85 02		      sta	WSYNC	; poke
    142  f0e0		       85 0e		      sta	PF1	; Display score sprite
    143  f0e2
    144  f0e2		       a4 8a		      ldy	TensDigitOffset+1	; Tens digit for the timer
    145  f0e4		       b9 72 f2 	      lda	Digits,Y
    146  f0e7		       29 f0		      and	#$F0
    147  f0e9		       85 96		      sta	TimerSprite
    148  f0eb
    149  f0eb		       a4 88		      ldy	OnesDigitOffset+1
    150  f0ed		       b9 72 f2 	      lda	Digits,Y
    151  f0f0		       29 0f		      and	#$0F
    152  f0f2		       05 96		      ora	TimerSprite
    153  f0f4		       85 96		      sta	TimerSprite
    154  f0f6
    155  f0f6							; Waste clock cycles
    156  f0f6		       20 71 f2 	      jsr	Sleep12Cycles
    157  f0f9
    158  f0f9		       85 0e		      sta	PF1
    159  f0fb
    160  f0fb							; 2-kernel display so strobe
    161  f0fb		       a4 95		      ldy	ScoreSprite
    162  f0fd		       85 02		      sta	WSYNC
    163  f0ff
    164  f0ff		       84 0e		      sty	PF1
    165  f101		       e6 89		      inc	TensDigitOffset
    166  f103		       e6 8a		      inc	TensDigitOffset+1
    167  f105		       e6 87		      inc	OnesDigitOffset
    168  f107		       e6 88		      inc	OnesDigitOffset+1
    169  f109
    170  f109		       20 71 f2 	      jsr	Sleep12Cycles
    171  f10c
    172  f10c		       ca		      dex
    173  f10d		       85 0e		      sta	PF1
    174  f10f		       d0 b9		      bne	.ScoreDigitLoop
    175  f111
    176  f111		       85 02		      sta	WSYNC
    177  f113
    178  f113							; Add padding under the scoreboard
    179  f113		       a9 00		      lda	#0
    180  f115		       85 0d		      sta	PF0
    181  f117		       85 0e		      sta	PF1
    182  f119		       85 0f		      sta	PF2
    183  f11b
    184  f11b					      REPEAT	3
    185  f11b		       85 02		      sta	WSYNC
    184  f11b					      REPEND
    185  f11d		       85 02		      sta	WSYNC
    184  f11d					      REPEND
    185  f11f		       85 02		      sta	WSYNC
    186  f121					      REPEND
    187  f121
    188  f121							; Render the visible scanlines
    189  f121				   VisibleScanlines
    190  f121							; Set background colour
    191  f121		       a9 84		      lda	#$84	; Blue
    192  f123		       85 09		      sta	COLUBK
    193  f125							; Set playfield colour
    194  f125		       a9 c2		      lda	#$C2
    195  f127		       85 08		      sta	COLUPF
    196  f129		       85 09		      sta	COLUBK
    197  f12b
    198  f12b							; Set playfield colour
    199  f12b		       a9 1e		      lda	#$1E
    200  f12d		       85 08		      sta	COLUPF
    201  f12f
    202  f12f							; Setup playfield
    203  f12f		       a9 f0		      lda	#%11110000	; PF0 uses first 4 bits and is reversed
    204  f131		       85 0d		      sta	PF0
    205  f133		       a9 c0		      lda	#%11000000
    206  f135		       85 0e		      sta	PF1
    207  f137		       a9 00		      lda	#0
    208  f139		       85 0f		      sta	PF2
    209  f13b
    210  f13b							; Playfield reflection
    211  f13b		       a9 01		      lda	#%00000001
    212  f13d		       85 0a		      sta	CTRLPF
    213  f13f
    214  f13f							; 81 to account for the size of the scoreboard
    215  f13f		       a2 51		      ldx	#81
    216  f141
    217  f141							; Render the 96 visible scanline
    218  f141							; Using a 2 line kernel
    219  f141				   .GameLineLoop
    220  f141				   .InsideBallDude
    221  f141		       8a		      txa
    222  f142		       38		      sec
    223  f143		       e5 81		      sbc	JetYPos
    224  f145		       c5 09		      cmp	SPRITE_HEIGHT
    225  f147		       90 02		      bcc	.DrawSpriteP0
    226  f149		       a9 00		      lda	#0
    227  f14b
    228  f14b				   .DrawSpriteP0
    229  f14b		       18		      clc
    230  f14c		       65 93		      adc	JetAnimOffset
    231  f14e		       a8		      tay
    232  f14f		       b1 8b		      lda	(BallDudePtr),Y	; Y register is only register that can work with pointers
    233  f151		       85 02		      sta	WSYNC	; Wait for scanline
    234  f153		       85 1b		      sta	GRP0	; Set graphics for P0
    235  f155		       b1 8f		      lda	(BallDudeColPtr),Y
    236  f157		       85 06		      sta	COLUP0
    237  f159
    238  f159				   .InsideAdrien
    239  f159		       8a		      txa
    240  f15a		       38		      sec
    241  f15b		       e5 83		      sbc	BomberYPos
    242  f15d		       c5 09		      cmp	SPRITE_HEIGHT
    243  f15f		       90 02		      bcc	.DrawSpriteP1
    244  f161		       a9 00		      lda	#0
    245  f163
    246  f163				   .DrawSpriteP1
    247  f163		       a8		      tay
    248  f164
    249  f164							; Set Adrien to be thicc because it'll be funny idk
    250  f164		       a9 07		      lda	#%00000111
    251  f166		       85 05		      sta	NUSIZ1
    252  f168		       98		      tya
    253  f169
    254  f169		       b1 8d		      lda	(AdrienPtr),Y	; Y register is only register that can work with pointers
    255  f16b		       85 02		      sta	WSYNC	; Wait for scanline
    256  f16d		       85 1c		      sta	GRP1	; Set graphics for P0
    257  f16f		       b1 91		      lda	(AdrienColPtr),Y
    258  f171		       85 07		      sta	COLUP1
    259  f173
    260  f173		       ca		      dex
    261  f174		       d0 cb		      bne	.GameLineLoop
    262  f176
    263  f176							; Display vblank
    264  f176				   Overscan
    265  f176		       a9 02		      lda	#2
    266  f178		       85 01		      sta	VBLANK
    267  f17a					      REPEAT	30
    268  f17a		       85 02		      sta	WSYNC
    267  f17a					      REPEND
    268  f17c		       85 02		      sta	WSYNC
    267  f17c					      REPEND
    268  f17e		       85 02		      sta	WSYNC
    267  f17e					      REPEND
    268  f180		       85 02		      sta	WSYNC
    267  f180					      REPEND
    268  f182		       85 02		      sta	WSYNC
    267  f182					      REPEND
    268  f184		       85 02		      sta	WSYNC
    267  f184					      REPEND
    268  f186		       85 02		      sta	WSYNC
    267  f186					      REPEND
    268  f188		       85 02		      sta	WSYNC
    267  f188					      REPEND
    268  f18a		       85 02		      sta	WSYNC
    267  f18a					      REPEND
    268  f18c		       85 02		      sta	WSYNC
    267  f18c					      REPEND
    268  f18e		       85 02		      sta	WSYNC
    267  f18e					      REPEND
    268  f190		       85 02		      sta	WSYNC
    267  f190					      REPEND
    268  f192		       85 02		      sta	WSYNC
    267  f192					      REPEND
    268  f194		       85 02		      sta	WSYNC
    267  f194					      REPEND
    268  f196		       85 02		      sta	WSYNC
    267  f196					      REPEND
    268  f198		       85 02		      sta	WSYNC
    267  f198					      REPEND
    268  f19a		       85 02		      sta	WSYNC
    267  f19a					      REPEND
    268  f19c		       85 02		      sta	WSYNC
    267  f19c					      REPEND
    268  f19e		       85 02		      sta	WSYNC
    267  f19e					      REPEND
    268  f1a0		       85 02		      sta	WSYNC
    267  f1a0					      REPEND
    268  f1a2		       85 02		      sta	WSYNC
    267  f1a2					      REPEND
    268  f1a4		       85 02		      sta	WSYNC
    267  f1a4					      REPEND
    268  f1a6		       85 02		      sta	WSYNC
    267  f1a6					      REPEND
    268  f1a8		       85 02		      sta	WSYNC
    267  f1a8					      REPEND
    268  f1aa		       85 02		      sta	WSYNC
    267  f1aa					      REPEND
    268  f1ac		       85 02		      sta	WSYNC
    267  f1ac					      REPEND
    268  f1ae		       85 02		      sta	WSYNC
    267  f1ae					      REPEND
    268  f1b0		       85 02		      sta	WSYNC
    267  f1b0					      REPEND
    268  f1b2		       85 02		      sta	WSYNC
    267  f1b2					      REPEND
    268  f1b4		       85 02		      sta	WSYNC
    269  f1b6					      REPEND
    270  f1b6
    271  f1b6		       a9 00		      lda	#0
    272  f1b8		       85 01		      sta	VBLANK
    273  f1ba
    274  f1ba							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    275  f1ba							; Joystick input
    276  f1ba							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    277  f1ba		       a6 80		      ldx	JetXPos
    278  f1bc				   CheckP0Up
    279  f1bc		       a9 10		      lda	#%00010000
    280  f1be		       2c 80 02 	      bit	SWCHA
    281  f1c1		       d0 02		      bne	CheckP0Down
    282  f1c3		       e6 81		      inc	JetYPos
    283  f1c5				   CheckP0Down
    284  f1c5		       a9 20		      lda	#%00100000
    285  f1c7		       2c 80 02 	      bit	SWCHA
    286  f1ca		       d0 02		      bne	CheckP0Left
    287  f1cc		       c6 81		      dec	JetYPos
    288  f1ce				   CheckP0Left
    289  f1ce		       a9 40		      lda	#%01000000
    290  f1d0		       2c 80 02 	      bit	SWCHA
    291  f1d3		       d0 02		      bne	CheckP0Right
    292  f1d5		       c6 80		      dec	JetXPos
    293  f1d7				   CheckP0Right
    294  f1d7		       a9 80		      lda	#%10000000
    295  f1d9		       2c 80 02 	      bit	SWCHA
    296  f1dc		       d0 02		      bne	NoInput
    297  f1de		       e6 80		      inc	JetXPos
    298  f1e0				   NoInput
    299  f1e0		       a9 00		      lda	#0
    300  f1e2		       85 93		      sta	JetAnimOffset
    301  f1e4		       e4 80		      cpx	JetXPos
    302  f1e6		       f0 04		      beq	NoChange
    303  f1e8							; Set the sprite pointer to BallDude Turning
    304  f1e8		       a5 09		      lda	SPRITE_HEIGHT
    305  f1ea		       85 93		      sta	JetAnimOffset
    306  f1ec				   NoChange
    307  f1ec
    308  f1ec				   UpdateBomberPosition
    309  f1ec		       18		      clc
    310  f1ed		       a5 83		      lda	BomberYPos
    311  f1ef		       c9 00		      cmp	#0
    312  f1f1		       30 05		      bmi	.ResetBomberPosition
    313  f1f3
    314  f1f3		       c6 83		      dec	BomberYPos
    315  f1f5		       4c fb f1 	      jmp	EndPositionUpdate
    316  f1f8
    317  f1f8				   .ResetBomberPosition
    318  f1f8		       20 31 f2 	      jsr	SpawnBomber
    319  f1fb
    320  f1fb				   EndPositionUpdate
    321  f1fb							; Collision checks
    322  f1fb				   CheckCollisionP0P1
    323  f1fb		       a9 80		      lda	#%10000000
    324  f1fd		       24 07		      bit	CXPPMM
    325  f1ff		       d0 03		      bne	.CollisionP0P1	; Zero flag is set if a&bit is zero (lol)
    326  f201		       4c 07 f2 	      jmp	CheckCollisionP0Playfield
    327  f204				   .CollisionP0P1
    328  f204		       20 2c f2 	      jsr	GameOver
    329  f207				   CheckCollisionP0Playfield
    330  f207		       a9 80		      lda	#%10000000
    331  f209		       24 02		      bit	CXP0FB
    332  f20b		       d0 03		      bne	.CollisionP0Playfield
    333  f20d		       4c 13 f2 	      jmp	EndCollisionCheck
    334  f210				   .CollisionP0Playfield
    335  f210		       20 2c f2 	      jsr	GameOver
    336  f213				   EndCollisionCheck
    337  f213		       85 2c		      sta	CXCLR	; Poke clear collision check register
    338  f215							; Loop forever
    339  f215		       4c 45 f0 	      jmp	StartFrame
    340  f218
    341  f218							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    342  f218							; accumulator contains x-posiiton
    343  f218							; y register contains object (0:player0, 1:player1, 2:missile0, 3:missile1, 4:ball)
    344  f218							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    345  f218				   SetObjXPos subroutine
    346  f218		       85 02		      sta	WSYNC
    347  f21a		       38		      sec
    348  f21b				   .DivideLoop
    349  f21b		       e9 0f		      sbc	#15
    350  f21d		       b0 fc		      bcs	.DivideLoop	; loop while carry is set
    351  f21f
    352  f21f		       49 07		      eor	#7	; exclusive OR with accumulator
    353  f221							; A will be between -8 and 7
    354  f221					      REPEAT	4
    355  f221		       0a		      asl		; bitshift a, HMP0 uses only 4 bits
    354  f221					      REPEND
    355  f222		       0a		      asl		; bitshift a, HMP0 uses only 4 bits
    354  f222					      REPEND
    355  f223		       0a		      asl		; bitshift a, HMP0 uses only 4 bits
    354  f223					      REPEND
    355  f224		       0a		      asl		; bitshift a, HMP0 uses only 4 bits
    356  f225					      REPEND
    357  f225
    358  f225		       99 20 00 	      sta	HMP0,Y	; set fine position value
    359  f228		       99 10 00 	      sta	RESP0,Y	; set coarse position value
    360  f22b		       60		      rts
    361  f22c
    362  f22c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    363  f22c							; GameOver Subroutine
    364  f22c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    365  f22c				   GameOver   subroutine
    366  f22c							; Set background to red for one frame
    367  f22c		       a9 30		      lda	#$30
    368  f22e		       85 09		      sta	COLUBK
    369  f230		       60		      rts
    370  f231
    371  f231
    372  f231							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    373  f231							; generate random number using LFSR
    374  f231							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    375  f231				   SpawnBomber subroutine
    376  f231							; The LFSR
    377  f231		       a5 94		      lda	Random
    378  f233		       0a		      asl
    379  f234		       45 94		      eor	Random
    380  f236		       0a		      asl
    381  f237		       45 94		      eor	Random
    382  f239		       0a		      asl
    383  f23a		       0a		      asl
    384  f23b		       45 94		      eor	Random
    385  f23d		       0a		      asl
    386  f23e		       26 94		      rol	Random
    387  f240
    388  f240							; Divide by 4 to match playfield size
    389  f240		       4a		      lsr
    390  f241		       4a		      lsr
    391  f242		       85 82		      sta	BomberXPos
    392  f244		       a9 1e		      lda	#30	; Add 30 for playfield bounds
    393  f246		       65 82		      adc	BomberXPos
    394  f248		       85 82		      sta	BomberXPos
    395  f24a
    396  f24a		       a9 60		      lda	#96
    397  f24c		       85 83		      sta	BomberYPos
    398  f24e
    399  f24e		       60		      rts
    400  f24f
    401  f24f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    402  f24f							; Set scoreboard digits to be displayed to screen
    403  f24f							; We do it in hex because it's easier or something idk lol
    404  f24f							; I'll probably come back to this to try make a decimal display
    405  f24f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    406  f24f				   CalculateDigitOffset subroutine
    407  f24f		       a2 01		      ldx	#1
    408  f251				   .PrepareScoreLoop
    409  f251							; Ones digit
    410  f251		       b5 84		      lda	Score,X	; Timer when x = 1
    411  f253		       29 0f		      and	#%00001111
    412  f255		       85 86		      sta	Temp
    413  f257		       0a		      asl
    414  f258		       0a		      asl
    415  f259		       65 86		      adc	Temp
    416  f25b		       95 87		      sta	OnesDigitOffset,X
    417  f25d							; Tens digit
    418  f25d		       b5 84		      lda	Score,X
    419  f25f		       29 f0		      and	#%11110000
    420  f261		       85 86		      sta	Temp
    421  f263		       4a		      lsr
    422  f264		       4a		      lsr
    423  f265		       85 86		      sta	Temp
    424  f267		       4a		      lsr
    425  f268		       4a		      lsr
    426  f269		       65 86		      adc	Temp
    427  f26b		       95 89		      sta	TensDigitOffset,X
    428  f26d
    429  f26d		       ca		      dex
    430  f26e		       10 e1		      bpl	.PrepareScoreLoop
    431  f270		       60		      rts
    432  f271
    433  f271							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    434  f271							; Sleep 12 cycles
    435  f271							; jsr takes 6 cycle, rts takes 6 cycles
    436  f271							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    437  f271				   Sleep12Cycles subroutine
    438  f271		       60		      rts
    439  f272
    440  f272
    441  f272							; Sprites
    442  f272				   Digits
    443  f272		       77		      .byte.b	%01110111	; ### ###
    444  f273		       55		      .byte.b	%01010101	; # # # #
    445  f274		       55		      .byte.b	%01010101	; # # # #
    446  f275		       55		      .byte.b	%01010101	; # # # #
    447  f276		       77		      .byte.b	%01110111	; ### ###
    448  f277
    449  f277		       11		      .byte.b	%00010001	;   #	 #
    450  f278		       11		      .byte.b	%00010001	;   #	 #
    451  f279		       11		      .byte.b	%00010001	;   #	 #
    452  f27a		       11		      .byte.b	%00010001	;   #	 #
    453  f27b		       11		      .byte.b	%00010001	;   #	 #
    454  f27c
    455  f27c		       77		      .byte.b	%01110111	; ### ###
    456  f27d		       11		      .byte.b	%00010001	;   #	 #
    457  f27e		       77		      .byte.b	%01110111	; ### ###
    458  f27f		       44		      .byte.b	%01000100	; #   #
    459  f280		       77		      .byte.b	%01110111	; ### ###
    460  f281
    461  f281		       77		      .byte.b	%01110111	; ### ###
    462  f282		       11		      .byte.b	%00010001	;   #	 #
    463  f283		       33		      .byte.b	%00110011	;  ##	##
    464  f284		       11		      .byte.b	%00010001	;   #	 #
    465  f285		       77		      .byte.b	%01110111	; ### ###
    466  f286
    467  f286		       55		      .byte.b	%01010101	; # # # #
    468  f287		       55		      .byte.b	%01010101	; # # # #
    469  f288		       77		      .byte.b	%01110111	; ### ###
    470  f289		       11		      .byte.b	%00010001	;   #	 #
    471  f28a		       11		      .byte.b	%00010001	;   #	 #
    472  f28b
    473  f28b		       77		      .byte.b	%01110111	; ### ###
    474  f28c		       44		      .byte.b	%01000100	; #   #
    475  f28d		       77		      .byte.b	%01110111	; ### ###
    476  f28e		       11		      .byte.b	%00010001	;   #	 #
    477  f28f		       77		      .byte.b	%01110111	; ### ###
    478  f290
    479  f290		       77		      .byte.b	%01110111	; ### ###
    480  f291		       44		      .byte.b	%01000100	; #   #
    481  f292		       77		      .byte.b	%01110111	; ### ###
    482  f293		       55		      .byte.b	%01010101	; # # # #
    483  f294		       77		      .byte.b	%01110111	; ### ###
    484  f295
    485  f295		       77		      .byte.b	%01110111	; ### ###
    486  f296		       11		      .byte.b	%00010001	;   #	 #
    487  f297		       11		      .byte.b	%00010001	;   #	 #
    488  f298		       11		      .byte.b	%00010001	;   #	 #
    489  f299		       11		      .byte.b	%00010001	;   #	 #
    490  f29a
    491  f29a		       77		      .byte.b	%01110111	; ### ###
    492  f29b		       55		      .byte.b	%01010101	; # # # #
    493  f29c		       77		      .byte.b	%01110111	; ### ###
    494  f29d		       55		      .byte.b	%01010101	; # # # #
    495  f29e		       77		      .byte.b	%01110111	; ### ###
    496  f29f
    497  f29f		       77		      .byte.b	%01110111	; ### ###
    498  f2a0		       55		      .byte.b	%01010101	; # # # #
    499  f2a1		       77		      .byte.b	%01110111	; ### ###
    500  f2a2		       11		      .byte.b	%00010001	;   #	 #
    501  f2a3		       77		      .byte.b	%01110111	; ### ###
    502  f2a4
    503  f2a4		       22		      .byte.b	%00100010	;  #	#
    504  f2a5		       55		      .byte.b	%01010101	; # # # #
    505  f2a6		       77		      .byte.b	%01110111	; ### ###
    506  f2a7		       55		      .byte.b	%01010101	; # # # #
    507  f2a8		       55		      .byte.b	%01010101	; # # # #
    508  f2a9
    509  f2a9		       77		      .byte.b	%01110111	; ### ###
    510  f2aa		       55		      .byte.b	%01010101	; # # # #
    511  f2ab		       66		      .byte.b	%01100110	; ##  ##
    512  f2ac		       55		      .byte.b	%01010101	; # # # #
    513  f2ad		       77		      .byte.b	%01110111	; ### ###
    514  f2ae
    515  f2ae		       77		      .byte.b	%01110111	; ### ###
    516  f2af		       44		      .byte.b	%01000100	; #   #
    517  f2b0		       44		      .byte.b	%01000100	; #   #
    518  f2b1		       44		      .byte.b	%01000100	; #   #
    519  f2b2		       77		      .byte.b	%01110111	; ### ###
    520  f2b3
    521  f2b3		       66		      .byte.b	%01100110	; ##  ##
    522  f2b4		       55		      .byte.b	%01010101	; # # # #
    523  f2b5		       55		      .byte.b	%01010101	; # # # #
    524  f2b6		       55		      .byte.b	%01010101	; # # # #
    525  f2b7		       66		      .byte.b	%01100110	; ##  ##
    526  f2b8
    527  f2b8		       77		      .byte.b	%01110111	; ### ###
    528  f2b9		       44		      .byte.b	%01000100	; #   #
    529  f2ba		       77		      .byte.b	%01110111	; ### ###
    530  f2bb		       44		      .byte.b	%01000100	; #   #
    531  f2bc		       77		      .byte.b	%01110111	; ### ###
    532  f2bd
    533  f2bd		       77		      .byte.b	%01110111	; ### ###
    534  f2be		       44		      .byte.b	%01000100	; #   #
    535  f2bf		       66		      .byte.b	%01100110	; ##  ##
    536  f2c0		       44		      .byte.b	%01000100	; #   #
    537  f2c1		       44		      .byte.b	%01000100	; #   #
    538  f2c2
    539  f2c2				   BallDude
    540  f2c2		       00		      .byte.b	#%00000000
    541  f2c3		       7e		      .byte.b	#%01111110	;$5A
    542  f2c4		       ff		      .byte.b	#%11111111	;$5A
    543  f2c5		       ff		      .byte.b	#%11111111	;$58
    544  f2c6		       ff		      .byte.b	#%11111111	;$56
    545  f2c7		       9f		      .byte.b	#%10011111	;$54
    546  f2c8		       db		      .byte.b	#%11011011	;$54
    547  f2c9		       fb		      .byte.b	#%11111011	;$52
    548  f2ca		       76		      .byte.b	#%01110110	;$52
    549  f2cb				   BallDudeTurning
    550  f2cb		       00		      .byte.b	#%00000000
    551  f2cc		       18		      .byte.b	#%00011000	;$5A
    552  f2cd		       3c		      .byte.b	#%00111100	;$58
    553  f2ce		       7e		      .byte.b	#%01111110	;$56
    554  f2cf		       7e		      .byte.b	#%01111110	;$54
    555  f2d0		       4a		      .byte.b	#%01001010	;$54
    556  f2d1		       6a		      .byte.b	#%01101010	;$52
    557  f2d2		       34		      .byte.b	#%00110100	;$52
    558  f2d3		       18		      .byte.b	#%00011000	;$52
    559  f2d4				   Adrien
    560  f2d4		       00		      .byte.b	#%00000000
    561  f2d5		       ff		      .byte.b	#%11111111	;$16
    562  f2d6		       e7		      .byte.b	#%11100111	;$16
    563  f2d7		       e7		      .byte.b	#%11100111	;$18
    564  f2d8		       7e		      .byte.b	#%01111110	;$18
    565  f2d9		       5a		      .byte.b	#%01011010	;$1A
    566  f2da		       3c		      .byte.b	#%00111100	;$1A
    567  f2db		       3c		      .byte.b	#%00111100	;$1C
    568  f2dc		       18		      .byte.b	#%00011000	;$1C
    569  f2dd
    570  f2dd				   BallDudeCol
    571  f2dd		       00		      .byte.b	#$00
    572  f2de		       5a		      .byte.b	#$5A	;
    573  f2df		       58		      .byte.b	#$58	;
    574  f2e0		       56		      .byte.b	#$56	;
    575  f2e1		       54		      .byte.b	#$54	;
    576  f2e2		       54		      .byte.b	#$54	;
    577  f2e3		       52		      .byte.b	#$52	;
    578  f2e4		       52		      .byte.b	#$52	;
    579  f2e5		       52		      .byte.b	#$52	;
    580  f2e6				   BallDudeTurningCol
    581  f2e6		       00		      .byte.b	#$00
    582  f2e7		       5a		      .byte.b	#$5A	;
    583  f2e8		       58		      .byte.b	#$58	;
    584  f2e9		       56		      .byte.b	#$56	;
    585  f2ea		       54		      .byte.b	#$54	;
    586  f2eb		       54		      .byte.b	#$54	;
    587  f2ec		       52		      .byte.b	#$52	;
    588  f2ed		       52		      .byte.b	#$52	;
    589  f2ee		       52		      .byte.b	#$52	;
    590  f2ef				   AdrienCol
    591  f2ef		       00		      .byte.b	#$00
    592  f2f0		       16		      .byte.b	#$16	;
    593  f2f1		       16		      .byte.b	#$16	;
    594  f2f2		       18		      .byte.b	#$18	;
    595  f2f3		       18		      .byte.b	#$18	;
    596  f2f4		       1a		      .byte.b	#$1A	;
    597  f2f5		       1a		      .byte.b	#$1A	;
    598  f2f6		       1c		      .byte.b	#$1C	;
    599  f2f7		       1c		      .byte.b	#$1C	;
    600  f2f8
    601  f2f8							; Complete ROM with 4kb
    602  fffc					      org	$FFFC
    603  fffc		       00 f0		      word.w	Reset
    604  fffe		       00 f0		      word.w	Reset
