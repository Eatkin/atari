------- FILE bomber.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_MACRO =	105
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  10000 ????						;			    used for code assembly.
     24  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  10000 ????						;
     26  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  10000 ????						;
     28  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  10000 ????						;			   (standardised macro for vertical synch code)
     30  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     31  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  10000 ????						; 1.0	22/MAR/2003		Initial release
     33  10000 ????
     34  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     35  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     37  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  10000 ????						;   registers and require them to be defined first).
     39  10000 ????
     40  10000 ????						; Available macros...
     41  10000 ????						;   SLEEP n		 - sleep for n cycles
     42  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????						; SLEEP duration
     48  10000 ????						; Original author: Thomas Jentzsch
     49  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  10000 ????						; useful for code where precise timing is required.
     51  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  10000 ????
     55  10000 ????				       MAC	sleep
     56  10000 ????			    .CYCLES    SET	{1}
     57  10000 ????
     58  10000 ????				       IF	.CYCLES < 2
     59  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  10000 ????				       ERR
     61  10000 ????				       ENDIF
     62  10000 ????
     63  10000 ????				       IF	.CYCLES & 1
     64  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     65  10000 ????				       nop	0
     66  10000 ????				       ELSE
     67  10000 ????				       bit	VSYNC
     68  10000 ????				       ENDIF
     69  10000 ????			    .CYCLES    SET	.CYCLES - 3
     70  10000 ????				       ENDIF
     71  10000 ????
     72  10000 ????				       REPEAT	.CYCLES / 2
     73  10000 ????				       nop
     74  10000 ????				       REPEND
     75  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     76  10000 ????
     77  10000 ????						;-------------------------------------------------------------------------------
     78  10000 ????						; VERTICAL_SYNC
     79  10000 ????						; Original author: Manuel Polik
     80  10000 ????						; Inserts the code required for a proper 3 scannline
     81  10000 ????						; vertical sync sequence
     82  10000 ????						;
     83  10000 ????						; Note: Alters the accumulator
     84  10000 ????						;
     85  10000 ????						; IN:
     86  10000 ????						; OUT: A = 1
     87  10000 ????
     88  10000 ????				       MAC	vertical_sync
     89  10000 ????				       LDA	#$02	; A = VSYNC enable
     90  10000 ????				       STA	WSYNC	; Finish current line
     91  10000 ????				       STA	VSYNC	; Start vertical sync
     92  10000 ????				       STA	WSYNC	; 1st line vertical sync
     93  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     94  10000 ????				       LSR		; A = VSYNC disable
     95  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     96  10000 ????				       STA	VSYNC	; Stop vertical sync
     97  10000 ????				       ENDM
     98  10000 ????
     99  10000 ????						;-------------------------------------------------------------------------------
    100  10000 ????						; CLEAN_START
    101  10000 ????						; Original author: Andrew Davie
    102  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  10000 ????						; Use as very first section of code on boot (ie: at reset)
    106  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  10000 ????
    108  10000 ????				       MAC	clean_start
    109  10000 ????				       sei
    110  10000 ????				       cld
    111  10000 ????
    112  10000 ????				       ldx	#0
    113  10000 ????				       txa
    114  10000 ????				       tay
    115  10000 ????			    .CLEAR_STACK dex
    116  10000 ????				       txs
    117  10000 ????				       pha
    118  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  10000 ????
    120  10000 ????				       ENDM
    121  10000 ????
    122  10000 ????						;-------------------------------------------------------
    123  10000 ????						; SET_POINTER
    124  10000 ????						; Original author: Manuel Rotschkar
    125  10000 ????						;
    126  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  10000 ????						;
    128  10000 ????						; Usage: SET_POINTER pointer, address
    129  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  10000 ????						;
    131  10000 ????						; Note: Alters the accumulator, NZ flags
    132  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  10000 ????						; IN 2: absolute address
    134  10000 ????
    135  10000 ????				       MAC	set_pointer
    136  10000 ????			    .POINTER   SET	{1}
    137  10000 ????			    .ADDRESS   SET	{2}
    138  10000 ????
    139  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  10000 ????				       STA	.POINTER	; Store in pointer
    141  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    142  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    143  10000 ????
    144  10000 ????				       ENDM
    145  10000 ????
    146  10000 ????
    147  10000 ????						;-------------------------------------------------------
    148  10000 ????						; SAME PAGE BRANCH CHECK
    149  10000 ????						; Original auther: John Payson
    150  10000 ????						;
    151  10000 ????						; Usage: sbeq, sbne, etc just like a normal beq, bne, etc.
    152  10000 ????						;	  A message will be output if the target of the branch
    153  10000 ????						;	  is not on the same page.
    154  10000 ????						;
    155  10000 ????				       mac	sbcc
    156  10000 ????				       bcc	{1}
    157  10000 ????				       if	(* ^ {1}) & $FF00
    158  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    159  10000 ????				       err
    160  10000 ????				       endif
    161  10000 ????				       endm
    162  10000 ????
    163  10000 ????				       mac	sbcs
    164  10000 ????				       bcs	{1}
    165  10000 ????				       if	(* ^ {1}) & $FF00
    166  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    167  10000 ????				       err
    168  10000 ????				       endif
    169  10000 ????				       endm
    170  10000 ????
    171  10000 ????				       mac	sbeq
    172  10000 ????				       beq	{1}
    173  10000 ????				       if	(* ^ {1}) & $FF00
    174  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    175  10000 ????				       err
    176  10000 ????				       endif
    177  10000 ????				       endm
    178  10000 ????
    179  10000 ????				       mac	sbmi
    180  10000 ????				       bmi	{1}
    181  10000 ????				       if	(* ^ {1}) & $FF00
    182  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    183  10000 ????				       err
    184  10000 ????				       endif
    185  10000 ????				       endm
    186  10000 ????
    187  10000 ????				       mac	sbne
    188  10000 ????				       bne	{1}
    189  10000 ????				       if	(* ^ {1}) & $FF00
    190  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    191  10000 ????				       err
    192  10000 ????				       endif
    193  10000 ????				       endm
    194  10000 ????
    195  10000 ????				       mac	sbpl
    196  10000 ????				       bpl	{1}
    197  10000 ????				       if	(* ^ {1}) & $FF00
    198  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    199  10000 ????				       err
    200  10000 ????				       endif
    201  10000 ????				       endm
    202  10000 ????
    203  10000 ????				       mac	sbvc
    204  10000 ????				       bvc	{1}
    205  10000 ????				       if	(* ^ {1}) & $FF00
    206  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    207  10000 ????				       err
    208  10000 ????				       endif
    209  10000 ????				       endm
    210  10000 ????
    211  10000 ????				       mac	sbvs
    212  10000 ????				       bvs	{1}
    213  10000 ????				       if	(* ^ {1}) & $FF00
    214  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    215  10000 ????				       err
    216  10000 ????				       endif
    217  10000 ????				       endm
    218  10000 ????
    219  10000 ????						;-------------------------------------------------------
    220  10000 ????						; DIFFERENT PAGE BRANCH CHECK
    221  10000 ????						; Original auther: Darrell Spice, Jr.
    222  10000 ????						;
    223  10000 ????						; Usage: dbeq, dbne, etc just like a normal beq, bne, etc.
    224  10000 ????						;	  A message will be output if the target of the branch
    225  10000 ????						;	  is not on a different page.
    226  10000 ????						;
    227  10000 ????				       mac	dbcc
    228  10000 ????				       bcc	{1}
    229  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    230  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    231  10000 ????				       err
    232  10000 ????				       endif
    233  10000 ????				       endm
    234  10000 ????
    235  10000 ????				       mac	dbcs
    236  10000 ????				       bcs	{1}
    237  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    238  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    239  10000 ????				       err
    240  10000 ????				       endif
    241  10000 ????				       endm
    242  10000 ????
    243  10000 ????				       mac	dbeq
    244  10000 ????				       beq	{1}
    245  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    246  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    247  10000 ????				       err
    248  10000 ????				       endif
    249  10000 ????				       endm
    250  10000 ????
    251  10000 ????				       mac	dbmi
    252  10000 ????				       bmi	{1}
    253  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    254  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    255  10000 ????				       err
    256  10000 ????				       endif
    257  10000 ????				       endm
    258  10000 ????
    259  10000 ????				       mac	dbne
    260  10000 ????				       bne	{1}
    261  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    262  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    263  10000 ????				       err
    264  10000 ????				       endif
    265  10000 ????				       endm
    266  10000 ????
    267  10000 ????				       mac	dbpl
    268  10000 ????				       bpl	{1}
    269  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    270  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    271  10000 ????				       err
    272  10000 ????				       endif
    273  10000 ????				       endm
    274  10000 ????
    275  10000 ????				       mac	dbvc
    276  10000 ????				       bvc	{1}
    277  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    278  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    279  10000 ????				       err
    280  10000 ????				       endif
    281  10000 ????				       endm
    282  10000 ????
    283  10000 ????				       mac	dbvs
    284  10000 ????				       bvs	{1}
    285  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    286  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    287  10000 ????				       err
    288  10000 ????				       endif
    289  10000 ????				       endm
    290  10000 ????
    291  10000 ????						; EOF
------- FILE bomber.asm
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????						;-------------------------------------------------------------------------------
     45  10000 ????						; TIA_BASE_ADDRESS
     46  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     47  10000 ????						; Normally 0, the base address should (externally, before including this file)
     48  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     49  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     50  10000 ????						; < $40 as a bankswitch.
     51  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     52  10000 ????			   -TIA_BASE_ADDRESS =	0
     53  10000 ????				       ENDIF
     54  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     55  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     56  10000 ????						; *OR* by declaring the label before including this file, eg:
     57  10000 ????						; TIA_BASE_ADDRESS = $40
     58  10000 ????						;   include "vcs.h"
     59  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     60  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     61  10000 ????						; for the mirrored ROM hardware registers.
     62  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     63  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     64  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     65  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     66  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     67  10000 ????				       ENDIF
     68  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     69  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     70  10000 ????				       ENDIF
     71  10000 ????						;-------------------------------------------------------------------------------
     72 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     73 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     74 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     75 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     76 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     77 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     78 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     79 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     80 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     81 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     82 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     83 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     84 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     85 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     86 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
     87 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
     88 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
     89 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
     90 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
     91 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
     92 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
     93 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
     94 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
     95 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
     96 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
     97 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
     98 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
     99 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    100 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    101 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    102 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    103 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    104 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    105 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    106 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    107 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    108 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    109 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    110 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    111 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    112 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    113 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    114 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    115 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    116 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    117 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    118 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    119 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    120 U002d							;-------------------------------------------------------------------------------
    121 U000e ????				      SEG.U	TIA_REGISTERS_READ
    122 U0000					      ORG	TIA_BASE_READ_ADDRESS
    123 U0000							;											bit 7	 bit 6
    124 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    125 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    126 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    127 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    128 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    129 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    130 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    131 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    132 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    133 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    134 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    135 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    136 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    137 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    138 U000e							;-------------------------------------------------------------------------------
    139 U0298 ????				      SEG.U	RIOT
    140 U0280					      ORG	$280
    141 U0280							; RIOT MEMORY MAP
    142 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    143 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    144 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    145 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    146 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    147 U0284		       00	   INTIM      ds	1	; $284		Timer output
    148 U0285		       00	   TIMINT     ds	1	; $285
    149 U0286							; Unused/undefined registers ($285-$294)
    150 U0286		       00		      ds	1	; $286
    151 U0287		       00		      ds	1	; $287
    152 U0288		       00		      ds	1	; $288
    153 U0289		       00		      ds	1	; $289
    154 U028a		       00		      ds	1	; $28A
    155 U028b		       00		      ds	1	; $28B
    156 U028c		       00		      ds	1	; $28C
    157 U028d		       00		      ds	1	; $28D
    158 U028e		       00		      ds	1	; $28E
    159 U028f		       00		      ds	1	; $28F
    160 U0290		       00		      ds	1	; $290
    161 U0291		       00		      ds	1	; $291
    162 U0292		       00		      ds	1	; $292
    163 U0293		       00		      ds	1	; $293
    164 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    165 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    166 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    167 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    168 U0298							;-------------------------------------------------------------------------------
    169 U0298							; The following required for back-compatibility with code which does not use
    170 U0298							; segments.
    171  0000 ????				      SEG
    172  0000 ????						; EOF
------- FILE bomber.asm
      5  0000 ????
      6 U0099 ????				      seg.u	Variables
      7 U0080					      org	$80
      8 U0080
      9 U0080		       00	   JetXPos    byte.b
     10 U0081		       00	   JetYPos    byte.b
     11 U0082		       00	   BomberXPos byte.b
     12 U0083		       00	   BomberYPos byte.b
     13 U0084		       00	   Score      byte.b
     14 U0085		       00	   Timer      byte.b
     15 U0086		       00	   Temp       byte.b
     16 U0087		       00 00	   OnesDigitOffset word.w
     17 U0089		       00 00	   TensDigitOffset word.w
     18 U008b		       00 00	   BallDudePtr word.w
     19 U008d		       00 00	   AdrienPtr  word.w
     20 U008f		       00 00	   BallDudeColPtr word.w
     21 U0091		       00 00	   AdrienColPtr word.w
     22 U0093		       00	   JetAnimOffset byte.b
     23 U0094		       00	   Random     byte.b
     24 U0095		       00	   ScoreSprite byte.b
     25 U0096		       00	   TimerSprite byte.b
     26 U0097		       00	   TerrainColour byte.b
     27 U0098		       00	   RiverColour byte.b
     28 U0099
     29 U0099							; Define constants
     30 U0099		       00 09	   SPRITE_HEIGHT =	9
     31 U0099		       00 05	   DIGIT_HEIGHT =	5
     32 U0099
     33  10000 ????				       seg	Code
     34  f000					      org	$F000
     35  f000
     36  f000				   Reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     38  f00b
     39  f00b							; Initialise RAM variables and TIA registers
     40  f00b							; Set initial player coordinates
     41  f00b		       a9 50		      lda	#80
     42  f00d		       85 81		      sta	JetYPos
     43  f00f		       a9 00		      lda	#0
     44  f011		       85 80		      sta	JetXPos
     45  f013
     46  f013							; Set initial bomber coordinates
     47  f013							; Basically just some random coordinates as placeholder lol
     48  f013		       a9 53		      lda	#83
     49  f015		       85 83		      sta	BomberYPos
     50  f017		       a9 50		      lda	#80
     51  f019		       85 82		      sta	BomberXPos
     52  f01b		       a9 d4		      lda	#%11010100
     53  f01d		       85 94		      sta	Random
     54  f01f		       a9 00		      lda	#0
     55  f021		       85 84		      sta	Score
     56  f023		       85 85		      sta	Timer
     57  f025
     58  f025							; Initialise sprite and palette pointers
     59  f025		       a9 ca		      lda	#<BallDude
     60  f027		       85 8b		      sta	BallDudePtr
     61  f029		       a9 f2		      lda	#>BallDude
     62  f02b		       85 8c		      sta	BallDudePtr+1
     63  f02d
     64  f02d		       a9 dc		      lda	#<Adrien
     65  f02f		       85 8d		      sta	AdrienPtr
     66  f031		       a9 f2		      lda	#>Adrien
     67  f033		       85 8e		      sta	AdrienPtr+1
     68  f035
     69  f035		       a9 e5		      lda	#<BallDudeCol
     70  f037		       85 8f		      sta	BallDudeColPtr
     71  f039		       a9 f2		      lda	#>BallDudeCol
     72  f03b		       85 90		      sta	BallDudeColPtr+1
     73  f03d
     74  f03d		       a9 f7		      lda	#<AdrienCol
     75  f03f		       85 91		      sta	AdrienColPtr
     76  f041		       a9 f2		      lda	#>AdrienCol
     77  f043		       85 92		      sta	AdrienColPtr+1
     78  f045
     79  f045							; Begin rendering
     80  f045				   StartFrame
     81  f045							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     82  f045							; Pre-vblank calculations
     83  f045							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     84  f045							; Turn on vblank and vsync
     85  f045		       a2 02		      ldx	#2
     86  f047		       86 01		      stx	VBLANK
     87  f049		       86 00		      stx	VSYNC
     88  f04b					      REPEAT	3
     89  f04b		       86 02		      stx	WSYNC
     88  f04b					      REPEND
     89  f04d		       86 02		      stx	WSYNC
     88  f04d					      REPEND
     89  f04f		       86 02		      stx	WSYNC
     90  f051					      REPEND
     91  f051							; Turn off vsync
     92  f051		       a2 00		      ldx	#0
     93  f053		       86 00		      stx	VSYNC
     94  f055
     95  f055							; Render VBLANK
     96  f055					      REPEAT	37
     97  f055		       86 02		      stx	WSYNC
     96  f055					      REPEND
     97  f057		       86 02		      stx	WSYNC
     96  f057					      REPEND
     97  f059		       86 02		      stx	WSYNC
     96  f059					      REPEND
     97  f05b		       86 02		      stx	WSYNC
     96  f05b					      REPEND
     97  f05d		       86 02		      stx	WSYNC
     96  f05d					      REPEND
     97  f05f		       86 02		      stx	WSYNC
     96  f05f					      REPEND
     97  f061		       86 02		      stx	WSYNC
     96  f061					      REPEND
     97  f063		       86 02		      stx	WSYNC
     96  f063					      REPEND
     97  f065		       86 02		      stx	WSYNC
     96  f065					      REPEND
     97  f067		       86 02		      stx	WSYNC
     96  f067					      REPEND
     97  f069		       86 02		      stx	WSYNC
     96  f069					      REPEND
     97  f06b		       86 02		      stx	WSYNC
     96  f06b					      REPEND
     97  f06d		       86 02		      stx	WSYNC
     96  f06d					      REPEND
     97  f06f		       86 02		      stx	WSYNC
     96  f06f					      REPEND
     97  f071		       86 02		      stx	WSYNC
     96  f071					      REPEND
     97  f073		       86 02		      stx	WSYNC
     96  f073					      REPEND
     97  f075		       86 02		      stx	WSYNC
     96  f075					      REPEND
     97  f077		       86 02		      stx	WSYNC
     96  f077					      REPEND
     97  f079		       86 02		      stx	WSYNC
     96  f079					      REPEND
     97  f07b		       86 02		      stx	WSYNC
     96  f07b					      REPEND
     97  f07d		       86 02		      stx	WSYNC
     96  f07d					      REPEND
     97  f07f		       86 02		      stx	WSYNC
     96  f07f					      REPEND
     97  f081		       86 02		      stx	WSYNC
     96  f081					      REPEND
     97  f083		       86 02		      stx	WSYNC
     96  f083					      REPEND
     97  f085		       86 02		      stx	WSYNC
     96  f085					      REPEND
     97  f087		       86 02		      stx	WSYNC
     96  f087					      REPEND
     97  f089		       86 02		      stx	WSYNC
     96  f089					      REPEND
     97  f08b		       86 02		      stx	WSYNC
     96  f08b					      REPEND
     97  f08d		       86 02		      stx	WSYNC
     96  f08d					      REPEND
     97  f08f		       86 02		      stx	WSYNC
     96  f08f					      REPEND
     97  f091		       86 02		      stx	WSYNC
     96  f091					      REPEND
     97  f093		       86 02		      stx	WSYNC
     96  f093					      REPEND
     97  f095		       86 02		      stx	WSYNC
     96  f095					      REPEND
     97  f097		       86 02		      stx	WSYNC
     96  f097					      REPEND
     97  f099		       86 02		      stx	WSYNC
     96  f099					      REPEND
     97  f09b		       86 02		      stx	WSYNC
     96  f09b					      REPEND
     97  f09d		       86 02		      stx	WSYNC
     98  f09f					      REPEND
     99  f09f
    100  f09f		       a5 80		      lda	JetXPos
    101  f0a1		       a0 00		      ldy	#0	; Corresponds to P0
    102  f0a3		       20 16 f2 	      jsr	SetObjXPos
    103  f0a6
    104  f0a6		       a5 82		      lda	BomberXPos
    105  f0a8		       a0 01		      ldy	#1	; Corresponds to p1
    106  f0aa		       20 16 f2 	      jsr	SetObjXPos
    107  f0ad
    108  f0ad		       20 57 f2 	      jsr	CalculateDigitOffset	; Calculate scoreboard digit lookup table offset
    109  f0b0
    110  f0b0							; Poke registers
    111  f0b0		       85 02		      sta	WSYNC
    112  f0b2		       85 2a		      sta	HMOVE
    113  f0b4
    114  f0b4		       a2 00		      ldx	#0
    115  f0b6							; Turn off VBLANK
    116  f0b6		       86 01		      stx	VBLANK
    117  f0b8
    118  f0b8							; Render scoreboard
    119  f0b8							; Clear playfield registers so nothing is drawn
    120  f0b8		       a9 00		      lda	#0
    121  f0ba		       85 0d		      sta	PF0
    122  f0bc		       85 0e		      sta	PF1
    123  f0be		       85 0f		      sta	PF2
    124  f0c0		       85 1b		      sta	GRP0
    125  f0c2		       85 1c		      sta	GRP1
    126  f0c4		       85 0a		      sta	CTRLPF
    127  f0c6		       85 09		      sta	COLUBK
    128  f0c8
    129  f0c8							; Set playfield colour
    130  f0c8		       a9 1e		      lda	#$1E
    131  f0ca		       85 08		      sta	COLUPF
    132  f0cc
    133  f0cc							; Draw the scoreboard
    134  f0cc		       a2 05		      ldx	#DIGIT_HEIGHT
    135  f0ce				   .ScoreDigitLoop
    136  f0ce		       a4 89		      ldy	TensDigitOffset
    137  f0d0		       b9 7a f2 	      lda	Digits,Y
    138  f0d3		       29 f0		      and	#$F0	; Mask the graphics for the ones digits
    139  f0d5		       85 95		      sta	ScoreSprite
    140  f0d7
    141  f0d7		       a4 87		      ldy	OnesDigitOffset
    142  f0d9		       b9 7a f2 	      lda	Digits,Y
    143  f0dc		       29 0f		      and	#$0F	; Mask the graphics for the tens digits
    144  f0de		       05 95		      ora	ScoreSprite
    145  f0e0		       85 95		      sta	ScoreSprite
    146  f0e2
    147  f0e2		       85 02		      sta	WSYNC	; poke
    148  f0e4		       85 0e		      sta	PF1	; Display score sprite
    149  f0e6
    150  f0e6		       a4 8a		      ldy	TensDigitOffset+1	; Tens digit for the timer
    151  f0e8		       b9 7a f2 	      lda	Digits,Y
    152  f0eb		       29 f0		      and	#$F0
    153  f0ed		       85 96		      sta	TimerSprite
    154  f0ef
    155  f0ef		       a4 88		      ldy	OnesDigitOffset+1
    156  f0f1		       b9 7a f2 	      lda	Digits,Y
    157  f0f4		       29 0f		      and	#$0F
    158  f0f6		       05 96		      ora	TimerSprite
    159  f0f8		       85 96		      sta	TimerSprite
    160  f0fa
    161  f0fa							; Waste clock cycles
    162  f0fa		       20 79 f2 	      jsr	Sleep12Cycles
    163  f0fd
    164  f0fd		       85 0e		      sta	PF1
    165  f0ff
    166  f0ff							; 2-kernel display so strobe
    167  f0ff		       a4 95		      ldy	ScoreSprite
    168  f101		       85 02		      sta	WSYNC
    169  f103
    170  f103		       84 0e		      sty	PF1
    171  f105		       e6 89		      inc	TensDigitOffset
    172  f107		       e6 8a		      inc	TensDigitOffset+1
    173  f109		       e6 87		      inc	OnesDigitOffset
    174  f10b		       e6 88		      inc	OnesDigitOffset+1
    175  f10d
    176  f10d		       20 79 f2 	      jsr	Sleep12Cycles
    177  f110
    178  f110		       ca		      dex
    179  f111		       85 0e		      sta	PF1
    180  f113		       d0 b9		      bne	.ScoreDigitLoop
    181  f115
    182  f115		       85 02		      sta	WSYNC
    183  f117
    184  f117							; Add padding under the scoreboard
    185  f117		       a9 00		      lda	#0
    186  f119		       85 0d		      sta	PF0
    187  f11b		       85 0e		      sta	PF1
    188  f11d		       85 0f		      sta	PF2
    189  f11f
    190  f11f					      REPEAT	3
    191  f11f		       85 02		      sta	WSYNC
    190  f11f					      REPEND
    191  f121		       85 02		      sta	WSYNC
    190  f121					      REPEND
    191  f123		       85 02		      sta	WSYNC
    192  f125					      REPEND
    193  f125
    194  f125							; Render the visible scanlines
    195  f125				   VisibleScanlines
    196  f125							; Set background colour
    197  f125		       a5 98		      lda	RiverColour
    198  f127		       85 09		      sta	COLUBK
    199  f129							; Set playfield colour
    200  f129		       a5 97		      lda	TerrainColour
    201  f12b		       85 08		      sta	COLUPF
    202  f12d
    203  f12d							; Setup playfield
    204  f12d		       a9 f0		      lda	#%11110000	; PF0 uses first 4 bits and is reversed
    205  f12f		       85 0d		      sta	PF0
    206  f131		       a9 c0		      lda	#%11000000
    207  f133		       85 0e		      sta	PF1
    208  f135		       a9 00		      lda	#0
    209  f137		       85 0f		      sta	PF2
    210  f139
    211  f139							; Playfield reflection
    212  f139		       a9 01		      lda	#%00000001
    213  f13b		       85 0a		      sta	CTRLPF
    214  f13d
    215  f13d							; 81 to account for the size of the scoreboard
    216  f13d		       a2 51		      ldx	#81
    217  f13f
    218  f13f							; Render the 96 visible scanline
    219  f13f							; Using a 2 line kernel
    220  f13f				   .GameLineLoop
    221  f13f				   .InsideBallDude
    222  f13f		       8a		      txa
    223  f140		       38		      sec
    224  f141		       e5 81		      sbc	JetYPos
    225  f143		       c5 09		      cmp	SPRITE_HEIGHT
    226  f145		       90 02		      bcc	.DrawSpriteP0
    227  f147		       a9 00		      lda	#0
    228  f149
    229  f149				   .DrawSpriteP0
    230  f149		       18		      clc
    231  f14a		       65 93		      adc	JetAnimOffset
    232  f14c		       a8		      tay
    233  f14d		       b1 8b		      lda	(BallDudePtr),Y	; Y register is only register that can work with pointers
    234  f14f		       85 02		      sta	WSYNC	; Wait for scanline
    235  f151		       85 1b		      sta	GRP0	; Set graphics for P0
    236  f153		       b1 8f		      lda	(BallDudeColPtr),Y
    237  f155		       85 06		      sta	COLUP0
    238  f157
    239  f157				   .InsideAdrien
    240  f157		       8a		      txa
    241  f158		       38		      sec
    242  f159		       e5 83		      sbc	BomberYPos
    243  f15b		       c5 09		      cmp	SPRITE_HEIGHT
    244  f15d		       90 02		      bcc	.DrawSpriteP1
    245  f15f		       a9 00		      lda	#0
    246  f161
    247  f161				   .DrawSpriteP1
    248  f161		       a8		      tay
    249  f162
    250  f162							; Set Adrien to be thicc because it'll be funny idk
    251  f162		       a9 07		      lda	#%00000111
    252  f164		       85 05		      sta	NUSIZ1
    253  f166		       98		      tya
    254  f167
    255  f167		       b1 8d		      lda	(AdrienPtr),Y	; Y register is only register that can work with pointers
    256  f169		       85 02		      sta	WSYNC	; Wait for scanline
    257  f16b		       85 1c		      sta	GRP1	; Set graphics for P0
    258  f16d		       b1 91		      lda	(AdrienColPtr),Y
    259  f16f		       85 07		      sta	COLUP1
    260  f171
    261  f171		       ca		      dex
    262  f172		       d0 cb		      bne	.GameLineLoop
    263  f174
    264  f174							; Display vblank
    265  f174				   Overscan
    266  f174		       a9 02		      lda	#2
    267  f176		       85 01		      sta	VBLANK
    268  f178					      REPEAT	30
    269  f178		       85 02		      sta	WSYNC
    268  f178					      REPEND
    269  f17a		       85 02		      sta	WSYNC
    268  f17a					      REPEND
    269  f17c		       85 02		      sta	WSYNC
    268  f17c					      REPEND
    269  f17e		       85 02		      sta	WSYNC
    268  f17e					      REPEND
    269  f180		       85 02		      sta	WSYNC
    268  f180					      REPEND
    269  f182		       85 02		      sta	WSYNC
    268  f182					      REPEND
    269  f184		       85 02		      sta	WSYNC
    268  f184					      REPEND
    269  f186		       85 02		      sta	WSYNC
    268  f186					      REPEND
    269  f188		       85 02		      sta	WSYNC
    268  f188					      REPEND
    269  f18a		       85 02		      sta	WSYNC
    268  f18a					      REPEND
    269  f18c		       85 02		      sta	WSYNC
    268  f18c					      REPEND
    269  f18e		       85 02		      sta	WSYNC
    268  f18e					      REPEND
    269  f190		       85 02		      sta	WSYNC
    268  f190					      REPEND
    269  f192		       85 02		      sta	WSYNC
    268  f192					      REPEND
    269  f194		       85 02		      sta	WSYNC
    268  f194					      REPEND
    269  f196		       85 02		      sta	WSYNC
    268  f196					      REPEND
    269  f198		       85 02		      sta	WSYNC
    268  f198					      REPEND
    269  f19a		       85 02		      sta	WSYNC
    268  f19a					      REPEND
    269  f19c		       85 02		      sta	WSYNC
    268  f19c					      REPEND
    269  f19e		       85 02		      sta	WSYNC
    268  f19e					      REPEND
    269  f1a0		       85 02		      sta	WSYNC
    268  f1a0					      REPEND
    269  f1a2		       85 02		      sta	WSYNC
    268  f1a2					      REPEND
    269  f1a4		       85 02		      sta	WSYNC
    268  f1a4					      REPEND
    269  f1a6		       85 02		      sta	WSYNC
    268  f1a6					      REPEND
    269  f1a8		       85 02		      sta	WSYNC
    268  f1a8					      REPEND
    269  f1aa		       85 02		      sta	WSYNC
    268  f1aa					      REPEND
    269  f1ac		       85 02		      sta	WSYNC
    268  f1ac					      REPEND
    269  f1ae		       85 02		      sta	WSYNC
    268  f1ae					      REPEND
    269  f1b0		       85 02		      sta	WSYNC
    268  f1b0					      REPEND
    269  f1b2		       85 02		      sta	WSYNC
    270  f1b4					      REPEND
    271  f1b4
    272  f1b4		       a9 00		      lda	#0
    273  f1b6		       85 01		      sta	VBLANK
    274  f1b8
    275  f1b8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    276  f1b8							; Joystick input
    277  f1b8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    278  f1b8		       a6 80		      ldx	JetXPos
    279  f1ba				   CheckP0Up
    280  f1ba		       a9 10		      lda	#%00010000
    281  f1bc		       2c 80 02 	      bit	SWCHA
    282  f1bf		       d0 02		      bne	CheckP0Down
    283  f1c1		       e6 81		      inc	JetYPos
    284  f1c3				   CheckP0Down
    285  f1c3		       a9 20		      lda	#%00100000
    286  f1c5		       2c 80 02 	      bit	SWCHA
    287  f1c8		       d0 02		      bne	CheckP0Left
    288  f1ca		       c6 81		      dec	JetYPos
    289  f1cc				   CheckP0Left
    290  f1cc		       a9 40		      lda	#%01000000
    291  f1ce		       2c 80 02 	      bit	SWCHA
    292  f1d1		       d0 02		      bne	CheckP0Right
    293  f1d3		       c6 80		      dec	JetXPos
    294  f1d5				   CheckP0Right
    295  f1d5		       a9 80		      lda	#%10000000
    296  f1d7		       2c 80 02 	      bit	SWCHA
    297  f1da		       d0 02		      bne	NoInput
    298  f1dc		       e6 80		      inc	JetXPos
    299  f1de				   NoInput
    300  f1de		       a9 00		      lda	#0
    301  f1e0		       85 93		      sta	JetAnimOffset
    302  f1e2		       e4 80		      cpx	JetXPos
    303  f1e4		       f0 04		      beq	NoChange
    304  f1e6							; Set the sprite pointer to BallDude Turning
    305  f1e6		       a5 09		      lda	SPRITE_HEIGHT
    306  f1e8		       85 93		      sta	JetAnimOffset
    307  f1ea				   NoChange
    308  f1ea
    309  f1ea				   UpdateBomberPosition
    310  f1ea		       18		      clc
    311  f1eb		       a5 83		      lda	BomberYPos
    312  f1ed		       c9 00		      cmp	#0
    313  f1ef		       30 05		      bmi	.ResetBomberPosition
    314  f1f1
    315  f1f1		       c6 83		      dec	BomberYPos
    316  f1f3		       4c f9 f1 	      jmp	EndPositionUpdate
    317  f1f6
    318  f1f6				   .ResetBomberPosition
    319  f1f6		       20 37 f2 	      jsr	SpawnBomber
    320  f1f9
    321  f1f9				   EndPositionUpdate
    322  f1f9							; Collision checks
    323  f1f9				   CheckCollisionP0P1
    324  f1f9		       a9 80		      lda	#%10000000
    325  f1fb		       24 07		      bit	CXPPMM
    326  f1fd		       d0 06		      bne	.CollisionP0P1	; Zero flag is set if a&bit is zero (lol)
    327  f1ff		       20 0d f2 	      jsr	SetTerrainRiverColour
    328  f202		       4c 08 f2 	      jmp	EndCollisionCheck
    329  f205				   .CollisionP0P1
    330  f205		       20 2a f2 	      jsr	GameOver
    331  f208
    332  f208				   EndCollisionCheck
    333  f208		       85 2c		      sta	CXCLR	; Poke clear collision check register
    334  f20a							; Loop forever
    335  f20a		       4c 45 f0 	      jmp	StartFrame
    336  f20d
    337  f20d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    338  f20d							; Set terrain/river colour to green/blue
    339  f20d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    340  f20d				   SetTerrainRiverColour subroutine
    341  f20d		       a9 c2		      lda	#$C2
    342  f20f		       85 97		      sta	TerrainColour
    343  f211		       a9 84		      lda	#$84
    344  f213		       85 98		      sta	RiverColour
    345  f215
    346  f215		       60		      rts
    347  f216
    348  f216
    349  f216							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    350  f216							; accumulator contains x-posiiton
    351  f216							; y register contains object (0:player0, 1:player1, 2:missile0, 3:missile1, 4:ball)
    352  f216							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    353  f216				   SetObjXPos subroutine
    354  f216		       85 02		      sta	WSYNC
    355  f218		       38		      sec
    356  f219				   .DivideLoop
    357  f219		       e9 0f		      sbc	#15
    358  f21b		       b0 fc		      bcs	.DivideLoop	; loop while carry is set
    359  f21d
    360  f21d		       49 07		      eor	#7	; exclusive OR with accumulator
    361  f21f							; A will be between -8 and 7
    362  f21f					      REPEAT	4
    363  f21f		       0a		      asl		; bitshift a, HMP0 uses only 4 bits
    362  f21f					      REPEND
    363  f220		       0a		      asl		; bitshift a, HMP0 uses only 4 bits
    362  f220					      REPEND
    363  f221		       0a		      asl		; bitshift a, HMP0 uses only 4 bits
    362  f221					      REPEND
    363  f222		       0a		      asl		; bitshift a, HMP0 uses only 4 bits
    364  f223					      REPEND
    365  f223
    366  f223		       99 20 00 	      sta	HMP0,Y	; set fine position value
    367  f226		       99 10 00 	      sta	RESP0,Y	; set coarse position value
    368  f229		       60		      rts
    369  f22a
    370  f22a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    371  f22a							; GameOver Subroutine
    372  f22a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    373  f22a				   GameOver   subroutine
    374  f22a							; Set background to red for one frame
    375  f22a		       a9 30		      lda	#$30
    376  f22c		       85 97		      sta	TerrainColour
    377  f22e		       85 98		      sta	RiverColour
    378  f230
    379  f230		       a9 00		      lda	#0
    380  f232		       85 84		      sta	Score
    381  f234		       85 85		      sta	Timer
    382  f236
    383  f236		       60		      rts
    384  f237
    385  f237
    386  f237							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    387  f237							; generate random number using LFSR
    388  f237							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    389  f237				   SpawnBomber subroutine
    390  f237							; The LFSR
    391  f237		       a5 94		      lda	Random
    392  f239		       0a		      asl
    393  f23a		       45 94		      eor	Random
    394  f23c		       0a		      asl
    395  f23d		       45 94		      eor	Random
    396  f23f		       0a		      asl
    397  f240		       0a		      asl
    398  f241		       45 94		      eor	Random
    399  f243		       0a		      asl
    400  f244		       26 94		      rol	Random
    401  f246
    402  f246							; Divide by 4 to match playfield size
    403  f246		       4a		      lsr
    404  f247		       4a		      lsr
    405  f248		       85 82		      sta	BomberXPos
    406  f24a		       a9 1e		      lda	#30	; Add 30 for playfield bounds
    407  f24c		       65 82		      adc	BomberXPos
    408  f24e		       85 82		      sta	BomberXPos
    409  f250
    410  f250		       a9 60		      lda	#96
    411  f252		       85 83		      sta	BomberYPos
    412  f254
    413  f254							; Increment score by one because we avoided the Bomber well done
    414  f254		       e6 84		      inc	Score
    415  f256		       60		      rts
    416  f257
    417  f257							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    418  f257							; Set scoreboard digits to be displayed to screen
    419  f257							; We do it in hex because it's easier or something idk lol
    420  f257							; I'll probably come back to this to try make a decimal display
    421  f257							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    422  f257				   CalculateDigitOffset subroutine
    423  f257		       a2 01		      ldx	#1
    424  f259				   .PrepareScoreLoop
    425  f259							; Ones digit
    426  f259		       b5 84		      lda	Score,X	; Timer when x = 1
    427  f25b		       29 0f		      and	#%00001111
    428  f25d		       85 86		      sta	Temp
    429  f25f		       0a		      asl
    430  f260		       0a		      asl
    431  f261		       65 86		      adc	Temp
    432  f263		       95 87		      sta	OnesDigitOffset,X
    433  f265							; Tens digit
    434  f265		       b5 84		      lda	Score,X
    435  f267		       29 f0		      and	#%11110000
    436  f269		       85 86		      sta	Temp
    437  f26b		       4a		      lsr
    438  f26c		       4a		      lsr
    439  f26d		       85 86		      sta	Temp
    440  f26f		       4a		      lsr
    441  f270		       4a		      lsr
    442  f271		       65 86		      adc	Temp
    443  f273		       95 89		      sta	TensDigitOffset,X
    444  f275
    445  f275		       ca		      dex
    446  f276		       10 e1		      bpl	.PrepareScoreLoop
    447  f278		       60		      rts
    448  f279
    449  f279							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    450  f279							; Sleep 12 cycles
    451  f279							; jsr takes 6 cycle, rts takes 6 cycles
    452  f279							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    453  f279				   Sleep12Cycles subroutine
    454  f279		       60		      rts
    455  f27a
    456  f27a
    457  f27a							; Sprites
    458  f27a				   Digits
    459  f27a		       77		      .byte.b	%01110111	; ### ###
    460  f27b		       55		      .byte.b	%01010101	; # # # #
    461  f27c		       55		      .byte.b	%01010101	; # # # #
    462  f27d		       55		      .byte.b	%01010101	; # # # #
    463  f27e		       77		      .byte.b	%01110111	; ### ###
    464  f27f
    465  f27f		       11		      .byte.b	%00010001	;   #	 #
    466  f280		       11		      .byte.b	%00010001	;   #	 #
    467  f281		       11		      .byte.b	%00010001	;   #	 #
    468  f282		       11		      .byte.b	%00010001	;   #	 #
    469  f283		       11		      .byte.b	%00010001	;   #	 #
    470  f284
    471  f284		       77		      .byte.b	%01110111	; ### ###
    472  f285		       11		      .byte.b	%00010001	;   #	 #
    473  f286		       77		      .byte.b	%01110111	; ### ###
    474  f287		       44		      .byte.b	%01000100	; #   #
    475  f288		       77		      .byte.b	%01110111	; ### ###
    476  f289
    477  f289		       77		      .byte.b	%01110111	; ### ###
    478  f28a		       11		      .byte.b	%00010001	;   #	 #
    479  f28b		       33		      .byte.b	%00110011	;  ##	##
    480  f28c		       11		      .byte.b	%00010001	;   #	 #
    481  f28d		       77		      .byte.b	%01110111	; ### ###
    482  f28e
    483  f28e		       55		      .byte.b	%01010101	; # # # #
    484  f28f		       55		      .byte.b	%01010101	; # # # #
    485  f290		       77		      .byte.b	%01110111	; ### ###
    486  f291		       11		      .byte.b	%00010001	;   #	 #
    487  f292		       11		      .byte.b	%00010001	;   #	 #
    488  f293
    489  f293		       77		      .byte.b	%01110111	; ### ###
    490  f294		       44		      .byte.b	%01000100	; #   #
    491  f295		       77		      .byte.b	%01110111	; ### ###
    492  f296		       11		      .byte.b	%00010001	;   #	 #
    493  f297		       77		      .byte.b	%01110111	; ### ###
    494  f298
    495  f298		       77		      .byte.b	%01110111	; ### ###
    496  f299		       44		      .byte.b	%01000100	; #   #
    497  f29a		       77		      .byte.b	%01110111	; ### ###
    498  f29b		       55		      .byte.b	%01010101	; # # # #
    499  f29c		       77		      .byte.b	%01110111	; ### ###
    500  f29d
    501  f29d		       77		      .byte.b	%01110111	; ### ###
    502  f29e		       11		      .byte.b	%00010001	;   #	 #
    503  f29f		       11		      .byte.b	%00010001	;   #	 #
    504  f2a0		       11		      .byte.b	%00010001	;   #	 #
    505  f2a1		       11		      .byte.b	%00010001	;   #	 #
    506  f2a2
    507  f2a2		       77		      .byte.b	%01110111	; ### ###
    508  f2a3		       55		      .byte.b	%01010101	; # # # #
    509  f2a4		       77		      .byte.b	%01110111	; ### ###
    510  f2a5		       55		      .byte.b	%01010101	; # # # #
    511  f2a6		       77		      .byte.b	%01110111	; ### ###
    512  f2a7
    513  f2a7		       77		      .byte.b	%01110111	; ### ###
    514  f2a8		       55		      .byte.b	%01010101	; # # # #
    515  f2a9		       77		      .byte.b	%01110111	; ### ###
    516  f2aa		       11		      .byte.b	%00010001	;   #	 #
    517  f2ab		       77		      .byte.b	%01110111	; ### ###
    518  f2ac
    519  f2ac		       22		      .byte.b	%00100010	;  #	#
    520  f2ad		       55		      .byte.b	%01010101	; # # # #
    521  f2ae		       77		      .byte.b	%01110111	; ### ###
    522  f2af		       55		      .byte.b	%01010101	; # # # #
    523  f2b0		       55		      .byte.b	%01010101	; # # # #
    524  f2b1
    525  f2b1		       77		      .byte.b	%01110111	; ### ###
    526  f2b2		       55		      .byte.b	%01010101	; # # # #
    527  f2b3		       66		      .byte.b	%01100110	; ##  ##
    528  f2b4		       55		      .byte.b	%01010101	; # # # #
    529  f2b5		       77		      .byte.b	%01110111	; ### ###
    530  f2b6
    531  f2b6		       77		      .byte.b	%01110111	; ### ###
    532  f2b7		       44		      .byte.b	%01000100	; #   #
    533  f2b8		       44		      .byte.b	%01000100	; #   #
    534  f2b9		       44		      .byte.b	%01000100	; #   #
    535  f2ba		       77		      .byte.b	%01110111	; ### ###
    536  f2bb
    537  f2bb		       66		      .byte.b	%01100110	; ##  ##
    538  f2bc		       55		      .byte.b	%01010101	; # # # #
    539  f2bd		       55		      .byte.b	%01010101	; # # # #
    540  f2be		       55		      .byte.b	%01010101	; # # # #
    541  f2bf		       66		      .byte.b	%01100110	; ##  ##
    542  f2c0
    543  f2c0		       77		      .byte.b	%01110111	; ### ###
    544  f2c1		       44		      .byte.b	%01000100	; #   #
    545  f2c2		       77		      .byte.b	%01110111	; ### ###
    546  f2c3		       44		      .byte.b	%01000100	; #   #
    547  f2c4		       77		      .byte.b	%01110111	; ### ###
    548  f2c5
    549  f2c5		       77		      .byte.b	%01110111	; ### ###
    550  f2c6		       44		      .byte.b	%01000100	; #   #
    551  f2c7		       66		      .byte.b	%01100110	; ##  ##
    552  f2c8		       44		      .byte.b	%01000100	; #   #
    553  f2c9		       44		      .byte.b	%01000100	; #   #
    554  f2ca
    555  f2ca				   BallDude
    556  f2ca		       00		      .byte.b	#%00000000
    557  f2cb		       7e		      .byte.b	#%01111110	;$5A
    558  f2cc		       ff		      .byte.b	#%11111111	;$5A
    559  f2cd		       ff		      .byte.b	#%11111111	;$58
    560  f2ce		       ff		      .byte.b	#%11111111	;$56
    561  f2cf		       9f		      .byte.b	#%10011111	;$54
    562  f2d0		       db		      .byte.b	#%11011011	;$54
    563  f2d1		       fb		      .byte.b	#%11111011	;$52
    564  f2d2		       76		      .byte.b	#%01110110	;$52
    565  f2d3				   BallDudeTurning
    566  f2d3		       00		      .byte.b	#%00000000
    567  f2d4		       18		      .byte.b	#%00011000	;$5A
    568  f2d5		       3c		      .byte.b	#%00111100	;$58
    569  f2d6		       7e		      .byte.b	#%01111110	;$56
    570  f2d7		       7e		      .byte.b	#%01111110	;$54
    571  f2d8		       4a		      .byte.b	#%01001010	;$54
    572  f2d9		       6a		      .byte.b	#%01101010	;$52
    573  f2da		       34		      .byte.b	#%00110100	;$52
    574  f2db		       18		      .byte.b	#%00011000	;$52
    575  f2dc				   Adrien
    576  f2dc		       00		      .byte.b	#%00000000
    577  f2dd		       ff		      .byte.b	#%11111111	;$16
    578  f2de		       e7		      .byte.b	#%11100111	;$16
    579  f2df		       e7		      .byte.b	#%11100111	;$18
    580  f2e0		       7e		      .byte.b	#%01111110	;$18
    581  f2e1		       5a		      .byte.b	#%01011010	;$1A
    582  f2e2		       3c		      .byte.b	#%00111100	;$1A
    583  f2e3		       3c		      .byte.b	#%00111100	;$1C
    584  f2e4		       18		      .byte.b	#%00011000	;$1C
    585  f2e5
    586  f2e5				   BallDudeCol
    587  f2e5		       00		      .byte.b	#$00
    588  f2e6		       5a		      .byte.b	#$5A	;
    589  f2e7		       58		      .byte.b	#$58	;
    590  f2e8		       56		      .byte.b	#$56	;
    591  f2e9		       54		      .byte.b	#$54	;
    592  f2ea		       54		      .byte.b	#$54	;
    593  f2eb		       52		      .byte.b	#$52	;
    594  f2ec		       52		      .byte.b	#$52	;
    595  f2ed		       52		      .byte.b	#$52	;
    596  f2ee				   BallDudeTurningCol
    597  f2ee		       00		      .byte.b	#$00
    598  f2ef		       5a		      .byte.b	#$5A	;
    599  f2f0		       58		      .byte.b	#$58	;
    600  f2f1		       56		      .byte.b	#$56	;
    601  f2f2		       54		      .byte.b	#$54	;
    602  f2f3		       54		      .byte.b	#$54	;
    603  f2f4		       52		      .byte.b	#$52	;
    604  f2f5		       52		      .byte.b	#$52	;
    605  f2f6		       52		      .byte.b	#$52	;
    606  f2f7				   AdrienCol
    607  f2f7		       00		      .byte.b	#$00
    608  f2f8		       16		      .byte.b	#$16	;
    609  f2f9		       16		      .byte.b	#$16	;
    610  f2fa		       18		      .byte.b	#$18	;
    611  f2fb		       18		      .byte.b	#$18	;
    612  f2fc		       1a		      .byte.b	#$1A	;
    613  f2fd		       1a		      .byte.b	#$1A	;
    614  f2fe		       1c		      .byte.b	#$1C	;
    615  f2ff		       1c		      .byte.b	#$1C	;
    616  f300
    617  f300							; Complete ROM with 4kb
    618  fffc					      org	$FFFC
    619  fffc		       00 f0		      word.w	Reset
    620  fffe		       00 f0		      word.w	Reset
