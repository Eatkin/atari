------- FILE bomber.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_MACRO =	105
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  10000 ????						;			    used for code assembly.
     24  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  10000 ????						;
     26  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  10000 ????						;
     28  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  10000 ????						;			   (standardised macro for vertical synch code)
     30  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     31  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  10000 ????						; 1.0	22/MAR/2003		Initial release
     33  10000 ????
     34  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     35  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     37  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  10000 ????						;   registers and require them to be defined first).
     39  10000 ????
     40  10000 ????						; Available macros...
     41  10000 ????						;   SLEEP n		 - sleep for n cycles
     42  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????						; SLEEP duration
     48  10000 ????						; Original author: Thomas Jentzsch
     49  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  10000 ????						; useful for code where precise timing is required.
     51  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  10000 ????
     55  10000 ????				       MAC	sleep
     56  10000 ????			    .CYCLES    SET	{1}
     57  10000 ????
     58  10000 ????				       IF	.CYCLES < 2
     59  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  10000 ????				       ERR
     61  10000 ????				       ENDIF
     62  10000 ????
     63  10000 ????				       IF	.CYCLES & 1
     64  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     65  10000 ????				       nop	0
     66  10000 ????				       ELSE
     67  10000 ????				       bit	VSYNC
     68  10000 ????				       ENDIF
     69  10000 ????			    .CYCLES    SET	.CYCLES - 3
     70  10000 ????				       ENDIF
     71  10000 ????
     72  10000 ????				       REPEAT	.CYCLES / 2
     73  10000 ????				       nop
     74  10000 ????				       REPEND
     75  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     76  10000 ????
     77  10000 ????						;-------------------------------------------------------------------------------
     78  10000 ????						; VERTICAL_SYNC
     79  10000 ????						; Original author: Manuel Polik
     80  10000 ????						; Inserts the code required for a proper 3 scannline
     81  10000 ????						; vertical sync sequence
     82  10000 ????						;
     83  10000 ????						; Note: Alters the accumulator
     84  10000 ????						;
     85  10000 ????						; IN:
     86  10000 ????						; OUT: A = 1
     87  10000 ????
     88  10000 ????				       MAC	vertical_sync
     89  10000 ????				       LDA	#$02	; A = VSYNC enable
     90  10000 ????				       STA	WSYNC	; Finish current line
     91  10000 ????				       STA	VSYNC	; Start vertical sync
     92  10000 ????				       STA	WSYNC	; 1st line vertical sync
     93  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     94  10000 ????				       LSR		; A = VSYNC disable
     95  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     96  10000 ????				       STA	VSYNC	; Stop vertical sync
     97  10000 ????				       ENDM
     98  10000 ????
     99  10000 ????						;-------------------------------------------------------------------------------
    100  10000 ????						; CLEAN_START
    101  10000 ????						; Original author: Andrew Davie
    102  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  10000 ????						; Use as very first section of code on boot (ie: at reset)
    106  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  10000 ????
    108  10000 ????				       MAC	clean_start
    109  10000 ????				       sei
    110  10000 ????				       cld
    111  10000 ????
    112  10000 ????				       ldx	#0
    113  10000 ????				       txa
    114  10000 ????				       tay
    115  10000 ????			    .CLEAR_STACK dex
    116  10000 ????				       txs
    117  10000 ????				       pha
    118  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  10000 ????
    120  10000 ????				       ENDM
    121  10000 ????
    122  10000 ????						;-------------------------------------------------------
    123  10000 ????						; SET_POINTER
    124  10000 ????						; Original author: Manuel Rotschkar
    125  10000 ????						;
    126  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  10000 ????						;
    128  10000 ????						; Usage: SET_POINTER pointer, address
    129  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  10000 ????						;
    131  10000 ????						; Note: Alters the accumulator, NZ flags
    132  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  10000 ????						; IN 2: absolute address
    134  10000 ????
    135  10000 ????				       MAC	set_pointer
    136  10000 ????			    .POINTER   SET	{1}
    137  10000 ????			    .ADDRESS   SET	{2}
    138  10000 ????
    139  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  10000 ????				       STA	.POINTER	; Store in pointer
    141  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    142  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    143  10000 ????
    144  10000 ????				       ENDM
    145  10000 ????
    146  10000 ????
    147  10000 ????						;-------------------------------------------------------
    148  10000 ????						; SAME PAGE BRANCH CHECK
    149  10000 ????						; Original auther: John Payson
    150  10000 ????						;
    151  10000 ????						; Usage: sbeq, sbne, etc just like a normal beq, bne, etc.
    152  10000 ????						;	  A message will be output if the target of the branch
    153  10000 ????						;	  is not on the same page.
    154  10000 ????						;
    155  10000 ????				       mac	sbcc
    156  10000 ????				       bcc	{1}
    157  10000 ????				       if	(* ^ {1}) & $FF00
    158  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    159  10000 ????				       err
    160  10000 ????				       endif
    161  10000 ????				       endm
    162  10000 ????
    163  10000 ????				       mac	sbcs
    164  10000 ????				       bcs	{1}
    165  10000 ????				       if	(* ^ {1}) & $FF00
    166  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    167  10000 ????				       err
    168  10000 ????				       endif
    169  10000 ????				       endm
    170  10000 ????
    171  10000 ????				       mac	sbeq
    172  10000 ????				       beq	{1}
    173  10000 ????				       if	(* ^ {1}) & $FF00
    174  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    175  10000 ????				       err
    176  10000 ????				       endif
    177  10000 ????				       endm
    178  10000 ????
    179  10000 ????				       mac	sbmi
    180  10000 ????				       bmi	{1}
    181  10000 ????				       if	(* ^ {1}) & $FF00
    182  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    183  10000 ????				       err
    184  10000 ????				       endif
    185  10000 ????				       endm
    186  10000 ????
    187  10000 ????				       mac	sbne
    188  10000 ????				       bne	{1}
    189  10000 ????				       if	(* ^ {1}) & $FF00
    190  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    191  10000 ????				       err
    192  10000 ????				       endif
    193  10000 ????				       endm
    194  10000 ????
    195  10000 ????				       mac	sbpl
    196  10000 ????				       bpl	{1}
    197  10000 ????				       if	(* ^ {1}) & $FF00
    198  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    199  10000 ????				       err
    200  10000 ????				       endif
    201  10000 ????				       endm
    202  10000 ????
    203  10000 ????				       mac	sbvc
    204  10000 ????				       bvc	{1}
    205  10000 ????				       if	(* ^ {1}) & $FF00
    206  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    207  10000 ????				       err
    208  10000 ????				       endif
    209  10000 ????				       endm
    210  10000 ????
    211  10000 ????				       mac	sbvs
    212  10000 ????				       bvs	{1}
    213  10000 ????				       if	(* ^ {1}) & $FF00
    214  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    215  10000 ????				       err
    216  10000 ????				       endif
    217  10000 ????				       endm
    218  10000 ????
    219  10000 ????						;-------------------------------------------------------
    220  10000 ????						; DIFFERENT PAGE BRANCH CHECK
    221  10000 ????						; Original auther: Darrell Spice, Jr.
    222  10000 ????						;
    223  10000 ????						; Usage: dbeq, dbne, etc just like a normal beq, bne, etc.
    224  10000 ????						;	  A message will be output if the target of the branch
    225  10000 ????						;	  is not on a different page.
    226  10000 ????						;
    227  10000 ????				       mac	dbcc
    228  10000 ????				       bcc	{1}
    229  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    230  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    231  10000 ????				       err
    232  10000 ????				       endif
    233  10000 ????				       endm
    234  10000 ????
    235  10000 ????				       mac	dbcs
    236  10000 ????				       bcs	{1}
    237  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    238  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    239  10000 ????				       err
    240  10000 ????				       endif
    241  10000 ????				       endm
    242  10000 ????
    243  10000 ????				       mac	dbeq
    244  10000 ????				       beq	{1}
    245  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    246  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    247  10000 ????				       err
    248  10000 ????				       endif
    249  10000 ????				       endm
    250  10000 ????
    251  10000 ????				       mac	dbmi
    252  10000 ????				       bmi	{1}
    253  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    254  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    255  10000 ????				       err
    256  10000 ????				       endif
    257  10000 ????				       endm
    258  10000 ????
    259  10000 ????				       mac	dbne
    260  10000 ????				       bne	{1}
    261  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    262  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    263  10000 ????				       err
    264  10000 ????				       endif
    265  10000 ????				       endm
    266  10000 ????
    267  10000 ????				       mac	dbpl
    268  10000 ????				       bpl	{1}
    269  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    270  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    271  10000 ????				       err
    272  10000 ????				       endif
    273  10000 ????				       endm
    274  10000 ????
    275  10000 ????				       mac	dbvc
    276  10000 ????				       bvc	{1}
    277  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    278  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    279  10000 ????				       err
    280  10000 ????				       endif
    281  10000 ????				       endm
    282  10000 ????
    283  10000 ????				       mac	dbvs
    284  10000 ????				       bvs	{1}
    285  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    286  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    287  10000 ????				       err
    288  10000 ????				       endif
    289  10000 ????				       endm
    290  10000 ????
    291  10000 ????						; EOF
------- FILE bomber.asm
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????						;-------------------------------------------------------------------------------
     45  10000 ????						; TIA_BASE_ADDRESS
     46  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     47  10000 ????						; Normally 0, the base address should (externally, before including this file)
     48  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     49  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     50  10000 ????						; < $40 as a bankswitch.
     51  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     52  10000 ????			   -TIA_BASE_ADDRESS =	0
     53  10000 ????				       ENDIF
     54  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     55  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     56  10000 ????						; *OR* by declaring the label before including this file, eg:
     57  10000 ????						; TIA_BASE_ADDRESS = $40
     58  10000 ????						;   include "vcs.h"
     59  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     60  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     61  10000 ????						; for the mirrored ROM hardware registers.
     62  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     63  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     64  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     65  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     66  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     67  10000 ????				       ENDIF
     68  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     69  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     70  10000 ????				       ENDIF
     71  10000 ????						;-------------------------------------------------------------------------------
     72 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     73 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     74 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     75 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     76 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     77 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     78 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     79 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     80 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     81 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     82 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     83 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     84 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     85 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     86 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
     87 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
     88 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
     89 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
     90 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
     91 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
     92 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
     93 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
     94 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
     95 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
     96 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
     97 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
     98 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
     99 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    100 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    101 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    102 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    103 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    104 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    105 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    106 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    107 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    108 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    109 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    110 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    111 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    112 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    113 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    114 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    115 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    116 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    117 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    118 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    119 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    120 U002d							;-------------------------------------------------------------------------------
    121 U000e ????				      SEG.U	TIA_REGISTERS_READ
    122 U0000					      ORG	TIA_BASE_READ_ADDRESS
    123 U0000							;											bit 7	 bit 6
    124 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    125 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    126 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    127 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    128 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    129 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    130 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    131 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    132 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    133 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    134 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    135 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    136 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    137 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    138 U000e							;-------------------------------------------------------------------------------
    139 U0298 ????				      SEG.U	RIOT
    140 U0280					      ORG	$280
    141 U0280							; RIOT MEMORY MAP
    142 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    143 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    144 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    145 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    146 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    147 U0284		       00	   INTIM      ds	1	; $284		Timer output
    148 U0285		       00	   TIMINT     ds	1	; $285
    149 U0286							; Unused/undefined registers ($285-$294)
    150 U0286		       00		      ds	1	; $286
    151 U0287		       00		      ds	1	; $287
    152 U0288		       00		      ds	1	; $288
    153 U0289		       00		      ds	1	; $289
    154 U028a		       00		      ds	1	; $28A
    155 U028b		       00		      ds	1	; $28B
    156 U028c		       00		      ds	1	; $28C
    157 U028d		       00		      ds	1	; $28D
    158 U028e		       00		      ds	1	; $28E
    159 U028f		       00		      ds	1	; $28F
    160 U0290		       00		      ds	1	; $290
    161 U0291		       00		      ds	1	; $291
    162 U0292		       00		      ds	1	; $292
    163 U0293		       00		      ds	1	; $293
    164 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    165 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    166 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    167 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    168 U0298							;-------------------------------------------------------------------------------
    169 U0298							; The following required for back-compatibility with code which does not use
    170 U0298							; segments.
    171  0000 ????				      SEG
    172  0000 ????						; EOF
------- FILE bomber.asm
      5  0000 ????
      6 U009b ????				      seg.u	Variables
      7 U0080					      org	$80
      8 U0080
      9 U0080		       00	   JetXPos    byte.b
     10 U0081		       00	   JetYPos    byte.b
     11 U0082		       00	   BomberXPos byte.b
     12 U0083		       00	   BomberYPos byte.b
     13 U0084		       00	   MissileXPos byte.b
     14 U0085		       00	   MissileYPos byte.b
     15 U0086		       00	   Score      byte.b
     16 U0087		       00	   Timer      byte.b
     17 U0088		       00	   Temp       byte.b
     18 U0089		       00 00	   OnesDigitOffset word.w
     19 U008b		       00 00	   TensDigitOffset word.w
     20 U008d		       00 00	   BallDudePtr word.w
     21 U008f		       00 00	   AdrienPtr  word.w
     22 U0091		       00 00	   BallDudeColPtr word.w
     23 U0093		       00 00	   AdrienColPtr word.w
     24 U0095		       00	   JetAnimOffset byte.b
     25 U0096		       00	   Random     byte.b
     26 U0097		       00	   ScoreSprite byte.b
     27 U0098		       00	   TimerSprite byte.b
     28 U0099		       00	   TerrainColour byte.b
     29 U009a		       00	   RiverColour byte.b
     30 U009b
     31 U009b							; Define constants
     32 U009b		       00 09	   SPRITE_HEIGHT =	9
     33 U009b		       00 05	   DIGIT_HEIGHT =	5
     34 U009b		       00 08	   SCOREBOARD_HEIGHT =	8
     35 U009b
     36  10000 ????				       seg	Code
     37  f000					      org	$F000
     38  f000
     39  f000				   Reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     41  f00b
     42  f00b							; Initialise RAM variables and TIA registers
     43  f00b							; Set initial player coordinates
     44  f00b		       a9 0a		      lda	#10
     45  f00d		       85 81		      sta	JetYPos
     46  f00f		       a9 50		      lda	#80
     47  f011		       85 80		      sta	JetXPos
     48  f013
     49  f013							; Set initial bomber coordinates
     50  f013							; Basically just some random coordinates as placeholder lol
     51  f013		       a9 53		      lda	#83
     52  f015		       85 83		      sta	BomberYPos
     53  f017		       a9 50		      lda	#80
     54  f019		       85 82		      sta	BomberXPos
     55  f01b
     56  f01b		       a9 d4		      lda	#%11010100
     57  f01d		       85 96		      sta	Random
     58  f01f
     59  f01f		       a9 00		      lda	#0
     60  f021		       85 86		      sta	Score
     61  f023		       85 87		      sta	Timer
     62  f025
     63  f025							; Declare macros
     64  f025					      MAC	draw_missile
     65  f025					      lda	#0
     66  f025							; x contains the scanline number
     67  f025					      cpx	MissileYPos
     68  f025					      bne	.SkipMissileDraw
     69  f025				   .DrawMissile
     70  f025					      lda	#%00000010	; Enable missile 0
     71  f025					      inc	MissileYPos
     72  f025				   .SkipMissileDraw
     73  f025					      sta	ENAM0	; Store correct value in TIA missile register
     74  f025					      ENDM
     75  f025
     76  f025							; Initialise sprite and palette pointers
     77  f025		       a9 36		      lda	#<BallDude
     78  f027		       85 8d		      sta	BallDudePtr
     79  f029		       a9 f3		      lda	#>BallDude
     80  f02b		       85 8e		      sta	BallDudePtr+1
     81  f02d
     82  f02d		       a9 48		      lda	#<Adrien
     83  f02f		       85 8f		      sta	AdrienPtr
     84  f031		       a9 f3		      lda	#>Adrien
     85  f033		       85 90		      sta	AdrienPtr+1
     86  f035
     87  f035		       a9 51		      lda	#<BallDudeCol
     88  f037		       85 91		      sta	BallDudeColPtr
     89  f039		       a9 f3		      lda	#>BallDudeCol
     90  f03b		       85 92		      sta	BallDudeColPtr+1
     91  f03d
     92  f03d		       a9 63		      lda	#<AdrienCol
     93  f03f		       85 93		      sta	AdrienColPtr
     94  f041		       a9 f3		      lda	#>AdrienCol
     95  f043		       85 94		      sta	AdrienColPtr+1
     96  f045
     97  f045							; Begin rendering
     98  f045				   StartFrame
     99  f045							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    100  f045							; Pre-vblank calculations
    101  f045							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    102  f045							; Turn on vblank and vsync
    103  f045		       a2 02		      ldx	#2
    104  f047		       86 01		      stx	VBLANK
    105  f049		       86 00		      stx	VSYNC
    106  f04b					      REPEAT	3
    107  f04b		       86 02		      stx	WSYNC
    106  f04b					      REPEND
    107  f04d		       86 02		      stx	WSYNC
    106  f04d					      REPEND
    107  f04f		       86 02		      stx	WSYNC
    108  f051					      REPEND
    109  f051							; Turn off vsync
    110  f051		       a2 00		      ldx	#0
    111  f053		       86 00		      stx	VSYNC
    112  f055
    113  f055							; Render VBLANK
    114  f055					      REPEAT	33
    115  f055		       86 02		      stx	WSYNC
    114  f055					      REPEND
    115  f057		       86 02		      stx	WSYNC
    114  f057					      REPEND
    115  f059		       86 02		      stx	WSYNC
    114  f059					      REPEND
    115  f05b		       86 02		      stx	WSYNC
    114  f05b					      REPEND
    115  f05d		       86 02		      stx	WSYNC
    114  f05d					      REPEND
    115  f05f		       86 02		      stx	WSYNC
    114  f05f					      REPEND
    115  f061		       86 02		      stx	WSYNC
    114  f061					      REPEND
    115  f063		       86 02		      stx	WSYNC
    114  f063					      REPEND
    115  f065		       86 02		      stx	WSYNC
    114  f065					      REPEND
    115  f067		       86 02		      stx	WSYNC
    114  f067					      REPEND
    115  f069		       86 02		      stx	WSYNC
    114  f069					      REPEND
    115  f06b		       86 02		      stx	WSYNC
    114  f06b					      REPEND
    115  f06d		       86 02		      stx	WSYNC
    114  f06d					      REPEND
    115  f06f		       86 02		      stx	WSYNC
    114  f06f					      REPEND
    115  f071		       86 02		      stx	WSYNC
    114  f071					      REPEND
    115  f073		       86 02		      stx	WSYNC
    114  f073					      REPEND
    115  f075		       86 02		      stx	WSYNC
    114  f075					      REPEND
    115  f077		       86 02		      stx	WSYNC
    114  f077					      REPEND
    115  f079		       86 02		      stx	WSYNC
    114  f079					      REPEND
    115  f07b		       86 02		      stx	WSYNC
    114  f07b					      REPEND
    115  f07d		       86 02		      stx	WSYNC
    114  f07d					      REPEND
    115  f07f		       86 02		      stx	WSYNC
    114  f07f					      REPEND
    115  f081		       86 02		      stx	WSYNC
    114  f081					      REPEND
    115  f083		       86 02		      stx	WSYNC
    114  f083					      REPEND
    115  f085		       86 02		      stx	WSYNC
    114  f085					      REPEND
    115  f087		       86 02		      stx	WSYNC
    114  f087					      REPEND
    115  f089		       86 02		      stx	WSYNC
    114  f089					      REPEND
    115  f08b		       86 02		      stx	WSYNC
    114  f08b					      REPEND
    115  f08d		       86 02		      stx	WSYNC
    114  f08d					      REPEND
    115  f08f		       86 02		      stx	WSYNC
    114  f08f					      REPEND
    115  f091		       86 02		      stx	WSYNC
    114  f091					      REPEND
    115  f093		       86 02		      stx	WSYNC
    114  f093					      REPEND
    115  f095		       86 02		      stx	WSYNC
    116  f097					      REPEND
    117  f097
    118  f097		       a5 80		      lda	JetXPos
    119  f099		       a0 00		      ldy	#0	; Corresponds to P0
    120  f09b		       20 7b f2 	      jsr	SetObjXPos
    121  f09e
    122  f09e		       a5 82		      lda	BomberXPos
    123  f0a0		       a0 01		      ldy	#1	; Corresponds to p1
    124  f0a2		       20 7b f2 	      jsr	SetObjXPos
    125  f0a5
    126  f0a5		       a5 84		      lda	MissileXPos
    127  f0a7		       a0 02		      ldy	#2	; Corresponds to missile0
    128  f0a9		       20 7b f2 	      jsr	SetObjXPos
    129  f0ac
    130  f0ac		       20 c3 f2 	      jsr	CalculateDigitOffset	; Calculate scoreboard digit lookup table offset
    131  f0af
    132  f0af							; Poke registers
    133  f0af		       85 02		      sta	WSYNC
    134  f0b1		       85 2a		      sta	HMOVE
    135  f0b3
    136  f0b3		       a2 00		      ldx	#0
    137  f0b5							; Turn off VBLANK
    138  f0b5		       86 01		      stx	VBLANK
    139  f0b7
    140  f0b7							; Render scoreboard
    141  f0b7							; Clear playfield registers so nothing is drawn
    142  f0b7		       a9 00		      lda	#0
    143  f0b9		       85 0d		      sta	PF0
    144  f0bb		       85 0e		      sta	PF1
    145  f0bd		       85 0f		      sta	PF2
    146  f0bf		       85 1b		      sta	GRP0
    147  f0c1		       85 1c		      sta	GRP1
    148  f0c3		       85 0a		      sta	CTRLPF
    149  f0c5		       85 09		      sta	COLUBK
    150  f0c7
    151  f0c7							; Set playfield colour
    152  f0c7		       a9 1e		      lda	#$1E
    153  f0c9		       85 08		      sta	COLUPF
    154  f0cb
    155  f0cb							; Draw the scoreboard
    156  f0cb		       a2 05		      ldx	#DIGIT_HEIGHT
    157  f0cd				   .ScoreDigitLoop
    158  f0cd		       a4 8b		      ldy	TensDigitOffset
    159  f0cf		       b9 e6 f2 	      lda	Digits,Y
    160  f0d2		       29 f0		      and	#$F0	; Mask the graphics for the ones digits
    161  f0d4		       85 97		      sta	ScoreSprite
    162  f0d6
    163  f0d6		       a4 89		      ldy	OnesDigitOffset
    164  f0d8		       b9 e6 f2 	      lda	Digits,Y
    165  f0db		       29 0f		      and	#$0F	; Mask the graphics for the tens digits
    166  f0dd		       05 97		      ora	ScoreSprite
    167  f0df		       85 97		      sta	ScoreSprite
    168  f0e1
    169  f0e1		       85 02		      sta	WSYNC	; poke
    170  f0e3		       85 0e		      sta	PF1	; Display score sprite
    171  f0e5
    172  f0e5		       a4 8c		      ldy	TensDigitOffset+1	; Tens digit for the timer
    173  f0e7		       b9 e6 f2 	      lda	Digits,Y
    174  f0ea		       29 f0		      and	#$F0
    175  f0ec		       85 98		      sta	TimerSprite
    176  f0ee
    177  f0ee		       a4 8a		      ldy	OnesDigitOffset+1
    178  f0f0		       b9 e6 f2 	      lda	Digits,Y
    179  f0f3		       29 0f		      and	#$0F
    180  f0f5		       05 98		      ora	TimerSprite
    181  f0f7		       85 98		      sta	TimerSprite
    182  f0f9
    183  f0f9							; Waste clock cycles
    184  f0f9		       20 e5 f2 	      jsr	Sleep12Cycles
    185  f0fc
    186  f0fc		       85 0e		      sta	PF1
    187  f0fe
    188  f0fe							; 2-kernel display so strobe
    189  f0fe		       a4 97		      ldy	ScoreSprite
    190  f100		       85 02		      sta	WSYNC
    191  f102
    192  f102		       84 0e		      sty	PF1
    193  f104		       e6 8b		      inc	TensDigitOffset
    194  f106		       e6 8c		      inc	TensDigitOffset+1
    195  f108		       e6 89		      inc	OnesDigitOffset
    196  f10a		       e6 8a		      inc	OnesDigitOffset+1
    197  f10c
    198  f10c		       20 e5 f2 	      jsr	Sleep12Cycles
    199  f10f
    200  f10f		       ca		      dex
    201  f110		       85 0e		      sta	PF1
    202  f112		       d0 b9		      bne	.ScoreDigitLoop
    203  f114
    204  f114		       85 02		      sta	WSYNC
    205  f116
    206  f116							; Add padding under the scoreboard
    207  f116		       a9 00		      lda	#0
    208  f118		       85 0d		      sta	PF0
    209  f11a		       85 0e		      sta	PF1
    210  f11c		       85 0f		      sta	PF2
    211  f11e		       85 02		      sta	WSYNC
    212  f120		       85 02		      sta	WSYNC
    213  f122		       85 02		      sta	WSYNC
    214  f124
    215  f124							; Render the visible scanlines
    216  f124				   VisibleScanlines
    217  f124							; Set background colour
    218  f124		       a5 9a		      lda	RiverColour
    219  f126		       85 09		      sta	COLUBK
    220  f128							; Set playfield colour
    221  f128		       a5 99		      lda	TerrainColour
    222  f12a		       85 08		      sta	COLUPF
    223  f12c
    224  f12c							; Setup playfield
    225  f12c		       a9 f0		      lda	#%11110000	; PF0 uses first 4 bits and is reversed
    226  f12e		       85 0d		      sta	PF0
    227  f130		       a9 c0		      lda	#%11000000
    228  f132		       85 0e		      sta	PF1
    229  f134		       a9 00		      lda	#0
    230  f136		       85 0f		      sta	PF2
    231  f138
    232  f138							; Playfield reflection
    233  f138		       a9 01		      lda	#%00000001
    234  f13a		       85 0a		      sta	CTRLPF
    235  f13c
    236  f13c							; Number of remaining scanlines
    237  f13c		       a2 55		      ldx	#85
    238  f13e
    239  f13e							; Render the 96 visible scanline
    240  f13e							; Using a 2 line kernel
    241  f13e				   .GameLineLoop
      0  f13e					      DRAW_MISSILE		; Macro to see if we will draw the missile
      1  f13e		       a9 00		      lda	#0
      2  f140
      3  f140		       e4 85		      cpx	MissileYPos
      4  f142		       d0 04		      bne	.SkipMissileDraw
      5  f144				   .DrawMissile
      6  f144		       a9 02		      lda	#%00000010
      7  f146		       e6 85		      inc	MissileYPos
      8  f148				   .SkipMissileDraw
      9  f148		       85 1d		      sta	ENAM0
    243  f14a				   .InsideBallDude
    244  f14a		       8a		      txa
    245  f14b		       38		      sec
    246  f14c		       e5 81		      sbc	JetYPos
    247  f14e		       c5 09		      cmp	SPRITE_HEIGHT
    248  f150		       90 02		      bcc	.DrawSpriteP0
    249  f152		       a9 00		      lda	#0
    250  f154
    251  f154				   .DrawSpriteP0
    252  f154		       18		      clc
    253  f155		       65 95		      adc	JetAnimOffset
    254  f157		       a8		      tay
    255  f158		       b1 8d		      lda	(BallDudePtr),Y	; Y register is only register that can work with pointers
    256  f15a		       85 02		      sta	WSYNC	; Wait for scanline
    257  f15c		       85 1b		      sta	GRP0	; Set graphics for P0
    258  f15e		       b1 91		      lda	(BallDudeColPtr),Y
    259  f160		       85 06		      sta	COLUP0
    260  f162
    261  f162				   .InsideAdrien
    262  f162		       8a		      txa
    263  f163		       38		      sec
    264  f164		       e5 83		      sbc	BomberYPos
    265  f166		       c5 09		      cmp	SPRITE_HEIGHT
    266  f168		       90 02		      bcc	.DrawSpriteP1
    267  f16a		       a9 00		      lda	#0
    268  f16c
    269  f16c				   .DrawSpriteP1
    270  f16c		       a8		      tay
    271  f16d
    272  f16d							; Set Adrien to be thicc because it'll be funny idk
    273  f16d		       a9 07		      lda	#%00000111
    274  f16f		       85 05		      sta	NUSIZ1
    275  f171		       98		      tya
    276  f172
    277  f172		       b1 8f		      lda	(AdrienPtr),Y	; Y register is only register that can work with pointers
    278  f174		       85 02		      sta	WSYNC	; Wait for scanline
    279  f176		       85 1c		      sta	GRP1	; Set graphics for P0
    280  f178		       b1 93		      lda	(AdrienColPtr),Y
    281  f17a		       85 07		      sta	COLUP1
    282  f17c
    283  f17c		       ca		      dex
    284  f17d		       d0 bf		      bne	.GameLineLoop
    285  f17f
    286  f17f		       85 02		      sta	WSYNC
    287  f181
    288  f181							; Display vblank
    289  f181				   Overscan
    290  f181		       a9 02		      lda	#2
    291  f183		       85 01		      sta	VBLANK
    292  f185					      REPEAT	30
    293  f185		       85 02		      sta	WSYNC
    292  f185					      REPEND
    293  f187		       85 02		      sta	WSYNC
    292  f187					      REPEND
    293  f189		       85 02		      sta	WSYNC
    292  f189					      REPEND
    293  f18b		       85 02		      sta	WSYNC
    292  f18b					      REPEND
    293  f18d		       85 02		      sta	WSYNC
    292  f18d					      REPEND
    293  f18f		       85 02		      sta	WSYNC
    292  f18f					      REPEND
    293  f191		       85 02		      sta	WSYNC
    292  f191					      REPEND
    293  f193		       85 02		      sta	WSYNC
    292  f193					      REPEND
    293  f195		       85 02		      sta	WSYNC
    292  f195					      REPEND
    293  f197		       85 02		      sta	WSYNC
    292  f197					      REPEND
    293  f199		       85 02		      sta	WSYNC
    292  f199					      REPEND
    293  f19b		       85 02		      sta	WSYNC
    292  f19b					      REPEND
    293  f19d		       85 02		      sta	WSYNC
    292  f19d					      REPEND
    293  f19f		       85 02		      sta	WSYNC
    292  f19f					      REPEND
    293  f1a1		       85 02		      sta	WSYNC
    292  f1a1					      REPEND
    293  f1a3		       85 02		      sta	WSYNC
    292  f1a3					      REPEND
    293  f1a5		       85 02		      sta	WSYNC
    292  f1a5					      REPEND
    293  f1a7		       85 02		      sta	WSYNC
    292  f1a7					      REPEND
    293  f1a9		       85 02		      sta	WSYNC
    292  f1a9					      REPEND
    293  f1ab		       85 02		      sta	WSYNC
    292  f1ab					      REPEND
    293  f1ad		       85 02		      sta	WSYNC
    292  f1ad					      REPEND
    293  f1af		       85 02		      sta	WSYNC
    292  f1af					      REPEND
    293  f1b1		       85 02		      sta	WSYNC
    292  f1b1					      REPEND
    293  f1b3		       85 02		      sta	WSYNC
    292  f1b3					      REPEND
    293  f1b5		       85 02		      sta	WSYNC
    292  f1b5					      REPEND
    293  f1b7		       85 02		      sta	WSYNC
    292  f1b7					      REPEND
    293  f1b9		       85 02		      sta	WSYNC
    292  f1b9					      REPEND
    293  f1bb		       85 02		      sta	WSYNC
    292  f1bb					      REPEND
    293  f1bd		       85 02		      sta	WSYNC
    292  f1bd					      REPEND
    293  f1bf		       85 02		      sta	WSYNC
    294  f1c1					      REPEND
    295  f1c1
    296  f1c1		       a9 00		      lda	#0
    297  f1c3		       85 01		      sta	VBLANK
    298  f1c5
    299  f1c5							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    300  f1c5							; Joystick input
    301  f1c5							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    302  f1c5		       a6 80		      ldx	JetXPos
    303  f1c7				   CheckP0Up
    304  f1c7		       a9 10		      lda	#%00010000
    305  f1c9		       2c 80 02 	      bit	SWCHA
    306  f1cc		       d0 02		      bne	CheckP0Down
    307  f1ce		       e6 81		      inc	JetYPos
    308  f1d0				   CheckP0Down
    309  f1d0		       a9 20		      lda	#%00100000
    310  f1d2		       2c 80 02 	      bit	SWCHA
    311  f1d5		       d0 02		      bne	ClampYHigh
    312  f1d7		       c6 81		      dec	JetYPos
    313  f1d9				   ClampYHigh
    314  f1d9							; Here we will limit jet's y-range
    315  f1d9							; Max y is 96, min y is 0
    316  f1d9		       18		      clc
    317  f1da		       a5 81		      lda	JetYPos
    318  f1dc		       c9 4c		      cmp	#76
    319  f1de		       90 04		      bcc	ClampYLow
    320  f1e0		       a9 4c		      lda	#76
    321  f1e2		       85 81		      sta	JetYPos
    322  f1e4				   ClampYLow
    323  f1e4		       18		      clc
    324  f1e5		       a9 01		      lda	#1
    325  f1e7		       c5 81		      cmp	JetYPos
    326  f1e9		       90 02		      bcc	CheckP0Left
    327  f1eb		       85 81		      sta	JetYPos
    328  f1ed				   CheckP0Left
    329  f1ed							; Store the X position so we can restore it if we collide with the playfield
    330  f1ed		       a4 80		      ldy	JetXPos
    331  f1ef		       a9 40		      lda	#%01000000
    332  f1f1		       2c 80 02 	      bit	SWCHA
    333  f1f4		       d0 02		      bne	CheckP0Right
    334  f1f6		       c6 80		      dec	JetXPos
    335  f1f8				   CheckP0Right
    336  f1f8		       a9 80		      lda	#%10000000
    337  f1fa		       2c 80 02 	      bit	SWCHA
    338  f1fd		       d0 02		      bne	ClampXPos
    339  f1ff		       e6 80		      inc	JetXPos
    340  f201				   ClampXPos
    341  f201							; Check if we've collided with the playfield and if we have restore our X position to that saved in the y register
    342  f201		       a9 80		      lda	#%10000000
    343  f203		       24 02		      bit	CXP0FB
    344  f205		       f0 0f		      beq	CheckButtonPressed	;Zero flag is set if a&bit is zero (lol)
    345  f207							; This will restore the jet x position from the y register if we have hit the playfield
    346  f207		       98		      tya
    347  f208							; Collisions are precise so we need to account for different collision masks
    348  f208							; The moving sprite and static sprite are 1 pixel different
    349  f208		       18		      clc
    350  f209		       c9 50		      cmp	#80
    351  f20b		       b0 05		      bcs	ShiftRight
    352  f20d		       69 01		      adc	#1
    353  f20f		       4c 14 f2 	      jmp	UpdateJetPos
    354  f212				   ShiftRight
    355  f212		       e9 01		      sbc	#1
    356  f214				   UpdateJetPos
    357  f214		       85 80		      sta	JetXPos
    358  f216				   CheckButtonPressed
    359  f216		       a9 80		      lda	#%10000000
    360  f218		       24 0c		      bit	INPT4
    361  f21a		       d0 0e		      bne	NoInput
    362  f21c							; Set missile coorindates
    363  f21c		       a5 80		      lda	JetXPos
    364  f21e		       18		      clc
    365  f21f		       69 05		      adc	#5
    366  f221		       85 84		      sta	MissileXPos
    367  f223		       a5 81		      lda	JetYPos
    368  f225		       18		      clc
    369  f226		       69 05		      adc	#5
    370  f228		       85 85		      sta	MissileYPos
    371  f22a
    372  f22a				   NoInput
    373  f22a		       a9 00		      lda	#0
    374  f22c		       85 95		      sta	JetAnimOffset
    375  f22e		       e4 80		      cpx	JetXPos
    376  f230		       f0 04		      beq	NoChange
    377  f232							; Set the sprite pointer to BallDude Turning
    378  f232		       a5 09		      lda	SPRITE_HEIGHT
    379  f234		       85 95		      sta	JetAnimOffset
    380  f236				   NoChange
    381  f236
    382  f236				   UpdateBomberPosition
    383  f236		       18		      clc
    384  f237		       a5 83		      lda	BomberYPos
    385  f239		       c9 00		      cmp	#0
    386  f23b		       30 05		      bmi	.ResetBomberPosition
    387  f23d
    388  f23d		       c6 83		      dec	BomberYPos
    389  f23f		       4c 45 f2 	      jmp	EndPositionUpdate
    390  f242
    391  f242				   .ResetBomberPosition
    392  f242		       20 9c f2 	      jsr	SpawnBomber
    393  f245
    394  f245				   EndPositionUpdate
    395  f245							; Collision checks
    396  f245				   CheckCollisionP0P1
    397  f245		       a9 80		      lda	#%10000000
    398  f247		       24 07		      bit	CXPPMM
    399  f249		       d0 06		      bne	.CollisionP0P1	; Zero flag is set if a&bit is zero (lol)
    400  f24b		       20 72 f2 	      jsr	SetTerrainRiverColour
    401  f24e		       4c 54 f2 	      jmp	.CheckCollisionM0P1
    402  f251				   .CollisionP0P1
    403  f251		       20 8f f2 	      jsr	GameOver
    404  f254				   .CheckCollisionM0P1
    405  f254		       a9 80		      lda	#%10000000
    406  f256		       24 00		      bit	CXM0P
    407  f258		       d0 03		      bne	.CollisionM0P1
    408  f25a		       4c 6d f2 	      jmp	EndCollisionCheck
    409  f25d				   .CollisionM0P1
    410  f25d		       20 9c f2 	      jsr	SpawnBomber
    411  f260		       f8		      sed
    412  f261		       18		      clc
    413  f262		       a5 86		      lda	Score
    414  f264		       69 01		      adc	#1
    415  f266		       85 86		      sta	Score
    416  f268		       d8		      cld
    417  f269		       a9 00		      lda	#0
    418  f26b		       85 85		      sta	MissileYPos
    419  f26d
    420  f26d				   EndCollisionCheck
    421  f26d		       85 2c		      sta	CXCLR	; Poke clear collision check register
    422  f26f							; Loop forever
    423  f26f		       4c 45 f0 	      jmp	StartFrame
    424  f272
    425  f272							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    426  f272							; Set terrain/river colour to green/blue
    427  f272							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    428  f272				   SetTerrainRiverColour subroutine
    429  f272		       a9 c2		      lda	#$C2
    430  f274		       85 99		      sta	TerrainColour
    431  f276		       a9 84		      lda	#$84
    432  f278		       85 9a		      sta	RiverColour
    433  f27a
    434  f27a		       60		      rts
    435  f27b
    436  f27b
    437  f27b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    438  f27b							; accumulator contains x-posiiton
    439  f27b							; y register contains object (0:player0, 1:player1, 2:missile0, 3:missile1, 4:ball)
    440  f27b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    441  f27b				   SetObjXPos subroutine
    442  f27b		       85 02		      sta	WSYNC
    443  f27d		       38		      sec
    444  f27e				   .DivideLoop
    445  f27e		       e9 0f		      sbc	#15
    446  f280		       b0 fc		      bcs	.DivideLoop	; loop while carry is set
    447  f282
    448  f282		       49 07		      eor	#7	; exclusive OR with accumulator
    449  f284							; A will be between -8 and 7
    450  f284					      REPEAT	4
    451  f284		       0a		      asl		; bitshift a, HMP0 uses only 4 bits
    450  f284					      REPEND
    451  f285		       0a		      asl		; bitshift a, HMP0 uses only 4 bits
    450  f285					      REPEND
    451  f286		       0a		      asl		; bitshift a, HMP0 uses only 4 bits
    450  f286					      REPEND
    451  f287		       0a		      asl		; bitshift a, HMP0 uses only 4 bits
    452  f288					      REPEND
    453  f288
    454  f288		       99 20 00 	      sta	HMP0,Y	; set fine position value
    455  f28b		       99 10 00 	      sta	RESP0,Y	; set coarse position value
    456  f28e		       60		      rts
    457  f28f
    458  f28f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    459  f28f							; GameOver Subroutine
    460  f28f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    461  f28f				   GameOver   subroutine
    462  f28f							; Set background to red for one frame
    463  f28f		       a9 30		      lda	#$30
    464  f291		       85 99		      sta	TerrainColour
    465  f293		       85 9a		      sta	RiverColour
    466  f295
    467  f295		       a9 00		      lda	#0
    468  f297		       85 86		      sta	Score
    469  f299		       85 87		      sta	Timer
    470  f29b
    471  f29b		       60		      rts
    472  f29c
    473  f29c
    474  f29c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    475  f29c							; generate random number using LFSR
    476  f29c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    477  f29c				   SpawnBomber subroutine
    478  f29c							; The LFSR
    479  f29c		       a5 96		      lda	Random
    480  f29e		       0a		      asl
    481  f29f		       45 96		      eor	Random
    482  f2a1		       0a		      asl
    483  f2a2		       45 96		      eor	Random
    484  f2a4		       0a		      asl
    485  f2a5		       0a		      asl
    486  f2a6		       45 96		      eor	Random
    487  f2a8		       0a		      asl
    488  f2a9		       26 96		      rol	Random
    489  f2ab
    490  f2ab							; Divide by 4 to match playfield size
    491  f2ab		       4a		      lsr
    492  f2ac		       4a		      lsr
    493  f2ad		       85 82		      sta	BomberXPos
    494  f2af		       a9 1e		      lda	#30	; Add 30 for playfield bounds
    495  f2b1		       65 82		      adc	BomberXPos
    496  f2b3		       85 82		      sta	BomberXPos
    497  f2b5
    498  f2b5		       a9 60		      lda	#96
    499  f2b7		       85 83		      sta	BomberYPos
    500  f2b9
    501  f2b9				   .SetScoreValues
    502  f2b9		       f8		      sed		; Turn on decimal mode
    503  f2ba		       a5 87		      lda	Timer
    504  f2bc		       18		      clc
    505  f2bd		       69 01		      adc	#1
    506  f2bf		       85 87		      sta	Timer
    507  f2c1		       d8		      cld		; Turn off decimal mode
    508  f2c2		       60		      rts
    509  f2c3
    510  f2c3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    511  f2c3							; Set scoreboard digits to be displayed to screen
    512  f2c3							; We do it in hex because it's easier or something idk lol
    513  f2c3							; I'll probably come back to this to try make a decimal display
    514  f2c3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    515  f2c3				   CalculateDigitOffset subroutine
    516  f2c3		       a2 01		      ldx	#1
    517  f2c5				   .PrepareScoreLoop
    518  f2c5							; Ones digit
    519  f2c5		       b5 86		      lda	Score,X	; Timer when x = 1
    520  f2c7		       29 0f		      and	#%00001111
    521  f2c9		       85 88		      sta	Temp
    522  f2cb		       0a		      asl
    523  f2cc		       0a		      asl
    524  f2cd		       65 88		      adc	Temp
    525  f2cf		       95 89		      sta	OnesDigitOffset,X
    526  f2d1							; Tens digit
    527  f2d1		       b5 86		      lda	Score,X
    528  f2d3		       29 f0		      and	#%11110000
    529  f2d5		       85 88		      sta	Temp
    530  f2d7		       4a		      lsr
    531  f2d8		       4a		      lsr
    532  f2d9		       85 88		      sta	Temp
    533  f2db		       4a		      lsr
    534  f2dc		       4a		      lsr
    535  f2dd		       65 88		      adc	Temp
    536  f2df		       95 8b		      sta	TensDigitOffset,X
    537  f2e1
    538  f2e1		       ca		      dex
    539  f2e2		       10 e1		      bpl	.PrepareScoreLoop
    540  f2e4		       60		      rts
    541  f2e5
    542  f2e5							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    543  f2e5							; Sleep 12 cycles
    544  f2e5							; jsr takes 6 cycle, rts takes 6 cycles
    545  f2e5							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    546  f2e5				   Sleep12Cycles subroutine
    547  f2e5		       60		      rts
    548  f2e6
    549  f2e6
    550  f2e6							; Sprites
    551  f2e6				   Digits
    552  f2e6		       77		      .byte.b	%01110111	; ### ###
    553  f2e7		       55		      .byte.b	%01010101	; # # # #
    554  f2e8		       55		      .byte.b	%01010101	; # # # #
    555  f2e9		       55		      .byte.b	%01010101	; # # # #
    556  f2ea		       77		      .byte.b	%01110111	; ### ###
    557  f2eb
    558  f2eb		       11		      .byte.b	%00010001	;   #	 #
    559  f2ec		       11		      .byte.b	%00010001	;   #	 #
    560  f2ed		       11		      .byte.b	%00010001	;   #	 #
    561  f2ee		       11		      .byte.b	%00010001	;   #	 #
    562  f2ef		       11		      .byte.b	%00010001	;   #	 #
    563  f2f0
    564  f2f0		       77		      .byte.b	%01110111	; ### ###
    565  f2f1		       11		      .byte.b	%00010001	;   #	 #
    566  f2f2		       77		      .byte.b	%01110111	; ### ###
    567  f2f3		       44		      .byte.b	%01000100	; #   #
    568  f2f4		       77		      .byte.b	%01110111	; ### ###
    569  f2f5
    570  f2f5		       77		      .byte.b	%01110111	; ### ###
    571  f2f6		       11		      .byte.b	%00010001	;   #	 #
    572  f2f7		       33		      .byte.b	%00110011	;  ##	##
    573  f2f8		       11		      .byte.b	%00010001	;   #	 #
    574  f2f9		       77		      .byte.b	%01110111	; ### ###
    575  f2fa
    576  f2fa		       55		      .byte.b	%01010101	; # # # #
    577  f2fb		       55		      .byte.b	%01010101	; # # # #
    578  f2fc		       77		      .byte.b	%01110111	; ### ###
    579  f2fd		       11		      .byte.b	%00010001	;   #	 #
    580  f2fe		       11		      .byte.b	%00010001	;   #	 #
    581  f2ff
    582  f2ff		       77		      .byte.b	%01110111	; ### ###
    583  f300		       44		      .byte.b	%01000100	; #   #
    584  f301		       77		      .byte.b	%01110111	; ### ###
    585  f302		       11		      .byte.b	%00010001	;   #	 #
    586  f303		       77		      .byte.b	%01110111	; ### ###
    587  f304
    588  f304		       77		      .byte.b	%01110111	; ### ###
    589  f305		       44		      .byte.b	%01000100	; #   #
    590  f306		       77		      .byte.b	%01110111	; ### ###
    591  f307		       55		      .byte.b	%01010101	; # # # #
    592  f308		       77		      .byte.b	%01110111	; ### ###
    593  f309
    594  f309		       77		      .byte.b	%01110111	; ### ###
    595  f30a		       11		      .byte.b	%00010001	;   #	 #
    596  f30b		       11		      .byte.b	%00010001	;   #	 #
    597  f30c		       11		      .byte.b	%00010001	;   #	 #
    598  f30d		       11		      .byte.b	%00010001	;   #	 #
    599  f30e
    600  f30e		       77		      .byte.b	%01110111	; ### ###
    601  f30f		       55		      .byte.b	%01010101	; # # # #
    602  f310		       77		      .byte.b	%01110111	; ### ###
    603  f311		       55		      .byte.b	%01010101	; # # # #
    604  f312		       77		      .byte.b	%01110111	; ### ###
    605  f313
    606  f313		       77		      .byte.b	%01110111	; ### ###
    607  f314		       55		      .byte.b	%01010101	; # # # #
    608  f315		       77		      .byte.b	%01110111	; ### ###
    609  f316		       11		      .byte.b	%00010001	;   #	 #
    610  f317		       77		      .byte.b	%01110111	; ### ###
    611  f318
    612  f318		       22		      .byte.b	%00100010	;  #	#
    613  f319		       55		      .byte.b	%01010101	; # # # #
    614  f31a		       77		      .byte.b	%01110111	; ### ###
    615  f31b		       55		      .byte.b	%01010101	; # # # #
    616  f31c		       55		      .byte.b	%01010101	; # # # #
    617  f31d
    618  f31d		       77		      .byte.b	%01110111	; ### ###
    619  f31e		       55		      .byte.b	%01010101	; # # # #
    620  f31f		       66		      .byte.b	%01100110	; ##  ##
    621  f320		       55		      .byte.b	%01010101	; # # # #
    622  f321		       77		      .byte.b	%01110111	; ### ###
    623  f322
    624  f322		       77		      .byte.b	%01110111	; ### ###
    625  f323		       44		      .byte.b	%01000100	; #   #
    626  f324		       44		      .byte.b	%01000100	; #   #
    627  f325		       44		      .byte.b	%01000100	; #   #
    628  f326		       77		      .byte.b	%01110111	; ### ###
    629  f327
    630  f327		       66		      .byte.b	%01100110	; ##  ##
    631  f328		       55		      .byte.b	%01010101	; # # # #
    632  f329		       55		      .byte.b	%01010101	; # # # #
    633  f32a		       55		      .byte.b	%01010101	; # # # #
    634  f32b		       66		      .byte.b	%01100110	; ##  ##
    635  f32c
    636  f32c		       77		      .byte.b	%01110111	; ### ###
    637  f32d		       44		      .byte.b	%01000100	; #   #
    638  f32e		       77		      .byte.b	%01110111	; ### ###
    639  f32f		       44		      .byte.b	%01000100	; #   #
    640  f330		       77		      .byte.b	%01110111	; ### ###
    641  f331
    642  f331		       77		      .byte.b	%01110111	; ### ###
    643  f332		       44		      .byte.b	%01000100	; #   #
    644  f333		       66		      .byte.b	%01100110	; ##  ##
    645  f334		       44		      .byte.b	%01000100	; #   #
    646  f335		       44		      .byte.b	%01000100	; #   #
    647  f336
    648  f336				   BallDude
    649  f336		       00		      .byte.b	#%00000000
    650  f337		       7e		      .byte.b	#%01111110	;$5A
    651  f338		       ff		      .byte.b	#%11111111	;$5A
    652  f339		       ff		      .byte.b	#%11111111	;$58
    653  f33a		       ff		      .byte.b	#%11111111	;$56
    654  f33b		       9f		      .byte.b	#%10011111	;$54
    655  f33c		       db		      .byte.b	#%11011011	;$54
    656  f33d		       fb		      .byte.b	#%11111011	;$52
    657  f33e		       76		      .byte.b	#%01110110	;$52
    658  f33f				   BallDudeTurning
    659  f33f		       00		      .byte.b	#%00000000
    660  f340		       18		      .byte.b	#%00011000	;$5A
    661  f341		       3c		      .byte.b	#%00111100	;$58
    662  f342		       7e		      .byte.b	#%01111110	;$56
    663  f343		       7e		      .byte.b	#%01111110	;$54
    664  f344		       4a		      .byte.b	#%01001010	;$54
    665  f345		       6a		      .byte.b	#%01101010	;$52
    666  f346		       34		      .byte.b	#%00110100	;$52
    667  f347		       18		      .byte.b	#%00011000	;$52
    668  f348				   Adrien
    669  f348		       00		      .byte.b	#%00000000
    670  f349		       ff		      .byte.b	#%11111111	;$16
    671  f34a		       e7		      .byte.b	#%11100111	;$16
    672  f34b		       e7		      .byte.b	#%11100111	;$18
    673  f34c		       7e		      .byte.b	#%01111110	;$18
    674  f34d		       5a		      .byte.b	#%01011010	;$1A
    675  f34e		       3c		      .byte.b	#%00111100	;$1A
    676  f34f		       3c		      .byte.b	#%00111100	;$1C
    677  f350		       18		      .byte.b	#%00011000	;$1C
    678  f351
    679  f351				   BallDudeCol
    680  f351		       00		      .byte.b	#$00
    681  f352		       5a		      .byte.b	#$5A	;
    682  f353		       58		      .byte.b	#$58	;
    683  f354		       56		      .byte.b	#$56	;
    684  f355		       54		      .byte.b	#$54	;
    685  f356		       54		      .byte.b	#$54	;
    686  f357		       52		      .byte.b	#$52	;
    687  f358		       52		      .byte.b	#$52	;
    688  f359		       52		      .byte.b	#$52	;
    689  f35a				   BallDudeTurningCol
    690  f35a		       00		      .byte.b	#$00
    691  f35b		       5a		      .byte.b	#$5A	;
    692  f35c		       58		      .byte.b	#$58	;
    693  f35d		       56		      .byte.b	#$56	;
    694  f35e		       54		      .byte.b	#$54	;
    695  f35f		       54		      .byte.b	#$54	;
    696  f360		       52		      .byte.b	#$52	;
    697  f361		       52		      .byte.b	#$52	;
    698  f362		       52		      .byte.b	#$52	;
    699  f363				   AdrienCol
    700  f363		       00		      .byte.b	#$00
    701  f364		       16		      .byte.b	#$16	;
    702  f365		       16		      .byte.b	#$16	;
    703  f366		       18		      .byte.b	#$18	;
    704  f367		       18		      .byte.b	#$18	;
    705  f368		       1a		      .byte.b	#$1A	;
    706  f369		       1a		      .byte.b	#$1A	;
    707  f36a		       1c		      .byte.b	#$1C	;
    708  f36b		       1c		      .byte.b	#$1C	;
    709  f36c
    710  f36c							; Complete ROM with 4kb
    711  fffc					      org	$FFFC
    712  fffc		       00 f0		      word.w	Reset
    713  fffe		       00 f0		      word.w	Reset
