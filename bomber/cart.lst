------- FILE bomber.asm LEVEL 1 PASS 1
      1  0000					      processor	6502
      2  0000 ????
------- FILE macro.h LEVEL 2 PASS 1
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  0000 ????
      4  0000 ????	       00 69	   VERSION_MACRO =	105
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  0000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  0000 ????						;			    used for code assembly.
     24  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  0000 ????						;
     26  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  0000 ????						;
     28  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  0000 ????						;			   (standardised macro for vertical synch code)
     30  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     31  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  0000 ????						; 1.0	22/MAR/2003		Initial release
     33  0000 ????
     34  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     35  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     37  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  0000 ????						;   registers and require them to be defined first).
     39  0000 ????
     40  0000 ????						; Available macros...
     41  0000 ????						;   SLEEP n		 - sleep for n cycles
     42  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  0000 ????
     46  0000 ????						;-------------------------------------------------------------------------------
     47  0000 ????						; SLEEP duration
     48  0000 ????						; Original author: Thomas Jentzsch
     49  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  0000 ????						; useful for code where precise timing is required.
     51  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  0000 ????
     55  0000 ????				      MAC	sleep
     56  0000 ????			   .CYCLES    SET	{1}
     57  0000 ????
     58  0000 ????				      IF	.CYCLES < 2
     59  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  0000 ????				      ERR
     61  0000 ????				      ENDIF
     62  0000 ????
     63  0000 ????				      IF	.CYCLES & 1
     64  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     65  0000 ????				      nop	0
     66  0000 ????				      ELSE
     67  0000 ????				      bit	VSYNC
     68  0000 ????				      ENDIF
     69  0000 ????			   .CYCLES    SET	.CYCLES - 3
     70  0000 ????				      ENDIF
     71  0000 ????
     72  0000 ????				      REPEAT	.CYCLES / 2
     73  0000 ????				      nop
     74  0000 ????				      REPEND
     75  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     76  0000 ????
     77  0000 ????						;-------------------------------------------------------------------------------
     78  0000 ????						; VERTICAL_SYNC
     79  0000 ????						; Original author: Manuel Polik
     80  0000 ????						; Inserts the code required for a proper 3 scannline
     81  0000 ????						; vertical sync sequence
     82  0000 ????						;
     83  0000 ????						; Note: Alters the accumulator
     84  0000 ????						;
     85  0000 ????						; IN:
     86  0000 ????						; OUT: A = 1
     87  0000 ????
     88  0000 ????				      MAC	vertical_sync
     89  0000 ????				      LDA	#$02	; A = VSYNC enable
     90  0000 ????				      STA	WSYNC	; Finish current line
     91  0000 ????				      STA	VSYNC	; Start vertical sync
     92  0000 ????				      STA	WSYNC	; 1st line vertical sync
     93  0000 ????				      STA	WSYNC	; 2nd line vertical sync
     94  0000 ????				      LSR		; A = VSYNC disable
     95  0000 ????				      STA	WSYNC	; 3rd line vertical sync
     96  0000 ????				      STA	VSYNC	; Stop vertical sync
     97  0000 ????				      ENDM
     98  0000 ????
     99  0000 ????						;-------------------------------------------------------------------------------
    100  0000 ????						; CLEAN_START
    101  0000 ????						; Original author: Andrew Davie
    102  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  0000 ????						; Use as very first section of code on boot (ie: at reset)
    106  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  0000 ????
    108  0000 ????				      MAC	clean_start
    109  0000 ????				      sei
    110  0000 ????				      cld
    111  0000 ????
    112  0000 ????				      ldx	#0
    113  0000 ????				      txa
    114  0000 ????				      tay
    115  0000 ????			   .CLEAR_STACK dex
    116  0000 ????				      txs
    117  0000 ????				      pha
    118  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  0000 ????
    120  0000 ????				      ENDM
    121  0000 ????
    122  0000 ????						;-------------------------------------------------------
    123  0000 ????						; SET_POINTER
    124  0000 ????						; Original author: Manuel Rotschkar
    125  0000 ????						;
    126  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  0000 ????						;
    128  0000 ????						; Usage: SET_POINTER pointer, address
    129  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  0000 ????						;
    131  0000 ????						; Note: Alters the accumulator, NZ flags
    132  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  0000 ????						; IN 2: absolute address
    134  0000 ????
    135  0000 ????				      MAC	set_pointer
    136  0000 ????			   .POINTER   SET	{1}
    137  0000 ????			   .ADDRESS   SET	{2}
    138  0000 ????
    139  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  0000 ????				      STA	.POINTER	; Store in pointer
    141  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    142  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    143  0000 ????
    144  0000 ????				      ENDM
    145  0000 ????
    146  0000 ????
    147  0000 ????						;-------------------------------------------------------
    148  0000 ????						; SAME PAGE BRANCH CHECK
    149  0000 ????						; Original auther: John Payson
    150  0000 ????						;
    151  0000 ????						; Usage: sbeq, sbne, etc just like a normal beq, bne, etc.
    152  0000 ????						;	  A message will be output if the target of the branch
    153  0000 ????						;	  is not on the same page.
    154  0000 ????						;
    155  0000 ????				      mac	sbcc
    156  0000 ????				      bcc	{1}
    157  0000 ????				      if	(* ^ {1}) & $FF00
    158  0000 ????				      echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    159  0000 ????				      err
    160  0000 ????				      endif
    161  0000 ????				      endm
    162  0000 ????
    163  0000 ????				      mac	sbcs
    164  0000 ????				      bcs	{1}
    165  0000 ????				      if	(* ^ {1}) & $FF00
    166  0000 ????				      echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    167  0000 ????				      err
    168  0000 ????				      endif
    169  0000 ????				      endm
    170  0000 ????
    171  0000 ????				      mac	sbeq
    172  0000 ????				      beq	{1}
    173  0000 ????				      if	(* ^ {1}) & $FF00
    174  0000 ????				      echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    175  0000 ????				      err
    176  0000 ????				      endif
    177  0000 ????				      endm
    178  0000 ????
    179  0000 ????				      mac	sbmi
    180  0000 ????				      bmi	{1}
    181  0000 ????				      if	(* ^ {1}) & $FF00
    182  0000 ????				      echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    183  0000 ????				      err
    184  0000 ????				      endif
    185  0000 ????				      endm
    186  0000 ????
    187  0000 ????				      mac	sbne
    188  0000 ????				      bne	{1}
    189  0000 ????				      if	(* ^ {1}) & $FF00
    190  0000 ????				      echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    191  0000 ????				      err
    192  0000 ????				      endif
    193  0000 ????				      endm
    194  0000 ????
    195  0000 ????				      mac	sbpl
    196  0000 ????				      bpl	{1}
    197  0000 ????				      if	(* ^ {1}) & $FF00
    198  0000 ????				      echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    199  0000 ????				      err
    200  0000 ????				      endif
    201  0000 ????				      endm
    202  0000 ????
    203  0000 ????				      mac	sbvc
    204  0000 ????				      bvc	{1}
    205  0000 ????				      if	(* ^ {1}) & $FF00
    206  0000 ????				      echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    207  0000 ????				      err
    208  0000 ????				      endif
    209  0000 ????				      endm
    210  0000 ????
    211  0000 ????				      mac	sbvs
    212  0000 ????				      bvs	{1}
    213  0000 ????				      if	(* ^ {1}) & $FF00
    214  0000 ????				      echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    215  0000 ????				      err
    216  0000 ????				      endif
    217  0000 ????				      endm
    218  0000 ????
    219  0000 ????						;-------------------------------------------------------
    220  0000 ????						; DIFFERENT PAGE BRANCH CHECK
    221  0000 ????						; Original auther: Darrell Spice, Jr.
    222  0000 ????						;
    223  0000 ????						; Usage: dbeq, dbne, etc just like a normal beq, bne, etc.
    224  0000 ????						;	  A message will be output if the target of the branch
    225  0000 ????						;	  is not on a different page.
    226  0000 ????						;
    227  0000 ????				      mac	dbcc
    228  0000 ????				      bcc	{1}
    229  0000 ????				      if	((* ^ {1}) & $FF00) = 0
    230  0000 ????				      echo	"SAME PAGE","WARNING ",{1}," at ",*
    231  0000 ????				      err
    232  0000 ????				      endif
    233  0000 ????				      endm
    234  0000 ????
    235  0000 ????				      mac	dbcs
    236  0000 ????				      bcs	{1}
    237  0000 ????				      if	((* ^ {1}) & $FF00) = 0
    238  0000 ????				      echo	"SAME PAGE","WARNING ",{1}," at ",*
    239  0000 ????				      err
    240  0000 ????				      endif
    241  0000 ????				      endm
    242  0000 ????
    243  0000 ????				      mac	dbeq
    244  0000 ????				      beq	{1}
    245  0000 ????				      if	((* ^ {1}) & $FF00) = 0
    246  0000 ????				      echo	"SAME PAGE","WARNING ",{1}," at ",*
    247  0000 ????				      err
    248  0000 ????				      endif
    249  0000 ????				      endm
    250  0000 ????
    251  0000 ????				      mac	dbmi
    252  0000 ????				      bmi	{1}
    253  0000 ????				      if	((* ^ {1}) & $FF00) = 0
    254  0000 ????				      echo	"SAME PAGE","WARNING ",{1}," at ",*
    255  0000 ????				      err
    256  0000 ????				      endif
    257  0000 ????				      endm
    258  0000 ????
    259  0000 ????				      mac	dbne
    260  0000 ????				      bne	{1}
    261  0000 ????				      if	((* ^ {1}) & $FF00) = 0
    262  0000 ????				      echo	"SAME PAGE","WARNING ",{1}," at ",*
    263  0000 ????				      err
    264  0000 ????				      endif
    265  0000 ????				      endm
    266  0000 ????
    267  0000 ????				      mac	dbpl
    268  0000 ????				      bpl	{1}
    269  0000 ????				      if	((* ^ {1}) & $FF00) = 0
    270  0000 ????				      echo	"SAME PAGE","WARNING ",{1}," at ",*
    271  0000 ????				      err
    272  0000 ????				      endif
    273  0000 ????				      endm
    274  0000 ????
    275  0000 ????				      mac	dbvc
    276  0000 ????				      bvc	{1}
    277  0000 ????				      if	((* ^ {1}) & $FF00) = 0
    278  0000 ????				      echo	"SAME PAGE","WARNING ",{1}," at ",*
    279  0000 ????				      err
    280  0000 ????				      endif
    281  0000 ????				      endm
    282  0000 ????
    283  0000 ????				      mac	dbvs
    284  0000 ????				      bvs	{1}
    285  0000 ????				      if	((* ^ {1}) & $FF00) = 0
    286  0000 ????				      echo	"SAME PAGE","WARNING ",{1}," at ",*
    287  0000 ????				      err
    288  0000 ????				      endif
    289  0000 ????				      endm
    290  0000 ????
    291  0000 ????						; EOF
------- FILE bomber.asm
------- FILE vcs.h LEVEL 2 PASS 1
      0  0000 ????				      include	"vcs.h"
      1  0000 ????						; VCS.H
      2  0000 ????						; Version 1.05, 13/November/2003
      3  0000 ????
      4  0000 ????	       00 69	   VERSION_VCS =	105
      5  0000 ????
      6  0000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines hardware registers and memory mapping for the
     11  0000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  0000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  0000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  0000 ????						; with your views.  Please contribute, if you think you can improve this
     19  0000 ????						; file!
     20  0000 ????						;
     21  0000 ????						; Latest Revisions...
     22  0000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  0000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  0000 ????						;			    This will allow conditional code to verify VCS.H being
     25  0000 ????						;			    used for code assembly.
     26  0000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  0000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  0000 ????						;			 mirrored reading/writing differences.	This is more a
     29  0000 ????						;			 readability issue, and binary compatibility with disassembled
     30  0000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  0000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  0000 ????						;			 which was broken by the use of segments in this file, as
     33  0000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  0000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  0000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  0000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  0000 ????						;						   it is safe to leave it undefined, and the base address will
     38  0000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  0000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  0000 ????						;			  - register definitions are now generated through assignment
     41  0000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  0000 ????						;			    address architecture.
     43  0000 ????						; 1.0	22/MAR/2003		Initial release
     44  0000 ????						;-------------------------------------------------------------------------------
     45  0000 ????						; TIA_BASE_ADDRESS
     46  0000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     47  0000 ????						; Normally 0, the base address should (externally, before including this file)
     48  0000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     49  0000 ????						; The reason is that this bankswitching scheme treats any access to locations
     50  0000 ????						; < $40 as a bankswitch.
     51  0000 ????				      IFNCONST	TIA_BASE_ADDRESS
     52  0000 ????	       00 00	   TIA_BASE_ADDRESS =	0
     53  0000 ????				      ENDIF
     54  0000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     55  0000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     56  0000 ????						; *OR* by declaring the label before including this file, eg:
     57  0000 ????						; TIA_BASE_ADDRESS = $40
     58  0000 ????						;   include "vcs.h"
     59  0000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     60  0000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     61  0000 ????						; for the mirrored ROM hardware registers.
     62  0000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     63  0000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     64  0000 ????						; they defaut to the TIA_BASE_ADDRESS.
     65  0000 ????				      IFNCONST	TIA_BASE_READ_ADDRESS
     66  0000 ????	       00 00	   TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     67  0000 ????				      ENDIF
     68  0000 ????				      IFNCONST	TIA_BASE_WRITE_ADDRESS
     69  0000 ????	       00 00	   TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     70  0000 ????				      ENDIF
     71  0000 ????						;-------------------------------------------------------------------------------
     72 U0000 ????				      SEG.U	TIA_REGISTERS_WRITE
     73 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     74 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     75 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     76 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     77 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     78 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     79 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     80 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     81 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     82 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     83 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     84 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     85 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     86 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
     87 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
     88 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
     89 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
     90 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
     91 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
     92 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
     93 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
     94 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
     95 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
     96 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
     97 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
     98 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
     99 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    100 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    101 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    102 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    103 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    104 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    105 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    106 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    107 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    108 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    109 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    110 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    111 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    112 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    113 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    114 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    115 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    116 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    117 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    118 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    119 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    120 U002d							;-------------------------------------------------------------------------------
    121 U0000 ????				      SEG.U	TIA_REGISTERS_READ
    122 U0000					      ORG	TIA_BASE_READ_ADDRESS
    123 U0000							;											bit 7	 bit 6
    124 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    125 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    126 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    127 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    128 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    129 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    130 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    131 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    132 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    133 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    134 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    135 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    136 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    137 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    138 U000e							;-------------------------------------------------------------------------------
    139 U0000 ????				      SEG.U	RIOT
    140 U0280					      ORG	$280
    141 U0280							; RIOT MEMORY MAP
    142 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    143 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    144 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    145 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    146 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    147 U0284		       00	   INTIM      ds	1	; $284		Timer output
    148 U0285		       00	   TIMINT     ds	1	; $285
    149 U0286							; Unused/undefined registers ($285-$294)
    150 U0286		       00		      ds	1	; $286
    151 U0287		       00		      ds	1	; $287
    152 U0288		       00		      ds	1	; $288
    153 U0289		       00		      ds	1	; $289
    154 U028a		       00		      ds	1	; $28A
    155 U028b		       00		      ds	1	; $28B
    156 U028c		       00		      ds	1	; $28C
    157 U028d		       00		      ds	1	; $28D
    158 U028e		       00		      ds	1	; $28E
    159 U028f		       00		      ds	1	; $28F
    160 U0290		       00		      ds	1	; $290
    161 U0291		       00		      ds	1	; $291
    162 U0292		       00		      ds	1	; $292
    163 U0293		       00		      ds	1	; $293
    164 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    165 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    166 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    167 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    168 U0298							;-------------------------------------------------------------------------------
    169 U0298							; The following required for back-compatibility with code which does not use
    170 U0298							; segments.
    171  0000 ????				      SEG
    172  0000 ????						; EOF
------- FILE bomber.asm
      5  0000 ????
      6 U0000 ????				      seg.u	Variables
      7 U0080					      org	$80
      8 U0080
      9 U0080		       00	   JetXPos    byte.b
     10 U0081		       00	   JetYPos    byte.b
     11 U0082		       00	   BomberXPos byte.b
     12 U0083		       00	   BomberYPos byte.b
     13 U0084
     14  0000 ????				      seg	Code
     15  f000					      org	$F000
     16  f000
     17  f000				   Reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     19  f00b
     20  f00b							; Initialise RAM variables and TIA registers
     21  f00b							; Set initial player coordinates
     22  f00b		       a9 0a		      lda	#10
     23  f00d		       85 81		      sta	JetYPos
     24  f00f		       a9 3c		      lda	#60
     25  f011		       85 80		      sta	JetXPos
     26  f013
     27  f013							; Begin rendering
     28  f013				   StartFrame
     29  f013							; Turn on vblank and vsync
     30  f013		       a2 02		      ldx	#2
     31  f015		       86 01		      stx	VBLANK
     32  f017		       86 00		      stx	VSYNC
     33  f019					      REPEAT	3
     34  f019		       86 02		      stx	WSYNC
     33  f019					      REPEND
     34  f01b		       86 02		      stx	WSYNC
     33  f01b					      REPEND
     34  f01d		       86 02		      stx	WSYNC
     35  f01f					      REPEND
     36  f01f							; Turn off vsync
     37  f01f		       a2 00		      ldx	#0
     38  f021		       86 00		      stx	VSYNC
     39  f023
     40  f023							; Render VBLANK
     41  f023					      REPEAT	37
     42  f023		       86 02		      stx	WSYNC
     41  f023					      REPEND
     42  f025		       86 02		      stx	WSYNC
     41  f025					      REPEND
     42  f027		       86 02		      stx	WSYNC
     41  f027					      REPEND
     42  f029		       86 02		      stx	WSYNC
     41  f029					      REPEND
     42  f02b		       86 02		      stx	WSYNC
     41  f02b					      REPEND
     42  f02d		       86 02		      stx	WSYNC
     41  f02d					      REPEND
     42  f02f		       86 02		      stx	WSYNC
     41  f02f					      REPEND
     42  f031		       86 02		      stx	WSYNC
     41  f031					      REPEND
     42  f033		       86 02		      stx	WSYNC
     41  f033					      REPEND
     42  f035		       86 02		      stx	WSYNC
     41  f035					      REPEND
     42  f037		       86 02		      stx	WSYNC
     41  f037					      REPEND
     42  f039		       86 02		      stx	WSYNC
     41  f039					      REPEND
     42  f03b		       86 02		      stx	WSYNC
     41  f03b					      REPEND
     42  f03d		       86 02		      stx	WSYNC
     41  f03d					      REPEND
     42  f03f		       86 02		      stx	WSYNC
     41  f03f					      REPEND
     42  f041		       86 02		      stx	WSYNC
     41  f041					      REPEND
     42  f043		       86 02		      stx	WSYNC
     41  f043					      REPEND
     42  f045		       86 02		      stx	WSYNC
     41  f045					      REPEND
     42  f047		       86 02		      stx	WSYNC
     41  f047					      REPEND
     42  f049		       86 02		      stx	WSYNC
     41  f049					      REPEND
     42  f04b		       86 02		      stx	WSYNC
     41  f04b					      REPEND
     42  f04d		       86 02		      stx	WSYNC
     41  f04d					      REPEND
     42  f04f		       86 02		      stx	WSYNC
     41  f04f					      REPEND
     42  f051		       86 02		      stx	WSYNC
     41  f051					      REPEND
     42  f053		       86 02		      stx	WSYNC
     41  f053					      REPEND
     42  f055		       86 02		      stx	WSYNC
     41  f055					      REPEND
     42  f057		       86 02		      stx	WSYNC
     41  f057					      REPEND
     42  f059		       86 02		      stx	WSYNC
     41  f059					      REPEND
     42  f05b		       86 02		      stx	WSYNC
     41  f05b					      REPEND
     42  f05d		       86 02		      stx	WSYNC
     41  f05d					      REPEND
     42  f05f		       86 02		      stx	WSYNC
     41  f05f					      REPEND
     42  f061		       86 02		      stx	WSYNC
     41  f061					      REPEND
     42  f063		       86 02		      stx	WSYNC
     41  f063					      REPEND
     42  f065		       86 02		      stx	WSYNC
     41  f065					      REPEND
     42  f067		       86 02		      stx	WSYNC
     41  f067					      REPEND
     42  f069		       86 02		      stx	WSYNC
     41  f069					      REPEND
     42  f06b		       86 02		      stx	WSYNC
     43  f06d					      REPEND
     44  f06d							; Turn off VBLANK
     45  f06d		       86 01		      stx	VBLANK
     46  f06f
     47  f06f							; Render the visible scanlines
     48  f06f				   VisibleScanlines
     49  f06f							; Set background colour
     50  f06f		       a9 84		      lda	#$84	; Blue
     51  f071		       85 09		      sta	COLUBK
     52  f073							; Set playfield colour
     53  f073		       a9 c2		      lda	#$C2
     54  f075		       85 08		      sta	COLUPF
     55  f077
     56  f077		       a2 c0		      ldx	#192
     57  f079				   .GameLineLoop
     58  f079							; Render the 192 visible scanline
     59  f079		       86 02		      stx	WSYNC
     60  f07b		       ca		      dex
     61  f07c		       d0 fb		      bne	.GameLineLoop
     62  f07e
     63  f07e							; Display vblank
     64  f07e				   Overscan
     65  f07e		       a9 02		      lda	#2
     66  f080		       85 01		      sta	VBLANK
     67  f082					      REPEAT	30
     68  f082		       85 02		      sta	WSYNC
     67  f082					      REPEND
     68  f084		       85 02		      sta	WSYNC
     67  f084					      REPEND
     68  f086		       85 02		      sta	WSYNC
     67  f086					      REPEND
     68  f088		       85 02		      sta	WSYNC
     67  f088					      REPEND
     68  f08a		       85 02		      sta	WSYNC
     67  f08a					      REPEND
     68  f08c		       85 02		      sta	WSYNC
     67  f08c					      REPEND
     68  f08e		       85 02		      sta	WSYNC
     67  f08e					      REPEND
     68  f090		       85 02		      sta	WSYNC
     67  f090					      REPEND
     68  f092		       85 02		      sta	WSYNC
     67  f092					      REPEND
     68  f094		       85 02		      sta	WSYNC
     67  f094					      REPEND
     68  f096		       85 02		      sta	WSYNC
     67  f096					      REPEND
     68  f098		       85 02		      sta	WSYNC
     67  f098					      REPEND
     68  f09a		       85 02		      sta	WSYNC
     67  f09a					      REPEND
     68  f09c		       85 02		      sta	WSYNC
     67  f09c					      REPEND
     68  f09e		       85 02		      sta	WSYNC
     67  f09e					      REPEND
     68  f0a0		       85 02		      sta	WSYNC
     67  f0a0					      REPEND
     68  f0a2		       85 02		      sta	WSYNC
     67  f0a2					      REPEND
     68  f0a4		       85 02		      sta	WSYNC
     67  f0a4					      REPEND
     68  f0a6		       85 02		      sta	WSYNC
     67  f0a6					      REPEND
     68  f0a8		       85 02		      sta	WSYNC
     67  f0a8					      REPEND
     68  f0aa		       85 02		      sta	WSYNC
     67  f0aa					      REPEND
     68  f0ac		       85 02		      sta	WSYNC
     67  f0ac					      REPEND
     68  f0ae		       85 02		      sta	WSYNC
     67  f0ae					      REPEND
     68  f0b0		       85 02		      sta	WSYNC
     67  f0b0					      REPEND
     68  f0b2		       85 02		      sta	WSYNC
     67  f0b2					      REPEND
     68  f0b4		       85 02		      sta	WSYNC
     67  f0b4					      REPEND
     68  f0b6		       85 02		      sta	WSYNC
     67  f0b6					      REPEND
     68  f0b8		       85 02		      sta	WSYNC
     67  f0b8					      REPEND
     68  f0ba		       85 02		      sta	WSYNC
     67  f0ba					      REPEND
     68  f0bc		       85 02		      sta	WSYNC
     69  f0be					      REPEND
     70  f0be
     71  f0be		       a9 00		      lda	#0
     72  f0c0		       85 01		      sta	VBLANK
     73  f0c2
     74  f0c2							; Loop forever
     75  f0c2		       4c 13 f0 	      jmp	StartFrame
     76  f0c5
     77  f0c5							; Complete ROM with 4kb
     78  fffc					      org	$FFFC
     79  fffc		       00 f0		      word.w	Reset
     80  fffe		       00 f0		      word.w	Reset
