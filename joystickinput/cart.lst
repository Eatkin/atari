------- FILE hposition.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_MACRO =	105
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  10000 ????						;			    used for code assembly.
     24  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  10000 ????						;
     26  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  10000 ????						;
     28  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  10000 ????						;			   (standardised macro for vertical synch code)
     30  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     31  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  10000 ????						; 1.0	22/MAR/2003		Initial release
     33  10000 ????
     34  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     35  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     37  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  10000 ????						;   registers and require them to be defined first).
     39  10000 ????
     40  10000 ????						; Available macros...
     41  10000 ????						;   SLEEP n		 - sleep for n cycles
     42  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????						; SLEEP duration
     48  10000 ????						; Original author: Thomas Jentzsch
     49  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  10000 ????						; useful for code where precise timing is required.
     51  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  10000 ????
     55  10000 ????				       MAC	sleep
     56  10000 ????			    .CYCLES    SET	{1}
     57  10000 ????
     58  10000 ????				       IF	.CYCLES < 2
     59  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  10000 ????				       ERR
     61  10000 ????				       ENDIF
     62  10000 ????
     63  10000 ????				       IF	.CYCLES & 1
     64  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     65  10000 ????				       nop	0
     66  10000 ????				       ELSE
     67  10000 ????				       bit	VSYNC
     68  10000 ????				       ENDIF
     69  10000 ????			    .CYCLES    SET	.CYCLES - 3
     70  10000 ????				       ENDIF
     71  10000 ????
     72  10000 ????				       REPEAT	.CYCLES / 2
     73  10000 ????				       nop
     74  10000 ????				       REPEND
     75  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     76  10000 ????
     77  10000 ????						;-------------------------------------------------------------------------------
     78  10000 ????						; VERTICAL_SYNC
     79  10000 ????						; Original author: Manuel Polik
     80  10000 ????						; Inserts the code required for a proper 3 scannline
     81  10000 ????						; vertical sync sequence
     82  10000 ????						;
     83  10000 ????						; Note: Alters the accumulator
     84  10000 ????						;
     85  10000 ????						; IN:
     86  10000 ????						; OUT: A = 1
     87  10000 ????
     88  10000 ????				       MAC	vertical_sync
     89  10000 ????				       LDA	#$02	; A = VSYNC enable
     90  10000 ????				       STA	WSYNC	; Finish current line
     91  10000 ????				       STA	VSYNC	; Start vertical sync
     92  10000 ????				       STA	WSYNC	; 1st line vertical sync
     93  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     94  10000 ????				       LSR		; A = VSYNC disable
     95  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     96  10000 ????				       STA	VSYNC	; Stop vertical sync
     97  10000 ????				       ENDM
     98  10000 ????
     99  10000 ????						;-------------------------------------------------------------------------------
    100  10000 ????						; CLEAN_START
    101  10000 ????						; Original author: Andrew Davie
    102  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  10000 ????						; Use as very first section of code on boot (ie: at reset)
    106  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  10000 ????
    108  10000 ????				       MAC	clean_start
    109  10000 ????				       sei
    110  10000 ????				       cld
    111  10000 ????
    112  10000 ????				       ldx	#0
    113  10000 ????				       txa
    114  10000 ????				       tay
    115  10000 ????			    .CLEAR_STACK dex
    116  10000 ????				       txs
    117  10000 ????				       pha
    118  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  10000 ????
    120  10000 ????				       ENDM
    121  10000 ????
    122  10000 ????						;-------------------------------------------------------
    123  10000 ????						; SET_POINTER
    124  10000 ????						; Original author: Manuel Rotschkar
    125  10000 ????						;
    126  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  10000 ????						;
    128  10000 ????						; Usage: SET_POINTER pointer, address
    129  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  10000 ????						;
    131  10000 ????						; Note: Alters the accumulator, NZ flags
    132  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  10000 ????						; IN 2: absolute address
    134  10000 ????
    135  10000 ????				       MAC	set_pointer
    136  10000 ????			    .POINTER   SET	{1}
    137  10000 ????			    .ADDRESS   SET	{2}
    138  10000 ????
    139  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  10000 ????				       STA	.POINTER	; Store in pointer
    141  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    142  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    143  10000 ????
    144  10000 ????				       ENDM
    145  10000 ????
    146  10000 ????
    147  10000 ????						;-------------------------------------------------------
    148  10000 ????						; SAME PAGE BRANCH CHECK
    149  10000 ????						; Original auther: John Payson
    150  10000 ????						;
    151  10000 ????						; Usage: sbeq, sbne, etc just like a normal beq, bne, etc.
    152  10000 ????						;	  A message will be output if the target of the branch
    153  10000 ????						;	  is not on the same page.
    154  10000 ????						;
    155  10000 ????				       mac	sbcc
    156  10000 ????				       bcc	{1}
    157  10000 ????				       if	(* ^ {1}) & $FF00
    158  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    159  10000 ????				       err
    160  10000 ????				       endif
    161  10000 ????				       endm
    162  10000 ????
    163  10000 ????				       mac	sbcs
    164  10000 ????				       bcs	{1}
    165  10000 ????				       if	(* ^ {1}) & $FF00
    166  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    167  10000 ????				       err
    168  10000 ????				       endif
    169  10000 ????				       endm
    170  10000 ????
    171  10000 ????				       mac	sbeq
    172  10000 ????				       beq	{1}
    173  10000 ????				       if	(* ^ {1}) & $FF00
    174  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    175  10000 ????				       err
    176  10000 ????				       endif
    177  10000 ????				       endm
    178  10000 ????
    179  10000 ????				       mac	sbmi
    180  10000 ????				       bmi	{1}
    181  10000 ????				       if	(* ^ {1}) & $FF00
    182  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    183  10000 ????				       err
    184  10000 ????				       endif
    185  10000 ????				       endm
    186  10000 ????
    187  10000 ????				       mac	sbne
    188  10000 ????				       bne	{1}
    189  10000 ????				       if	(* ^ {1}) & $FF00
    190  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    191  10000 ????				       err
    192  10000 ????				       endif
    193  10000 ????				       endm
    194  10000 ????
    195  10000 ????				       mac	sbpl
    196  10000 ????				       bpl	{1}
    197  10000 ????				       if	(* ^ {1}) & $FF00
    198  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    199  10000 ????				       err
    200  10000 ????				       endif
    201  10000 ????				       endm
    202  10000 ????
    203  10000 ????				       mac	sbvc
    204  10000 ????				       bvc	{1}
    205  10000 ????				       if	(* ^ {1}) & $FF00
    206  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    207  10000 ????				       err
    208  10000 ????				       endif
    209  10000 ????				       endm
    210  10000 ????
    211  10000 ????				       mac	sbvs
    212  10000 ????				       bvs	{1}
    213  10000 ????				       if	(* ^ {1}) & $FF00
    214  10000 ????				       echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    215  10000 ????				       err
    216  10000 ????				       endif
    217  10000 ????				       endm
    218  10000 ????
    219  10000 ????						;-------------------------------------------------------
    220  10000 ????						; DIFFERENT PAGE BRANCH CHECK
    221  10000 ????						; Original auther: Darrell Spice, Jr.
    222  10000 ????						;
    223  10000 ????						; Usage: dbeq, dbne, etc just like a normal beq, bne, etc.
    224  10000 ????						;	  A message will be output if the target of the branch
    225  10000 ????						;	  is not on a different page.
    226  10000 ????						;
    227  10000 ????				       mac	dbcc
    228  10000 ????				       bcc	{1}
    229  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    230  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    231  10000 ????				       err
    232  10000 ????				       endif
    233  10000 ????				       endm
    234  10000 ????
    235  10000 ????				       mac	dbcs
    236  10000 ????				       bcs	{1}
    237  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    238  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    239  10000 ????				       err
    240  10000 ????				       endif
    241  10000 ????				       endm
    242  10000 ????
    243  10000 ????				       mac	dbeq
    244  10000 ????				       beq	{1}
    245  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    246  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    247  10000 ????				       err
    248  10000 ????				       endif
    249  10000 ????				       endm
    250  10000 ????
    251  10000 ????				       mac	dbmi
    252  10000 ????				       bmi	{1}
    253  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    254  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    255  10000 ????				       err
    256  10000 ????				       endif
    257  10000 ????				       endm
    258  10000 ????
    259  10000 ????				       mac	dbne
    260  10000 ????				       bne	{1}
    261  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    262  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    263  10000 ????				       err
    264  10000 ????				       endif
    265  10000 ????				       endm
    266  10000 ????
    267  10000 ????				       mac	dbpl
    268  10000 ????				       bpl	{1}
    269  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    270  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    271  10000 ????				       err
    272  10000 ????				       endif
    273  10000 ????				       endm
    274  10000 ????
    275  10000 ????				       mac	dbvc
    276  10000 ????				       bvc	{1}
    277  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    278  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    279  10000 ????				       err
    280  10000 ????				       endif
    281  10000 ????				       endm
    282  10000 ????
    283  10000 ????				       mac	dbvs
    284  10000 ????				       bvs	{1}
    285  10000 ????				       if	((* ^ {1}) & $FF00) = 0
    286  10000 ????				       echo	"SAME PAGE","WARNING ",{1}," at ",*
    287  10000 ????				       err
    288  10000 ????				       endif
    289  10000 ????				       endm
    290  10000 ????
    291  10000 ????						; EOF
------- FILE hposition.asm
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????						;-------------------------------------------------------------------------------
     45  10000 ????						; TIA_BASE_ADDRESS
     46  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     47  10000 ????						; Normally 0, the base address should (externally, before including this file)
     48  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     49  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     50  10000 ????						; < $40 as a bankswitch.
     51  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     52  10000 ????			   -TIA_BASE_ADDRESS =	0
     53  10000 ????				       ENDIF
     54  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     55  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     56  10000 ????						; *OR* by declaring the label before including this file, eg:
     57  10000 ????						; TIA_BASE_ADDRESS = $40
     58  10000 ????						;   include "vcs.h"
     59  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     60  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     61  10000 ????						; for the mirrored ROM hardware registers.
     62  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     63  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     64  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     65  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     66  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     67  10000 ????				       ENDIF
     68  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     69  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     70  10000 ????				       ENDIF
     71  10000 ????						;-------------------------------------------------------------------------------
     72 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     73 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     74 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     75 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     76 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     77 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     78 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     79 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     80 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     81 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     82 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     83 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     84 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     85 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     86 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
     87 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
     88 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
     89 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
     90 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
     91 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
     92 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
     93 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
     94 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
     95 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
     96 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
     97 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
     98 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
     99 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    100 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    101 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    102 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    103 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    104 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    105 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    106 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    107 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    108 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    109 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    110 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    111 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    112 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    113 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    114 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    115 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    116 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    117 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    118 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    119 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    120 U002d							;-------------------------------------------------------------------------------
    121 U000e ????				      SEG.U	TIA_REGISTERS_READ
    122 U0000					      ORG	TIA_BASE_READ_ADDRESS
    123 U0000							;											bit 7	 bit 6
    124 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    125 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    126 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    127 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    128 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    129 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    130 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    131 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    132 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    133 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    134 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    135 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    136 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    137 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    138 U000e							;-------------------------------------------------------------------------------
    139 U0298 ????				      SEG.U	RIOT
    140 U0280					      ORG	$280
    141 U0280							; RIOT MEMORY MAP
    142 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    143 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    144 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    145 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    146 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    147 U0284		       00	   INTIM      ds	1	; $284		Timer output
    148 U0285		       00	   TIMINT     ds	1	; $285
    149 U0286							; Unused/undefined registers ($285-$294)
    150 U0286		       00		      ds	1	; $286
    151 U0287		       00		      ds	1	; $287
    152 U0288		       00		      ds	1	; $288
    153 U0289		       00		      ds	1	; $289
    154 U028a		       00		      ds	1	; $28A
    155 U028b		       00		      ds	1	; $28B
    156 U028c		       00		      ds	1	; $28C
    157 U028d		       00		      ds	1	; $28D
    158 U028e		       00		      ds	1	; $28E
    159 U028f		       00		      ds	1	; $28F
    160 U0290		       00		      ds	1	; $290
    161 U0291		       00		      ds	1	; $291
    162 U0292		       00		      ds	1	; $292
    163 U0293		       00		      ds	1	; $293
    164 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    165 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    166 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    167 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    168 U0298							;-------------------------------------------------------------------------------
    169 U0298							; The following required for back-compatibility with code which does not use
    170 U0298							; segments.
    171  0000 ????				      SEG
    172  0000 ????						; EOF
------- FILE hposition.asm
      4  0000 ????
      5 U0081 ????				      seg.u	Variables
      6 U0080					      org	$80
      7 U0080		       00	   P0XPos     byte.b		; sprite x coordinate
      8 U0081
      9  10000 ????				       seg	Code
     10  f000					      org	$F000
     11  f000
     12  f000				   Reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     14  f00b
     15  f00b		       a2 00		      ldx	#$00	; Load black for the background
     16  f00d		       86 09		      stx	COLUBK
     17  f00f
     18  f00f		       a9 28		      lda	#40
     19  f011		       85 80		      sta	P0XPos	; Set player x-pos at 40
     20  f013
     21  f013				   StartFrame
     22  f013		       a9 02		      lda	#2
     23  f015		       85 01		      sta	VBLANK
     24  f017		       85 00		      sta	VSYNC
     25  f019
     26  f019							; 3 lines of vsync
     27  f019					      REPEAT	3
     28  f019		       85 02		      sta	WSYNC
     27  f019					      REPEND
     28  f01b		       85 02		      sta	WSYNC
     27  f01b					      REPEND
     28  f01d		       85 02		      sta	WSYNC
     29  f01f					      REPEND
     30  f01f
     31  f01f		       a9 00		      lda	#0
     32  f021		       85 00		      sta	VSYNC	; turn off vsync
     33  f023
     34  f023		       a5 80		      lda	P0XPos
     35  f025		       29 7f		      and	#%01111111	; Forces bit 7 to 0 meaning A is always positive
     36  f027
     37  f027		       38		      sec
     38  f028
     39  f028		       85 02		      sta	WSYNC
     40  f02a		       85 2b		      sta	HMCLR	; clear old horizontal position values
     41  f02c
     42  f02c				   DivideLoop
     43  f02c		       e9 0f		      sbc	#15
     44  f02e		       b0 fc		      bcs	DivideLoop	; loop while carry is set
     45  f030
     46  f030		       49 07		      eor	#7	; exclusive OR with accumulator
     47  f032							; A will be between -8 and 7
     48  f032					      REPEAT	4
     49  f032		       0a		      asl		; bitshift a, HMP0 uses only 4 bits
     48  f032					      REPEND
     49  f033		       0a		      asl		; bitshift a, HMP0 uses only 4 bits
     48  f033					      REPEND
     49  f034		       0a		      asl		; bitshift a, HMP0 uses only 4 bits
     48  f034					      REPEND
     49  f035		       0a		      asl		; bitshift a, HMP0 uses only 4 bits
     50  f036					      REPEND
     51  f036
     52  f036		       85 20		      sta	HMP0	; set fine position value
     53  f038		       85 10		      sta	RESP0	; set coarse position value
     54  f03a		       85 02		      sta	WSYNC	; wait for next scanline
     55  f03c		       85 2a		      sta	HMOVE	; apply fine position offset
     56  f03e
     57  f03e							; Output the 37 (-2) lines of vblank
     58  f03e					      REPEAT	35
     59  f03e		       85 02		      sta	WSYNC
     58  f03e					      REPEND
     59  f040		       85 02		      sta	WSYNC
     58  f040					      REPEND
     59  f042		       85 02		      sta	WSYNC
     58  f042					      REPEND
     59  f044		       85 02		      sta	WSYNC
     58  f044					      REPEND
     59  f046		       85 02		      sta	WSYNC
     58  f046					      REPEND
     59  f048		       85 02		      sta	WSYNC
     58  f048					      REPEND
     59  f04a		       85 02		      sta	WSYNC
     58  f04a					      REPEND
     59  f04c		       85 02		      sta	WSYNC
     58  f04c					      REPEND
     59  f04e		       85 02		      sta	WSYNC
     58  f04e					      REPEND
     59  f050		       85 02		      sta	WSYNC
     58  f050					      REPEND
     59  f052		       85 02		      sta	WSYNC
     58  f052					      REPEND
     59  f054		       85 02		      sta	WSYNC
     58  f054					      REPEND
     59  f056		       85 02		      sta	WSYNC
     58  f056					      REPEND
     59  f058		       85 02		      sta	WSYNC
     58  f058					      REPEND
     59  f05a		       85 02		      sta	WSYNC
     58  f05a					      REPEND
     59  f05c		       85 02		      sta	WSYNC
     58  f05c					      REPEND
     59  f05e		       85 02		      sta	WSYNC
     58  f05e					      REPEND
     59  f060		       85 02		      sta	WSYNC
     58  f060					      REPEND
     59  f062		       85 02		      sta	WSYNC
     58  f062					      REPEND
     59  f064		       85 02		      sta	WSYNC
     58  f064					      REPEND
     59  f066		       85 02		      sta	WSYNC
     58  f066					      REPEND
     59  f068		       85 02		      sta	WSYNC
     58  f068					      REPEND
     59  f06a		       85 02		      sta	WSYNC
     58  f06a					      REPEND
     59  f06c		       85 02		      sta	WSYNC
     58  f06c					      REPEND
     59  f06e		       85 02		      sta	WSYNC
     58  f06e					      REPEND
     59  f070		       85 02		      sta	WSYNC
     58  f070					      REPEND
     59  f072		       85 02		      sta	WSYNC
     58  f072					      REPEND
     59  f074		       85 02		      sta	WSYNC
     58  f074					      REPEND
     59  f076		       85 02		      sta	WSYNC
     58  f076					      REPEND
     59  f078		       85 02		      sta	WSYNC
     58  f078					      REPEND
     59  f07a		       85 02		      sta	WSYNC
     58  f07a					      REPEND
     59  f07c		       85 02		      sta	WSYNC
     58  f07c					      REPEND
     59  f07e		       85 02		      sta	WSYNC
     58  f07e					      REPEND
     59  f080		       85 02		      sta	WSYNC
     58  f080					      REPEND
     59  f082		       85 02		      sta	WSYNC
     60  f084					      REPEND
     61  f084
     62  f084		       a9 00		      lda	#0
     63  f086		       85 01		      sta	VBLANK	; turn off VBLANK
     64  f088
     65  f088							; Draw 192 visible scanline
     66  f088					      REPEAT	60
     67  f088		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f088					      REPEND
     67  f08a		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f08a					      REPEND
     67  f08c		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f08c					      REPEND
     67  f08e		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f08e					      REPEND
     67  f090		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f090					      REPEND
     67  f092		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f092					      REPEND
     67  f094		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f094					      REPEND
     67  f096		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f096					      REPEND
     67  f098		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f098					      REPEND
     67  f09a		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f09a					      REPEND
     67  f09c		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f09c					      REPEND
     67  f09e		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f09e					      REPEND
     67  f0a0		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0a0					      REPEND
     67  f0a2		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0a2					      REPEND
     67  f0a4		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0a4					      REPEND
     67  f0a6		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0a6					      REPEND
     67  f0a8		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0a8					      REPEND
     67  f0aa		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0aa					      REPEND
     67  f0ac		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0ac					      REPEND
     67  f0ae		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0ae					      REPEND
     67  f0b0		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0b0					      REPEND
     67  f0b2		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0b2					      REPEND
     67  f0b4		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0b4					      REPEND
     67  f0b6		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0b6					      REPEND
     67  f0b8		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0b8					      REPEND
     67  f0ba		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0ba					      REPEND
     67  f0bc		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0bc					      REPEND
     67  f0be		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0be					      REPEND
     67  f0c0		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0c0					      REPEND
     67  f0c2		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0c2					      REPEND
     67  f0c4		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0c4					      REPEND
     67  f0c6		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0c6					      REPEND
     67  f0c8		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0c8					      REPEND
     67  f0ca		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0ca					      REPEND
     67  f0cc		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0cc					      REPEND
     67  f0ce		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0ce					      REPEND
     67  f0d0		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0d0					      REPEND
     67  f0d2		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0d2					      REPEND
     67  f0d4		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0d4					      REPEND
     67  f0d6		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0d6					      REPEND
     67  f0d8		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0d8					      REPEND
     67  f0da		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0da					      REPEND
     67  f0dc		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0dc					      REPEND
     67  f0de		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0de					      REPEND
     67  f0e0		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0e0					      REPEND
     67  f0e2		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0e2					      REPEND
     67  f0e4		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0e4					      REPEND
     67  f0e6		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0e6					      REPEND
     67  f0e8		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0e8					      REPEND
     67  f0ea		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0ea					      REPEND
     67  f0ec		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0ec					      REPEND
     67  f0ee		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0ee					      REPEND
     67  f0f0		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0f0					      REPEND
     67  f0f2		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0f2					      REPEND
     67  f0f4		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0f4					      REPEND
     67  f0f6		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0f6					      REPEND
     67  f0f8		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0f8					      REPEND
     67  f0fa		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0fa					      REPEND
     67  f0fc		       85 02		      sta	WSYNC	; 60 empty scanlines
     66  f0fc					      REPEND
     67  f0fe		       85 02		      sta	WSYNC	; 60 empty scanlines
     68  f100					      REPEND
     69  f100
     70  f100		       a0 08		      ldy	#8	; Counter for the bitmap drawing
     71  f102				   DrawBitmap
     72  f102		       b9 74 f2 	      lda	P0Bitmap,Y
     73  f105		       85 1b		      sta	GRP0	; set graphics for P0 slice
     74  f107
     75  f107		       b9 7c f2 	      lda	P0Color,Y
     76  f10a		       85 06		      sta	COLUP0
     77  f10c
     78  f10c
     79  f10c		       85 02		      sta	WSYNC
     80  f10e
     81  f10e		       88		      dey
     82  f10f		       d0 f1		      bne	DrawBitmap
     83  f111
     84  f111		       a9 00		      lda	#0
     85  f113		       85 1b		      sta	GRP0	; disable P0 bitmap graphics
     86  f115
     87  f115					      REPEAT	124
     88  f115		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f115					      REPEND
     88  f117		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f117					      REPEND
     88  f119		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f119					      REPEND
     88  f11b		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f11b					      REPEND
     88  f11d		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f11d					      REPEND
     88  f11f		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f11f					      REPEND
     88  f121		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f121					      REPEND
     88  f123		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f123					      REPEND
     88  f125		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f125					      REPEND
     88  f127		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f127					      REPEND
     88  f129		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f129					      REPEND
     88  f12b		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f12b					      REPEND
     88  f12d		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f12d					      REPEND
     88  f12f		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f12f					      REPEND
     88  f131		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f131					      REPEND
     88  f133		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f133					      REPEND
     88  f135		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f135					      REPEND
     88  f137		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f137					      REPEND
     88  f139		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f139					      REPEND
     88  f13b		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f13b					      REPEND
     88  f13d		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f13d					      REPEND
     88  f13f		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f13f					      REPEND
     88  f141		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f141					      REPEND
     88  f143		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f143					      REPEND
     88  f145		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f145					      REPEND
     88  f147		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f147					      REPEND
     88  f149		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f149					      REPEND
     88  f14b		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f14b					      REPEND
     88  f14d		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f14d					      REPEND
     88  f14f		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f14f					      REPEND
     88  f151		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f151					      REPEND
     88  f153		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f153					      REPEND
     88  f155		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f155					      REPEND
     88  f157		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f157					      REPEND
     88  f159		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f159					      REPEND
     88  f15b		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f15b					      REPEND
     88  f15d		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f15d					      REPEND
     88  f15f		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f15f					      REPEND
     88  f161		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f161					      REPEND
     88  f163		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f163					      REPEND
     88  f165		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f165					      REPEND
     88  f167		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f167					      REPEND
     88  f169		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f169					      REPEND
     88  f16b		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f16b					      REPEND
     88  f16d		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f16d					      REPEND
     88  f16f		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f16f					      REPEND
     88  f171		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f171					      REPEND
     88  f173		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f173					      REPEND
     88  f175		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f175					      REPEND
     88  f177		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f177					      REPEND
     88  f179		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f179					      REPEND
     88  f17b		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f17b					      REPEND
     88  f17d		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f17d					      REPEND
     88  f17f		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f17f					      REPEND
     88  f181		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f181					      REPEND
     88  f183		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f183					      REPEND
     88  f185		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f185					      REPEND
     88  f187		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f187					      REPEND
     88  f189		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f189					      REPEND
     88  f18b		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f18b					      REPEND
     88  f18d		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f18d					      REPEND
     88  f18f		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f18f					      REPEND
     88  f191		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f191					      REPEND
     88  f193		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f193					      REPEND
     88  f195		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f195					      REPEND
     88  f197		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f197					      REPEND
     88  f199		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f199					      REPEND
     88  f19b		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f19b					      REPEND
     88  f19d		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f19d					      REPEND
     88  f19f		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f19f					      REPEND
     88  f1a1		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1a1					      REPEND
     88  f1a3		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1a3					      REPEND
     88  f1a5		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1a5					      REPEND
     88  f1a7		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1a7					      REPEND
     88  f1a9		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1a9					      REPEND
     88  f1ab		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1ab					      REPEND
     88  f1ad		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1ad					      REPEND
     88  f1af		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1af					      REPEND
     88  f1b1		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1b1					      REPEND
     88  f1b3		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1b3					      REPEND
     88  f1b5		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1b5					      REPEND
     88  f1b7		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1b7					      REPEND
     88  f1b9		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1b9					      REPEND
     88  f1bb		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1bb					      REPEND
     88  f1bd		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1bd					      REPEND
     88  f1bf		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1bf					      REPEND
     88  f1c1		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1c1					      REPEND
     88  f1c3		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1c3					      REPEND
     88  f1c5		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1c5					      REPEND
     88  f1c7		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1c7					      REPEND
     88  f1c9		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1c9					      REPEND
     88  f1cb		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1cb					      REPEND
     88  f1cd		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1cd					      REPEND
     88  f1cf		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1cf					      REPEND
     88  f1d1		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1d1					      REPEND
     88  f1d3		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1d3					      REPEND
     88  f1d5		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1d5					      REPEND
     88  f1d7		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1d7					      REPEND
     88  f1d9		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1d9					      REPEND
     88  f1db		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1db					      REPEND
     88  f1dd		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1dd					      REPEND
     88  f1df		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1df					      REPEND
     88  f1e1		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1e1					      REPEND
     88  f1e3		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1e3					      REPEND
     88  f1e5		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1e5					      REPEND
     88  f1e7		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1e7					      REPEND
     88  f1e9		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1e9					      REPEND
     88  f1eb		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1eb					      REPEND
     88  f1ed		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1ed					      REPEND
     88  f1ef		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1ef					      REPEND
     88  f1f1		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1f1					      REPEND
     88  f1f3		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1f3					      REPEND
     88  f1f5		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1f5					      REPEND
     88  f1f7		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1f7					      REPEND
     88  f1f9		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1f9					      REPEND
     88  f1fb		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1fb					      REPEND
     88  f1fd		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1fd					      REPEND
     88  f1ff		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f1ff					      REPEND
     88  f201		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f201					      REPEND
     88  f203		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f203					      REPEND
     88  f205		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f205					      REPEND
     88  f207		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f207					      REPEND
     88  f209		       85 02		      sta	WSYNC	; remaining 124 scalines
     87  f209					      REPEND
     88  f20b		       85 02		      sta	WSYNC	; remaining 124 scalines
     89  f20d					      REPEND
     90  f20d
     91  f20d				   Overscan
     92  f20d		       a9 02		      lda	#2
     93  f20f		       85 01		      sta	VBLANK
     94  f211					      REPEAT	30
     95  f211		       85 02		      sta	WSYNC
     94  f211					      REPEND
     95  f213		       85 02		      sta	WSYNC
     94  f213					      REPEND
     95  f215		       85 02		      sta	WSYNC
     94  f215					      REPEND
     95  f217		       85 02		      sta	WSYNC
     94  f217					      REPEND
     95  f219		       85 02		      sta	WSYNC
     94  f219					      REPEND
     95  f21b		       85 02		      sta	WSYNC
     94  f21b					      REPEND
     95  f21d		       85 02		      sta	WSYNC
     94  f21d					      REPEND
     95  f21f		       85 02		      sta	WSYNC
     94  f21f					      REPEND
     95  f221		       85 02		      sta	WSYNC
     94  f221					      REPEND
     95  f223		       85 02		      sta	WSYNC
     94  f223					      REPEND
     95  f225		       85 02		      sta	WSYNC
     94  f225					      REPEND
     95  f227		       85 02		      sta	WSYNC
     94  f227					      REPEND
     95  f229		       85 02		      sta	WSYNC
     94  f229					      REPEND
     95  f22b		       85 02		      sta	WSYNC
     94  f22b					      REPEND
     95  f22d		       85 02		      sta	WSYNC
     94  f22d					      REPEND
     95  f22f		       85 02		      sta	WSYNC
     94  f22f					      REPEND
     95  f231		       85 02		      sta	WSYNC
     94  f231					      REPEND
     95  f233		       85 02		      sta	WSYNC
     94  f233					      REPEND
     95  f235		       85 02		      sta	WSYNC
     94  f235					      REPEND
     95  f237		       85 02		      sta	WSYNC
     94  f237					      REPEND
     95  f239		       85 02		      sta	WSYNC
     94  f239					      REPEND
     95  f23b		       85 02		      sta	WSYNC
     94  f23b					      REPEND
     95  f23d		       85 02		      sta	WSYNC
     94  f23d					      REPEND
     95  f23f		       85 02		      sta	WSYNC
     94  f23f					      REPEND
     95  f241		       85 02		      sta	WSYNC
     94  f241					      REPEND
     95  f243		       85 02		      sta	WSYNC
     94  f243					      REPEND
     95  f245		       85 02		      sta	WSYNC
     94  f245					      REPEND
     95  f247		       85 02		      sta	WSYNC
     94  f247					      REPEND
     95  f249		       85 02		      sta	WSYNC
     94  f249					      REPEND
     95  f24b		       85 02		      sta	WSYNC
     96  f24d					      REPEND
     97  f24d
     98  f24d				   CheckP0Up
     99  f24d		       a9 10		      lda	#%00010000
    100  f24f		       2c 80 02 	      bit	SWCHA
    101  f252		       d0 02		      bne	CheckP0Down
    102  f254		       e6 80		      inc	P0XPos
    103  f256				   CheckP0Down
    104  f256		       a9 20		      lda	#%00100000
    105  f258		       2c 80 02 	      bit	SWCHA
    106  f25b		       d0 02		      bne	CheckP0Left
    107  f25d		       c6 80		      dec	P0XPos
    108  f25f				   CheckP0Left
    109  f25f		       a9 40		      lda	#%01000000
    110  f261		       2c 80 02 	      bit	SWCHA
    111  f264		       d0 02		      bne	CheckP0Right
    112  f266		       c6 80		      dec	P0XPos
    113  f268				   CheckP0Right
    114  f268		       a9 80		      lda	#%10000000
    115  f26a		       2c 80 02 	      bit	SWCHA
    116  f26d		       d0 02		      bne	NoInput
    117  f26f		       e6 80		      inc	P0XPos
    118  f271				   NoInput
    119  f271							; Do nothing
    120  f271
    121  f271		       4c 13 f0 	      jmp	StartFrame
    122  f274
    123  f274
    124  f274				   P0Bitmap
    125  f274		       3c		      byte.b	#%00111100
    126  f275		       42		      byte.b	#%01000010
    127  f276		       99		      byte.b	#%10011001
    128  f277		       a5		      byte.b	#%10100101
    129  f278		       a5		      byte.b	#%10100101
    130  f279		       a5		      byte.b	#%10100101
    131  f27a		       42		      byte.b	#%01000010
    132  f27b		       3c		      byte.b	#%00111100
    133  f27c
    134  f27c				   P0Color
    135  f27c		       00		      byte.b	#$00
    136  f27d		       02		      byte.b	#$02
    137  f27e		       02		      byte.b	#$02
    138  f27f		       52		      byte.b	#$52
    139  f280		       52		      byte.b	#$52
    140  f281		       52		      byte.b	#$52
    141  f282		       52		      byte.b	#$52
    142  f283		       52		      byte.b	#$52
    143  f284
    144  f284							; Complete ROM
    145  fffc					      org	$FFFC
    146  fffc		       00 f0		      word.w	Reset
    147  fffe		       00 f0		      word.w	Reset
